// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: projectServer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "projectServer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PTBuf {

namespace {

const ::google::protobuf::Descriptor* CProjectServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProjectServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CProjectServer_PlatformName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProjectServer_PlatformName_reflection_ = NULL;
const ::google::protobuf::Descriptor* CProjectServer_ChannelName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProjectServer_ChannelName_reflection_ = NULL;
const ::google::protobuf::Descriptor* CProjectServer_DeviceType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProjectServer_DeviceType_reflection_ = NULL;
const ::google::protobuf::Descriptor* CProjectServer_Version_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProjectServer_Version_reflection_ = NULL;
const ::google::protobuf::Descriptor* CProjectServer_ServerID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProjectServer_ServerID_reflection_ = NULL;
const ::google::protobuf::Descriptor* CProjectServer_ServerName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProjectServer_ServerName_reflection_ = NULL;
const ::google::protobuf::Descriptor* CProjectServer_ServerAddr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProjectServer_ServerAddr_reflection_ = NULL;
const ::google::protobuf::Descriptor* CProjectServer_ServerType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProjectServer_ServerType_reflection_ = NULL;
const ::google::protobuf::Descriptor* CProjectServer_ServerState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProjectServer_ServerState_reflection_ = NULL;
const ::google::protobuf::Descriptor* CProjectServer_ServerIndex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProjectServer_ServerIndex_reflection_ = NULL;
const ::google::protobuf::Descriptor* CProjectServer_WhiteAddr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProjectServer_WhiteAddr_reflection_ = NULL;
const ::google::protobuf::Descriptor* CProjectServer_OpenState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProjectServer_OpenState_reflection_ = NULL;
const ::google::protobuf::Descriptor* CProjectServer_Members_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProjectServer_Members_reflection_ = NULL;
const ::google::protobuf::Descriptor* CProjectServerList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProjectServerList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_projectServer_2eproto() {
  protobuf_AddDesc_projectServer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "projectServer.proto");
  GOOGLE_CHECK(file != NULL);
  CProjectServer_descriptor_ = file->message_type(0);
  static const int CProjectServer_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer, projectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer, platformname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer, channelname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer, devicetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer, servername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer, serveraddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer, servertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer, serverstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer, serverindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer, whiteaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer, openstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer, modifytime_),
  };
  CProjectServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CProjectServer_descriptor_,
      CProjectServer::default_instance_,
      CProjectServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CProjectServer));
  CProjectServer_PlatformName_descriptor_ = file->message_type(1);
  static const int CProjectServer_PlatformName_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_PlatformName, projectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_PlatformName, platformname_),
  };
  CProjectServer_PlatformName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CProjectServer_PlatformName_descriptor_,
      CProjectServer_PlatformName::default_instance_,
      CProjectServer_PlatformName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_PlatformName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_PlatformName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CProjectServer_PlatformName));
  CProjectServer_ChannelName_descriptor_ = file->message_type(2);
  static const int CProjectServer_ChannelName_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_ChannelName, projectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_ChannelName, channelname_),
  };
  CProjectServer_ChannelName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CProjectServer_ChannelName_descriptor_,
      CProjectServer_ChannelName::default_instance_,
      CProjectServer_ChannelName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_ChannelName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_ChannelName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CProjectServer_ChannelName));
  CProjectServer_DeviceType_descriptor_ = file->message_type(3);
  static const int CProjectServer_DeviceType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_DeviceType, projectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_DeviceType, devicetype_),
  };
  CProjectServer_DeviceType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CProjectServer_DeviceType_descriptor_,
      CProjectServer_DeviceType::default_instance_,
      CProjectServer_DeviceType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_DeviceType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_DeviceType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CProjectServer_DeviceType));
  CProjectServer_Version_descriptor_ = file->message_type(4);
  static const int CProjectServer_Version_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_Version, projectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_Version, version_),
  };
  CProjectServer_Version_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CProjectServer_Version_descriptor_,
      CProjectServer_Version::default_instance_,
      CProjectServer_Version_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_Version, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_Version, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CProjectServer_Version));
  CProjectServer_ServerID_descriptor_ = file->message_type(5);
  static const int CProjectServer_ServerID_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_ServerID, projectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_ServerID, serverid_),
  };
  CProjectServer_ServerID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CProjectServer_ServerID_descriptor_,
      CProjectServer_ServerID::default_instance_,
      CProjectServer_ServerID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_ServerID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_ServerID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CProjectServer_ServerID));
  CProjectServer_ServerName_descriptor_ = file->message_type(6);
  static const int CProjectServer_ServerName_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_ServerName, projectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_ServerName, servername_),
  };
  CProjectServer_ServerName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CProjectServer_ServerName_descriptor_,
      CProjectServer_ServerName::default_instance_,
      CProjectServer_ServerName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_ServerName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_ServerName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CProjectServer_ServerName));
  CProjectServer_ServerAddr_descriptor_ = file->message_type(7);
  static const int CProjectServer_ServerAddr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_ServerAddr, projectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_ServerAddr, serveraddr_),
  };
  CProjectServer_ServerAddr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CProjectServer_ServerAddr_descriptor_,
      CProjectServer_ServerAddr::default_instance_,
      CProjectServer_ServerAddr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_ServerAddr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_ServerAddr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CProjectServer_ServerAddr));
  CProjectServer_ServerType_descriptor_ = file->message_type(8);
  static const int CProjectServer_ServerType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_ServerType, projectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_ServerType, servertype_),
  };
  CProjectServer_ServerType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CProjectServer_ServerType_descriptor_,
      CProjectServer_ServerType::default_instance_,
      CProjectServer_ServerType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_ServerType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_ServerType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CProjectServer_ServerType));
  CProjectServer_ServerState_descriptor_ = file->message_type(9);
  static const int CProjectServer_ServerState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_ServerState, projectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_ServerState, serverstate_),
  };
  CProjectServer_ServerState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CProjectServer_ServerState_descriptor_,
      CProjectServer_ServerState::default_instance_,
      CProjectServer_ServerState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_ServerState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_ServerState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CProjectServer_ServerState));
  CProjectServer_ServerIndex_descriptor_ = file->message_type(10);
  static const int CProjectServer_ServerIndex_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_ServerIndex, projectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_ServerIndex, serverindex_),
  };
  CProjectServer_ServerIndex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CProjectServer_ServerIndex_descriptor_,
      CProjectServer_ServerIndex::default_instance_,
      CProjectServer_ServerIndex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_ServerIndex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_ServerIndex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CProjectServer_ServerIndex));
  CProjectServer_WhiteAddr_descriptor_ = file->message_type(11);
  static const int CProjectServer_WhiteAddr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_WhiteAddr, projectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_WhiteAddr, whiteaddr_),
  };
  CProjectServer_WhiteAddr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CProjectServer_WhiteAddr_descriptor_,
      CProjectServer_WhiteAddr::default_instance_,
      CProjectServer_WhiteAddr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_WhiteAddr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_WhiteAddr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CProjectServer_WhiteAddr));
  CProjectServer_OpenState_descriptor_ = file->message_type(12);
  static const int CProjectServer_OpenState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_OpenState, projectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_OpenState, openstate_),
  };
  CProjectServer_OpenState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CProjectServer_OpenState_descriptor_,
      CProjectServer_OpenState::default_instance_,
      CProjectServer_OpenState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_OpenState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_OpenState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CProjectServer_OpenState));
  CProjectServer_Members_descriptor_ = file->message_type(13);
  static const int CProjectServer_Members_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_Members, projectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_Members, members_),
  };
  CProjectServer_Members_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CProjectServer_Members_descriptor_,
      CProjectServer_Members::default_instance_,
      CProjectServer_Members_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_Members, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServer_Members, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CProjectServer_Members));
  CProjectServerList_descriptor_ = file->message_type(14);
  static const int CProjectServerList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServerList, objects_),
  };
  CProjectServerList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CProjectServerList_descriptor_,
      CProjectServerList::default_instance_,
      CProjectServerList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServerList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectServerList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CProjectServerList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_projectServer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CProjectServer_descriptor_, &CProjectServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CProjectServer_PlatformName_descriptor_, &CProjectServer_PlatformName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CProjectServer_ChannelName_descriptor_, &CProjectServer_ChannelName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CProjectServer_DeviceType_descriptor_, &CProjectServer_DeviceType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CProjectServer_Version_descriptor_, &CProjectServer_Version::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CProjectServer_ServerID_descriptor_, &CProjectServer_ServerID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CProjectServer_ServerName_descriptor_, &CProjectServer_ServerName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CProjectServer_ServerAddr_descriptor_, &CProjectServer_ServerAddr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CProjectServer_ServerType_descriptor_, &CProjectServer_ServerType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CProjectServer_ServerState_descriptor_, &CProjectServer_ServerState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CProjectServer_ServerIndex_descriptor_, &CProjectServer_ServerIndex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CProjectServer_WhiteAddr_descriptor_, &CProjectServer_WhiteAddr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CProjectServer_OpenState_descriptor_, &CProjectServer_OpenState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CProjectServer_Members_descriptor_, &CProjectServer_Members::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CProjectServerList_descriptor_, &CProjectServerList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_projectServer_2eproto() {
  delete CProjectServer::default_instance_;
  delete CProjectServer_reflection_;
  delete CProjectServer_PlatformName::default_instance_;
  delete CProjectServer_PlatformName_reflection_;
  delete CProjectServer_ChannelName::default_instance_;
  delete CProjectServer_ChannelName_reflection_;
  delete CProjectServer_DeviceType::default_instance_;
  delete CProjectServer_DeviceType_reflection_;
  delete CProjectServer_Version::default_instance_;
  delete CProjectServer_Version_reflection_;
  delete CProjectServer_ServerID::default_instance_;
  delete CProjectServer_ServerID_reflection_;
  delete CProjectServer_ServerName::default_instance_;
  delete CProjectServer_ServerName_reflection_;
  delete CProjectServer_ServerAddr::default_instance_;
  delete CProjectServer_ServerAddr_reflection_;
  delete CProjectServer_ServerType::default_instance_;
  delete CProjectServer_ServerType_reflection_;
  delete CProjectServer_ServerState::default_instance_;
  delete CProjectServer_ServerState_reflection_;
  delete CProjectServer_ServerIndex::default_instance_;
  delete CProjectServer_ServerIndex_reflection_;
  delete CProjectServer_WhiteAddr::default_instance_;
  delete CProjectServer_WhiteAddr_reflection_;
  delete CProjectServer_OpenState::default_instance_;
  delete CProjectServer_OpenState_reflection_;
  delete CProjectServer_Members::default_instance_;
  delete CProjectServer_Members_reflection_;
  delete CProjectServerList::default_instance_;
  delete CProjectServerList_reflection_;
}

void protobuf_AddDesc_projectServer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::PTBuf::protobuf_AddDesc_baseDef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023projectServer.proto\022\005PTBuf\032\rbaseDef.pr"
    "oto\"\266\002\n\016CProjectServer\022\021\n\tProjectID\030\001 \001("
    "\004\022\024\n\014PlatformName\030\002 \001(\t\022\023\n\013ChannelName\030\003"
    " \001(\t\022\022\n\nDeviceType\030\004 \001(\r\022\017\n\007Version\030\005 \001("
    "\t\022\020\n\010ServerID\030\006 \001(\r\022\022\n\nServerName\030\007 \001(\t\022"
    "\022\n\nServerAddr\030\010 \001(\t\022\022\n\nServerType\030\t \001(\r\022"
    "\023\n\013ServerState\030\n \001(\r\022\023\n\013ServerIndex\030\013 \001("
    "\r\022\021\n\tWhiteAddr\030\014 \001(\t\022\021\n\tOpenState\030\r \001(\r\022"
    "\017\n\007Members\030\016 \001(\t\022\022\n\nModifyTime\030\017 \001(\t\"F\n\033"
    "CProjectServer_PlatformName\022\021\n\tProjectID"
    "\030\001 \001(\004\022\024\n\014PlatformName\030\002 \001(\t\"D\n\032CProject"
    "Server_ChannelName\022\021\n\tProjectID\030\001 \001(\004\022\023\n"
    "\013ChannelName\030\002 \001(\t\"B\n\031CProjectServer_Dev"
    "iceType\022\021\n\tProjectID\030\001 \001(\004\022\022\n\nDeviceType"
    "\030\002 \001(\r\"<\n\026CProjectServer_Version\022\021\n\tProj"
    "ectID\030\001 \001(\004\022\017\n\007Version\030\002 \001(\t\">\n\027CProject"
    "Server_ServerID\022\021\n\tProjectID\030\001 \001(\004\022\020\n\010Se"
    "rverID\030\002 \001(\r\"B\n\031CProjectServer_ServerNam"
    "e\022\021\n\tProjectID\030\001 \001(\004\022\022\n\nServerName\030\002 \001(\t"
    "\"B\n\031CProjectServer_ServerAddr\022\021\n\tProject"
    "ID\030\001 \001(\004\022\022\n\nServerAddr\030\002 \001(\t\"B\n\031CProject"
    "Server_ServerType\022\021\n\tProjectID\030\001 \001(\004\022\022\n\n"
    "ServerType\030\002 \001(\r\"D\n\032CProjectServer_Serve"
    "rState\022\021\n\tProjectID\030\001 \001(\004\022\023\n\013ServerState"
    "\030\002 \001(\r\"D\n\032CProjectServer_ServerIndex\022\021\n\t"
    "ProjectID\030\001 \001(\004\022\023\n\013ServerIndex\030\002 \001(\r\"@\n\030"
    "CProjectServer_WhiteAddr\022\021\n\tProjectID\030\001 "
    "\001(\004\022\021\n\tWhiteAddr\030\002 \001(\t\"@\n\030CProjectServer"
    "_OpenState\022\021\n\tProjectID\030\001 \001(\004\022\021\n\tOpenSta"
    "te\030\002 \001(\r\"<\n\026CProjectServer_Members\022\021\n\tPr"
    "ojectID\030\001 \001(\004\022\017\n\007Members\030\002 \001(\t\"<\n\022CProje"
    "ctServerList\022&\n\007Objects\030\001 \003(\0132\025.PTBuf.CP"
    "rojectServer", 1292);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "projectServer.proto", &protobuf_RegisterTypes);
  CProjectServer::default_instance_ = new CProjectServer();
  CProjectServer_PlatformName::default_instance_ = new CProjectServer_PlatformName();
  CProjectServer_ChannelName::default_instance_ = new CProjectServer_ChannelName();
  CProjectServer_DeviceType::default_instance_ = new CProjectServer_DeviceType();
  CProjectServer_Version::default_instance_ = new CProjectServer_Version();
  CProjectServer_ServerID::default_instance_ = new CProjectServer_ServerID();
  CProjectServer_ServerName::default_instance_ = new CProjectServer_ServerName();
  CProjectServer_ServerAddr::default_instance_ = new CProjectServer_ServerAddr();
  CProjectServer_ServerType::default_instance_ = new CProjectServer_ServerType();
  CProjectServer_ServerState::default_instance_ = new CProjectServer_ServerState();
  CProjectServer_ServerIndex::default_instance_ = new CProjectServer_ServerIndex();
  CProjectServer_WhiteAddr::default_instance_ = new CProjectServer_WhiteAddr();
  CProjectServer_OpenState::default_instance_ = new CProjectServer_OpenState();
  CProjectServer_Members::default_instance_ = new CProjectServer_Members();
  CProjectServerList::default_instance_ = new CProjectServerList();
  CProjectServer::default_instance_->InitAsDefaultInstance();
  CProjectServer_PlatformName::default_instance_->InitAsDefaultInstance();
  CProjectServer_ChannelName::default_instance_->InitAsDefaultInstance();
  CProjectServer_DeviceType::default_instance_->InitAsDefaultInstance();
  CProjectServer_Version::default_instance_->InitAsDefaultInstance();
  CProjectServer_ServerID::default_instance_->InitAsDefaultInstance();
  CProjectServer_ServerName::default_instance_->InitAsDefaultInstance();
  CProjectServer_ServerAddr::default_instance_->InitAsDefaultInstance();
  CProjectServer_ServerType::default_instance_->InitAsDefaultInstance();
  CProjectServer_ServerState::default_instance_->InitAsDefaultInstance();
  CProjectServer_ServerIndex::default_instance_->InitAsDefaultInstance();
  CProjectServer_WhiteAddr::default_instance_->InitAsDefaultInstance();
  CProjectServer_OpenState::default_instance_->InitAsDefaultInstance();
  CProjectServer_Members::default_instance_->InitAsDefaultInstance();
  CProjectServerList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_projectServer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_projectServer_2eproto {
  StaticDescriptorInitializer_projectServer_2eproto() {
    protobuf_AddDesc_projectServer_2eproto();
  }
} static_descriptor_initializer_projectServer_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CProjectServer::kProjectIDFieldNumber;
const int CProjectServer::kPlatformNameFieldNumber;
const int CProjectServer::kChannelNameFieldNumber;
const int CProjectServer::kDeviceTypeFieldNumber;
const int CProjectServer::kVersionFieldNumber;
const int CProjectServer::kServerIDFieldNumber;
const int CProjectServer::kServerNameFieldNumber;
const int CProjectServer::kServerAddrFieldNumber;
const int CProjectServer::kServerTypeFieldNumber;
const int CProjectServer::kServerStateFieldNumber;
const int CProjectServer::kServerIndexFieldNumber;
const int CProjectServer::kWhiteAddrFieldNumber;
const int CProjectServer::kOpenStateFieldNumber;
const int CProjectServer::kMembersFieldNumber;
const int CProjectServer::kModifyTimeFieldNumber;
#endif  // !_MSC_VER

CProjectServer::CProjectServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CProjectServer::InitAsDefaultInstance() {
}

CProjectServer::CProjectServer(const CProjectServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CProjectServer::SharedCtor() {
  _cached_size_ = 0;
  projectid_ = GOOGLE_ULONGLONG(0);
  platformname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  devicetype_ = 0u;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverid_ = 0u;
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serveraddr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  servertype_ = 0u;
  serverstate_ = 0u;
  serverindex_ = 0u;
  whiteaddr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  openstate_ = 0u;
  members_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  modifytime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProjectServer::~CProjectServer() {
  SharedDtor();
}

void CProjectServer::SharedDtor() {
  if (platformname_ != &::google::protobuf::internal::kEmptyString) {
    delete platformname_;
  }
  if (channelname_ != &::google::protobuf::internal::kEmptyString) {
    delete channelname_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (serveraddr_ != &::google::protobuf::internal::kEmptyString) {
    delete serveraddr_;
  }
  if (whiteaddr_ != &::google::protobuf::internal::kEmptyString) {
    delete whiteaddr_;
  }
  if (members_ != &::google::protobuf::internal::kEmptyString) {
    delete members_;
  }
  if (modifytime_ != &::google::protobuf::internal::kEmptyString) {
    delete modifytime_;
  }
  if (this != default_instance_) {
  }
}

void CProjectServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProjectServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProjectServer_descriptor_;
}

const CProjectServer& CProjectServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_projectServer_2eproto();
  return *default_instance_;
}

CProjectServer* CProjectServer::default_instance_ = NULL;

CProjectServer* CProjectServer::New() const {
  return new CProjectServer;
}

void CProjectServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    projectid_ = GOOGLE_ULONGLONG(0);
    if (has_platformname()) {
      if (platformname_ != &::google::protobuf::internal::kEmptyString) {
        platformname_->clear();
      }
    }
    if (has_channelname()) {
      if (channelname_ != &::google::protobuf::internal::kEmptyString) {
        channelname_->clear();
      }
    }
    devicetype_ = 0u;
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    serverid_ = 0u;
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::kEmptyString) {
        servername_->clear();
      }
    }
    if (has_serveraddr()) {
      if (serveraddr_ != &::google::protobuf::internal::kEmptyString) {
        serveraddr_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    servertype_ = 0u;
    serverstate_ = 0u;
    serverindex_ = 0u;
    if (has_whiteaddr()) {
      if (whiteaddr_ != &::google::protobuf::internal::kEmptyString) {
        whiteaddr_->clear();
      }
    }
    openstate_ = 0u;
    if (has_members()) {
      if (members_ != &::google::protobuf::internal::kEmptyString) {
        members_->clear();
      }
    }
    if (has_modifytime()) {
      if (modifytime_ != &::google::protobuf::internal::kEmptyString) {
        modifytime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CProjectServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ProjectID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &projectid_)));
          set_has_projectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_PlatformName;
        break;
      }

      // optional string PlatformName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlatformName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platformname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platformname().data(), this->platformname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ChannelName;
        break;
      }

      // optional string ChannelName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ChannelName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channelname().data(), this->channelname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_DeviceType;
        break;
      }

      // optional uint32 DeviceType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DeviceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &devicetype_)));
          set_has_devicetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Version;
        break;
      }

      // optional string Version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ServerID;
        break;
      }

      // optional uint32 ServerID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ServerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ServerName;
        break;
      }

      // optional string ServerName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ServerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_ServerAddr;
        break;
      }

      // optional string ServerAddr = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ServerAddr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serveraddr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serveraddr().data(), this->serveraddr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ServerType;
        break;
      }

      // optional uint32 ServerType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ServerType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &servertype_)));
          set_has_servertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ServerState;
        break;
      }

      // optional uint32 ServerState = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ServerState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverstate_)));
          set_has_serverstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_ServerIndex;
        break;
      }

      // optional uint32 ServerIndex = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ServerIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverindex_)));
          set_has_serverindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_WhiteAddr;
        break;
      }

      // optional string WhiteAddr = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_WhiteAddr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_whiteaddr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->whiteaddr().data(), this->whiteaddr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_OpenState;
        break;
      }

      // optional uint32 OpenState = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OpenState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &openstate_)));
          set_has_openstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_Members;
        break;
      }

      // optional string Members = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_members()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->members().data(), this->members().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_ModifyTime;
        break;
      }

      // optional string ModifyTime = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ModifyTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modifytime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->modifytime().data(), this->modifytime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CProjectServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 ProjectID = 1;
  if (has_projectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->projectid(), output);
  }

  // optional string PlatformName = 2;
  if (has_platformname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platformname().data(), this->platformname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->platformname(), output);
  }

  // optional string ChannelName = 3;
  if (has_channelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelname().data(), this->channelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->channelname(), output);
  }

  // optional uint32 DeviceType = 4;
  if (has_devicetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->devicetype(), output);
  }

  // optional string Version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->version(), output);
  }

  // optional uint32 ServerID = 6;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->serverid(), output);
  }

  // optional string ServerName = 7;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->servername(), output);
  }

  // optional string ServerAddr = 8;
  if (has_serveraddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serveraddr().data(), this->serveraddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->serveraddr(), output);
  }

  // optional uint32 ServerType = 9;
  if (has_servertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->servertype(), output);
  }

  // optional uint32 ServerState = 10;
  if (has_serverstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->serverstate(), output);
  }

  // optional uint32 ServerIndex = 11;
  if (has_serverindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->serverindex(), output);
  }

  // optional string WhiteAddr = 12;
  if (has_whiteaddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->whiteaddr().data(), this->whiteaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->whiteaddr(), output);
  }

  // optional uint32 OpenState = 13;
  if (has_openstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->openstate(), output);
  }

  // optional string Members = 14;
  if (has_members()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->members().data(), this->members().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->members(), output);
  }

  // optional string ModifyTime = 15;
  if (has_modifytime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modifytime().data(), this->modifytime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->modifytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CProjectServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 ProjectID = 1;
  if (has_projectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->projectid(), target);
  }

  // optional string PlatformName = 2;
  if (has_platformname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platformname().data(), this->platformname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->platformname(), target);
  }

  // optional string ChannelName = 3;
  if (has_channelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelname().data(), this->channelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->channelname(), target);
  }

  // optional uint32 DeviceType = 4;
  if (has_devicetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->devicetype(), target);
  }

  // optional string Version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->version(), target);
  }

  // optional uint32 ServerID = 6;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->serverid(), target);
  }

  // optional string ServerName = 7;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->servername(), target);
  }

  // optional string ServerAddr = 8;
  if (has_serveraddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serveraddr().data(), this->serveraddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->serveraddr(), target);
  }

  // optional uint32 ServerType = 9;
  if (has_servertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->servertype(), target);
  }

  // optional uint32 ServerState = 10;
  if (has_serverstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->serverstate(), target);
  }

  // optional uint32 ServerIndex = 11;
  if (has_serverindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->serverindex(), target);
  }

  // optional string WhiteAddr = 12;
  if (has_whiteaddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->whiteaddr().data(), this->whiteaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->whiteaddr(), target);
  }

  // optional uint32 OpenState = 13;
  if (has_openstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->openstate(), target);
  }

  // optional string Members = 14;
  if (has_members()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->members().data(), this->members().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->members(), target);
  }

  // optional string ModifyTime = 15;
  if (has_modifytime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modifytime().data(), this->modifytime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->modifytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CProjectServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ProjectID = 1;
    if (has_projectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->projectid());
    }

    // optional string PlatformName = 2;
    if (has_platformname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platformname());
    }

    // optional string ChannelName = 3;
    if (has_channelname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelname());
    }

    // optional uint32 DeviceType = 4;
    if (has_devicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->devicetype());
    }

    // optional string Version = 5;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional uint32 ServerID = 6;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // optional string ServerName = 7;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servername());
    }

    // optional string ServerAddr = 8;
    if (has_serveraddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serveraddr());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 ServerType = 9;
    if (has_servertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->servertype());
    }

    // optional uint32 ServerState = 10;
    if (has_serverstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverstate());
    }

    // optional uint32 ServerIndex = 11;
    if (has_serverindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverindex());
    }

    // optional string WhiteAddr = 12;
    if (has_whiteaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->whiteaddr());
    }

    // optional uint32 OpenState = 13;
    if (has_openstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->openstate());
    }

    // optional string Members = 14;
    if (has_members()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->members());
    }

    // optional string ModifyTime = 15;
    if (has_modifytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->modifytime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProjectServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CProjectServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CProjectServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProjectServer::MergeFrom(const CProjectServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_projectid()) {
      set_projectid(from.projectid());
    }
    if (from.has_platformname()) {
      set_platformname(from.platformname());
    }
    if (from.has_channelname()) {
      set_channelname(from.channelname());
    }
    if (from.has_devicetype()) {
      set_devicetype(from.devicetype());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_servername()) {
      set_servername(from.servername());
    }
    if (from.has_serveraddr()) {
      set_serveraddr(from.serveraddr());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_servertype()) {
      set_servertype(from.servertype());
    }
    if (from.has_serverstate()) {
      set_serverstate(from.serverstate());
    }
    if (from.has_serverindex()) {
      set_serverindex(from.serverindex());
    }
    if (from.has_whiteaddr()) {
      set_whiteaddr(from.whiteaddr());
    }
    if (from.has_openstate()) {
      set_openstate(from.openstate());
    }
    if (from.has_members()) {
      set_members(from.members());
    }
    if (from.has_modifytime()) {
      set_modifytime(from.modifytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CProjectServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProjectServer::CopyFrom(const CProjectServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProjectServer::IsInitialized() const {

  return true;
}

void CProjectServer::Swap(CProjectServer* other) {
  if (other != this) {
    std::swap(projectid_, other->projectid_);
    std::swap(platformname_, other->platformname_);
    std::swap(channelname_, other->channelname_);
    std::swap(devicetype_, other->devicetype_);
    std::swap(version_, other->version_);
    std::swap(serverid_, other->serverid_);
    std::swap(servername_, other->servername_);
    std::swap(serveraddr_, other->serveraddr_);
    std::swap(servertype_, other->servertype_);
    std::swap(serverstate_, other->serverstate_);
    std::swap(serverindex_, other->serverindex_);
    std::swap(whiteaddr_, other->whiteaddr_);
    std::swap(openstate_, other->openstate_);
    std::swap(members_, other->members_);
    std::swap(modifytime_, other->modifytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CProjectServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProjectServer_descriptor_;
  metadata.reflection = CProjectServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CProjectServer_PlatformName::kProjectIDFieldNumber;
const int CProjectServer_PlatformName::kPlatformNameFieldNumber;
#endif  // !_MSC_VER

CProjectServer_PlatformName::CProjectServer_PlatformName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CProjectServer_PlatformName::InitAsDefaultInstance() {
}

CProjectServer_PlatformName::CProjectServer_PlatformName(const CProjectServer_PlatformName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CProjectServer_PlatformName::SharedCtor() {
  _cached_size_ = 0;
  projectid_ = GOOGLE_ULONGLONG(0);
  platformname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProjectServer_PlatformName::~CProjectServer_PlatformName() {
  SharedDtor();
}

void CProjectServer_PlatformName::SharedDtor() {
  if (platformname_ != &::google::protobuf::internal::kEmptyString) {
    delete platformname_;
  }
  if (this != default_instance_) {
  }
}

void CProjectServer_PlatformName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProjectServer_PlatformName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProjectServer_PlatformName_descriptor_;
}

const CProjectServer_PlatformName& CProjectServer_PlatformName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_projectServer_2eproto();
  return *default_instance_;
}

CProjectServer_PlatformName* CProjectServer_PlatformName::default_instance_ = NULL;

CProjectServer_PlatformName* CProjectServer_PlatformName::New() const {
  return new CProjectServer_PlatformName;
}

void CProjectServer_PlatformName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    projectid_ = GOOGLE_ULONGLONG(0);
    if (has_platformname()) {
      if (platformname_ != &::google::protobuf::internal::kEmptyString) {
        platformname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CProjectServer_PlatformName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ProjectID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &projectid_)));
          set_has_projectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_PlatformName;
        break;
      }

      // optional string PlatformName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlatformName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platformname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platformname().data(), this->platformname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CProjectServer_PlatformName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 ProjectID = 1;
  if (has_projectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->projectid(), output);
  }

  // optional string PlatformName = 2;
  if (has_platformname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platformname().data(), this->platformname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->platformname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CProjectServer_PlatformName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 ProjectID = 1;
  if (has_projectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->projectid(), target);
  }

  // optional string PlatformName = 2;
  if (has_platformname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platformname().data(), this->platformname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->platformname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CProjectServer_PlatformName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ProjectID = 1;
    if (has_projectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->projectid());
    }

    // optional string PlatformName = 2;
    if (has_platformname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platformname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProjectServer_PlatformName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CProjectServer_PlatformName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CProjectServer_PlatformName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProjectServer_PlatformName::MergeFrom(const CProjectServer_PlatformName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_projectid()) {
      set_projectid(from.projectid());
    }
    if (from.has_platformname()) {
      set_platformname(from.platformname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CProjectServer_PlatformName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProjectServer_PlatformName::CopyFrom(const CProjectServer_PlatformName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProjectServer_PlatformName::IsInitialized() const {

  return true;
}

void CProjectServer_PlatformName::Swap(CProjectServer_PlatformName* other) {
  if (other != this) {
    std::swap(projectid_, other->projectid_);
    std::swap(platformname_, other->platformname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CProjectServer_PlatformName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProjectServer_PlatformName_descriptor_;
  metadata.reflection = CProjectServer_PlatformName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CProjectServer_ChannelName::kProjectIDFieldNumber;
const int CProjectServer_ChannelName::kChannelNameFieldNumber;
#endif  // !_MSC_VER

CProjectServer_ChannelName::CProjectServer_ChannelName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CProjectServer_ChannelName::InitAsDefaultInstance() {
}

CProjectServer_ChannelName::CProjectServer_ChannelName(const CProjectServer_ChannelName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CProjectServer_ChannelName::SharedCtor() {
  _cached_size_ = 0;
  projectid_ = GOOGLE_ULONGLONG(0);
  channelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProjectServer_ChannelName::~CProjectServer_ChannelName() {
  SharedDtor();
}

void CProjectServer_ChannelName::SharedDtor() {
  if (channelname_ != &::google::protobuf::internal::kEmptyString) {
    delete channelname_;
  }
  if (this != default_instance_) {
  }
}

void CProjectServer_ChannelName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProjectServer_ChannelName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProjectServer_ChannelName_descriptor_;
}

const CProjectServer_ChannelName& CProjectServer_ChannelName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_projectServer_2eproto();
  return *default_instance_;
}

CProjectServer_ChannelName* CProjectServer_ChannelName::default_instance_ = NULL;

CProjectServer_ChannelName* CProjectServer_ChannelName::New() const {
  return new CProjectServer_ChannelName;
}

void CProjectServer_ChannelName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    projectid_ = GOOGLE_ULONGLONG(0);
    if (has_channelname()) {
      if (channelname_ != &::google::protobuf::internal::kEmptyString) {
        channelname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CProjectServer_ChannelName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ProjectID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &projectid_)));
          set_has_projectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ChannelName;
        break;
      }

      // optional string ChannelName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ChannelName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channelname().data(), this->channelname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CProjectServer_ChannelName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 ProjectID = 1;
  if (has_projectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->projectid(), output);
  }

  // optional string ChannelName = 2;
  if (has_channelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelname().data(), this->channelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->channelname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CProjectServer_ChannelName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 ProjectID = 1;
  if (has_projectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->projectid(), target);
  }

  // optional string ChannelName = 2;
  if (has_channelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelname().data(), this->channelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->channelname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CProjectServer_ChannelName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ProjectID = 1;
    if (has_projectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->projectid());
    }

    // optional string ChannelName = 2;
    if (has_channelname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProjectServer_ChannelName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CProjectServer_ChannelName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CProjectServer_ChannelName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProjectServer_ChannelName::MergeFrom(const CProjectServer_ChannelName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_projectid()) {
      set_projectid(from.projectid());
    }
    if (from.has_channelname()) {
      set_channelname(from.channelname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CProjectServer_ChannelName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProjectServer_ChannelName::CopyFrom(const CProjectServer_ChannelName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProjectServer_ChannelName::IsInitialized() const {

  return true;
}

void CProjectServer_ChannelName::Swap(CProjectServer_ChannelName* other) {
  if (other != this) {
    std::swap(projectid_, other->projectid_);
    std::swap(channelname_, other->channelname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CProjectServer_ChannelName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProjectServer_ChannelName_descriptor_;
  metadata.reflection = CProjectServer_ChannelName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CProjectServer_DeviceType::kProjectIDFieldNumber;
const int CProjectServer_DeviceType::kDeviceTypeFieldNumber;
#endif  // !_MSC_VER

CProjectServer_DeviceType::CProjectServer_DeviceType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CProjectServer_DeviceType::InitAsDefaultInstance() {
}

CProjectServer_DeviceType::CProjectServer_DeviceType(const CProjectServer_DeviceType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CProjectServer_DeviceType::SharedCtor() {
  _cached_size_ = 0;
  projectid_ = GOOGLE_ULONGLONG(0);
  devicetype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProjectServer_DeviceType::~CProjectServer_DeviceType() {
  SharedDtor();
}

void CProjectServer_DeviceType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CProjectServer_DeviceType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProjectServer_DeviceType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProjectServer_DeviceType_descriptor_;
}

const CProjectServer_DeviceType& CProjectServer_DeviceType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_projectServer_2eproto();
  return *default_instance_;
}

CProjectServer_DeviceType* CProjectServer_DeviceType::default_instance_ = NULL;

CProjectServer_DeviceType* CProjectServer_DeviceType::New() const {
  return new CProjectServer_DeviceType;
}

void CProjectServer_DeviceType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    projectid_ = GOOGLE_ULONGLONG(0);
    devicetype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CProjectServer_DeviceType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ProjectID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &projectid_)));
          set_has_projectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DeviceType;
        break;
      }

      // optional uint32 DeviceType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DeviceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &devicetype_)));
          set_has_devicetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CProjectServer_DeviceType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 ProjectID = 1;
  if (has_projectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->projectid(), output);
  }

  // optional uint32 DeviceType = 2;
  if (has_devicetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->devicetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CProjectServer_DeviceType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 ProjectID = 1;
  if (has_projectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->projectid(), target);
  }

  // optional uint32 DeviceType = 2;
  if (has_devicetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->devicetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CProjectServer_DeviceType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ProjectID = 1;
    if (has_projectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->projectid());
    }

    // optional uint32 DeviceType = 2;
    if (has_devicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->devicetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProjectServer_DeviceType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CProjectServer_DeviceType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CProjectServer_DeviceType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProjectServer_DeviceType::MergeFrom(const CProjectServer_DeviceType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_projectid()) {
      set_projectid(from.projectid());
    }
    if (from.has_devicetype()) {
      set_devicetype(from.devicetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CProjectServer_DeviceType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProjectServer_DeviceType::CopyFrom(const CProjectServer_DeviceType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProjectServer_DeviceType::IsInitialized() const {

  return true;
}

void CProjectServer_DeviceType::Swap(CProjectServer_DeviceType* other) {
  if (other != this) {
    std::swap(projectid_, other->projectid_);
    std::swap(devicetype_, other->devicetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CProjectServer_DeviceType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProjectServer_DeviceType_descriptor_;
  metadata.reflection = CProjectServer_DeviceType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CProjectServer_Version::kProjectIDFieldNumber;
const int CProjectServer_Version::kVersionFieldNumber;
#endif  // !_MSC_VER

CProjectServer_Version::CProjectServer_Version()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CProjectServer_Version::InitAsDefaultInstance() {
}

CProjectServer_Version::CProjectServer_Version(const CProjectServer_Version& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CProjectServer_Version::SharedCtor() {
  _cached_size_ = 0;
  projectid_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProjectServer_Version::~CProjectServer_Version() {
  SharedDtor();
}

void CProjectServer_Version::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void CProjectServer_Version::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProjectServer_Version::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProjectServer_Version_descriptor_;
}

const CProjectServer_Version& CProjectServer_Version::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_projectServer_2eproto();
  return *default_instance_;
}

CProjectServer_Version* CProjectServer_Version::default_instance_ = NULL;

CProjectServer_Version* CProjectServer_Version::New() const {
  return new CProjectServer_Version;
}

void CProjectServer_Version::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    projectid_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CProjectServer_Version::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ProjectID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &projectid_)));
          set_has_projectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Version;
        break;
      }

      // optional string Version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CProjectServer_Version::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 ProjectID = 1;
  if (has_projectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->projectid(), output);
  }

  // optional string Version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CProjectServer_Version::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 ProjectID = 1;
  if (has_projectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->projectid(), target);
  }

  // optional string Version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CProjectServer_Version::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ProjectID = 1;
    if (has_projectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->projectid());
    }

    // optional string Version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProjectServer_Version::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CProjectServer_Version* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CProjectServer_Version*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProjectServer_Version::MergeFrom(const CProjectServer_Version& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_projectid()) {
      set_projectid(from.projectid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CProjectServer_Version::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProjectServer_Version::CopyFrom(const CProjectServer_Version& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProjectServer_Version::IsInitialized() const {

  return true;
}

void CProjectServer_Version::Swap(CProjectServer_Version* other) {
  if (other != this) {
    std::swap(projectid_, other->projectid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CProjectServer_Version::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProjectServer_Version_descriptor_;
  metadata.reflection = CProjectServer_Version_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CProjectServer_ServerID::kProjectIDFieldNumber;
const int CProjectServer_ServerID::kServerIDFieldNumber;
#endif  // !_MSC_VER

CProjectServer_ServerID::CProjectServer_ServerID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CProjectServer_ServerID::InitAsDefaultInstance() {
}

CProjectServer_ServerID::CProjectServer_ServerID(const CProjectServer_ServerID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CProjectServer_ServerID::SharedCtor() {
  _cached_size_ = 0;
  projectid_ = GOOGLE_ULONGLONG(0);
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProjectServer_ServerID::~CProjectServer_ServerID() {
  SharedDtor();
}

void CProjectServer_ServerID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CProjectServer_ServerID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProjectServer_ServerID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProjectServer_ServerID_descriptor_;
}

const CProjectServer_ServerID& CProjectServer_ServerID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_projectServer_2eproto();
  return *default_instance_;
}

CProjectServer_ServerID* CProjectServer_ServerID::default_instance_ = NULL;

CProjectServer_ServerID* CProjectServer_ServerID::New() const {
  return new CProjectServer_ServerID;
}

void CProjectServer_ServerID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    projectid_ = GOOGLE_ULONGLONG(0);
    serverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CProjectServer_ServerID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ProjectID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &projectid_)));
          set_has_projectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ServerID;
        break;
      }

      // optional uint32 ServerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ServerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CProjectServer_ServerID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 ProjectID = 1;
  if (has_projectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->projectid(), output);
  }

  // optional uint32 ServerID = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CProjectServer_ServerID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 ProjectID = 1;
  if (has_projectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->projectid(), target);
  }

  // optional uint32 ServerID = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CProjectServer_ServerID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ProjectID = 1;
    if (has_projectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->projectid());
    }

    // optional uint32 ServerID = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProjectServer_ServerID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CProjectServer_ServerID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CProjectServer_ServerID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProjectServer_ServerID::MergeFrom(const CProjectServer_ServerID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_projectid()) {
      set_projectid(from.projectid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CProjectServer_ServerID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProjectServer_ServerID::CopyFrom(const CProjectServer_ServerID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProjectServer_ServerID::IsInitialized() const {

  return true;
}

void CProjectServer_ServerID::Swap(CProjectServer_ServerID* other) {
  if (other != this) {
    std::swap(projectid_, other->projectid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CProjectServer_ServerID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProjectServer_ServerID_descriptor_;
  metadata.reflection = CProjectServer_ServerID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CProjectServer_ServerName::kProjectIDFieldNumber;
const int CProjectServer_ServerName::kServerNameFieldNumber;
#endif  // !_MSC_VER

CProjectServer_ServerName::CProjectServer_ServerName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CProjectServer_ServerName::InitAsDefaultInstance() {
}

CProjectServer_ServerName::CProjectServer_ServerName(const CProjectServer_ServerName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CProjectServer_ServerName::SharedCtor() {
  _cached_size_ = 0;
  projectid_ = GOOGLE_ULONGLONG(0);
  servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProjectServer_ServerName::~CProjectServer_ServerName() {
  SharedDtor();
}

void CProjectServer_ServerName::SharedDtor() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (this != default_instance_) {
  }
}

void CProjectServer_ServerName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProjectServer_ServerName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProjectServer_ServerName_descriptor_;
}

const CProjectServer_ServerName& CProjectServer_ServerName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_projectServer_2eproto();
  return *default_instance_;
}

CProjectServer_ServerName* CProjectServer_ServerName::default_instance_ = NULL;

CProjectServer_ServerName* CProjectServer_ServerName::New() const {
  return new CProjectServer_ServerName;
}

void CProjectServer_ServerName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    projectid_ = GOOGLE_ULONGLONG(0);
    if (has_servername()) {
      if (servername_ != &::google::protobuf::internal::kEmptyString) {
        servername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CProjectServer_ServerName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ProjectID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &projectid_)));
          set_has_projectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ServerName;
        break;
      }

      // optional string ServerName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ServerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CProjectServer_ServerName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 ProjectID = 1;
  if (has_projectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->projectid(), output);
  }

  // optional string ServerName = 2;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->servername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CProjectServer_ServerName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 ProjectID = 1;
  if (has_projectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->projectid(), target);
  }

  // optional string ServerName = 2;
  if (has_servername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->servername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CProjectServer_ServerName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ProjectID = 1;
    if (has_projectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->projectid());
    }

    // optional string ServerName = 2;
    if (has_servername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProjectServer_ServerName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CProjectServer_ServerName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CProjectServer_ServerName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProjectServer_ServerName::MergeFrom(const CProjectServer_ServerName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_projectid()) {
      set_projectid(from.projectid());
    }
    if (from.has_servername()) {
      set_servername(from.servername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CProjectServer_ServerName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProjectServer_ServerName::CopyFrom(const CProjectServer_ServerName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProjectServer_ServerName::IsInitialized() const {

  return true;
}

void CProjectServer_ServerName::Swap(CProjectServer_ServerName* other) {
  if (other != this) {
    std::swap(projectid_, other->projectid_);
    std::swap(servername_, other->servername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CProjectServer_ServerName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProjectServer_ServerName_descriptor_;
  metadata.reflection = CProjectServer_ServerName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CProjectServer_ServerAddr::kProjectIDFieldNumber;
const int CProjectServer_ServerAddr::kServerAddrFieldNumber;
#endif  // !_MSC_VER

CProjectServer_ServerAddr::CProjectServer_ServerAddr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CProjectServer_ServerAddr::InitAsDefaultInstance() {
}

CProjectServer_ServerAddr::CProjectServer_ServerAddr(const CProjectServer_ServerAddr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CProjectServer_ServerAddr::SharedCtor() {
  _cached_size_ = 0;
  projectid_ = GOOGLE_ULONGLONG(0);
  serveraddr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProjectServer_ServerAddr::~CProjectServer_ServerAddr() {
  SharedDtor();
}

void CProjectServer_ServerAddr::SharedDtor() {
  if (serveraddr_ != &::google::protobuf::internal::kEmptyString) {
    delete serveraddr_;
  }
  if (this != default_instance_) {
  }
}

void CProjectServer_ServerAddr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProjectServer_ServerAddr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProjectServer_ServerAddr_descriptor_;
}

const CProjectServer_ServerAddr& CProjectServer_ServerAddr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_projectServer_2eproto();
  return *default_instance_;
}

CProjectServer_ServerAddr* CProjectServer_ServerAddr::default_instance_ = NULL;

CProjectServer_ServerAddr* CProjectServer_ServerAddr::New() const {
  return new CProjectServer_ServerAddr;
}

void CProjectServer_ServerAddr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    projectid_ = GOOGLE_ULONGLONG(0);
    if (has_serveraddr()) {
      if (serveraddr_ != &::google::protobuf::internal::kEmptyString) {
        serveraddr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CProjectServer_ServerAddr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ProjectID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &projectid_)));
          set_has_projectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ServerAddr;
        break;
      }

      // optional string ServerAddr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ServerAddr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serveraddr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serveraddr().data(), this->serveraddr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CProjectServer_ServerAddr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 ProjectID = 1;
  if (has_projectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->projectid(), output);
  }

  // optional string ServerAddr = 2;
  if (has_serveraddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serveraddr().data(), this->serveraddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->serveraddr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CProjectServer_ServerAddr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 ProjectID = 1;
  if (has_projectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->projectid(), target);
  }

  // optional string ServerAddr = 2;
  if (has_serveraddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serveraddr().data(), this->serveraddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serveraddr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CProjectServer_ServerAddr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ProjectID = 1;
    if (has_projectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->projectid());
    }

    // optional string ServerAddr = 2;
    if (has_serveraddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serveraddr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProjectServer_ServerAddr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CProjectServer_ServerAddr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CProjectServer_ServerAddr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProjectServer_ServerAddr::MergeFrom(const CProjectServer_ServerAddr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_projectid()) {
      set_projectid(from.projectid());
    }
    if (from.has_serveraddr()) {
      set_serveraddr(from.serveraddr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CProjectServer_ServerAddr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProjectServer_ServerAddr::CopyFrom(const CProjectServer_ServerAddr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProjectServer_ServerAddr::IsInitialized() const {

  return true;
}

void CProjectServer_ServerAddr::Swap(CProjectServer_ServerAddr* other) {
  if (other != this) {
    std::swap(projectid_, other->projectid_);
    std::swap(serveraddr_, other->serveraddr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CProjectServer_ServerAddr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProjectServer_ServerAddr_descriptor_;
  metadata.reflection = CProjectServer_ServerAddr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CProjectServer_ServerType::kProjectIDFieldNumber;
const int CProjectServer_ServerType::kServerTypeFieldNumber;
#endif  // !_MSC_VER

CProjectServer_ServerType::CProjectServer_ServerType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CProjectServer_ServerType::InitAsDefaultInstance() {
}

CProjectServer_ServerType::CProjectServer_ServerType(const CProjectServer_ServerType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CProjectServer_ServerType::SharedCtor() {
  _cached_size_ = 0;
  projectid_ = GOOGLE_ULONGLONG(0);
  servertype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProjectServer_ServerType::~CProjectServer_ServerType() {
  SharedDtor();
}

void CProjectServer_ServerType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CProjectServer_ServerType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProjectServer_ServerType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProjectServer_ServerType_descriptor_;
}

const CProjectServer_ServerType& CProjectServer_ServerType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_projectServer_2eproto();
  return *default_instance_;
}

CProjectServer_ServerType* CProjectServer_ServerType::default_instance_ = NULL;

CProjectServer_ServerType* CProjectServer_ServerType::New() const {
  return new CProjectServer_ServerType;
}

void CProjectServer_ServerType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    projectid_ = GOOGLE_ULONGLONG(0);
    servertype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CProjectServer_ServerType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ProjectID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &projectid_)));
          set_has_projectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ServerType;
        break;
      }

      // optional uint32 ServerType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ServerType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &servertype_)));
          set_has_servertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CProjectServer_ServerType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 ProjectID = 1;
  if (has_projectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->projectid(), output);
  }

  // optional uint32 ServerType = 2;
  if (has_servertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->servertype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CProjectServer_ServerType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 ProjectID = 1;
  if (has_projectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->projectid(), target);
  }

  // optional uint32 ServerType = 2;
  if (has_servertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->servertype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CProjectServer_ServerType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ProjectID = 1;
    if (has_projectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->projectid());
    }

    // optional uint32 ServerType = 2;
    if (has_servertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->servertype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProjectServer_ServerType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CProjectServer_ServerType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CProjectServer_ServerType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProjectServer_ServerType::MergeFrom(const CProjectServer_ServerType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_projectid()) {
      set_projectid(from.projectid());
    }
    if (from.has_servertype()) {
      set_servertype(from.servertype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CProjectServer_ServerType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProjectServer_ServerType::CopyFrom(const CProjectServer_ServerType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProjectServer_ServerType::IsInitialized() const {

  return true;
}

void CProjectServer_ServerType::Swap(CProjectServer_ServerType* other) {
  if (other != this) {
    std::swap(projectid_, other->projectid_);
    std::swap(servertype_, other->servertype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CProjectServer_ServerType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProjectServer_ServerType_descriptor_;
  metadata.reflection = CProjectServer_ServerType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CProjectServer_ServerState::kProjectIDFieldNumber;
const int CProjectServer_ServerState::kServerStateFieldNumber;
#endif  // !_MSC_VER

CProjectServer_ServerState::CProjectServer_ServerState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CProjectServer_ServerState::InitAsDefaultInstance() {
}

CProjectServer_ServerState::CProjectServer_ServerState(const CProjectServer_ServerState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CProjectServer_ServerState::SharedCtor() {
  _cached_size_ = 0;
  projectid_ = GOOGLE_ULONGLONG(0);
  serverstate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProjectServer_ServerState::~CProjectServer_ServerState() {
  SharedDtor();
}

void CProjectServer_ServerState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CProjectServer_ServerState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProjectServer_ServerState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProjectServer_ServerState_descriptor_;
}

const CProjectServer_ServerState& CProjectServer_ServerState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_projectServer_2eproto();
  return *default_instance_;
}

CProjectServer_ServerState* CProjectServer_ServerState::default_instance_ = NULL;

CProjectServer_ServerState* CProjectServer_ServerState::New() const {
  return new CProjectServer_ServerState;
}

void CProjectServer_ServerState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    projectid_ = GOOGLE_ULONGLONG(0);
    serverstate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CProjectServer_ServerState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ProjectID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &projectid_)));
          set_has_projectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ServerState;
        break;
      }

      // optional uint32 ServerState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ServerState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverstate_)));
          set_has_serverstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CProjectServer_ServerState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 ProjectID = 1;
  if (has_projectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->projectid(), output);
  }

  // optional uint32 ServerState = 2;
  if (has_serverstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serverstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CProjectServer_ServerState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 ProjectID = 1;
  if (has_projectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->projectid(), target);
  }

  // optional uint32 ServerState = 2;
  if (has_serverstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serverstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CProjectServer_ServerState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ProjectID = 1;
    if (has_projectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->projectid());
    }

    // optional uint32 ServerState = 2;
    if (has_serverstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverstate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProjectServer_ServerState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CProjectServer_ServerState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CProjectServer_ServerState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProjectServer_ServerState::MergeFrom(const CProjectServer_ServerState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_projectid()) {
      set_projectid(from.projectid());
    }
    if (from.has_serverstate()) {
      set_serverstate(from.serverstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CProjectServer_ServerState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProjectServer_ServerState::CopyFrom(const CProjectServer_ServerState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProjectServer_ServerState::IsInitialized() const {

  return true;
}

void CProjectServer_ServerState::Swap(CProjectServer_ServerState* other) {
  if (other != this) {
    std::swap(projectid_, other->projectid_);
    std::swap(serverstate_, other->serverstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CProjectServer_ServerState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProjectServer_ServerState_descriptor_;
  metadata.reflection = CProjectServer_ServerState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CProjectServer_ServerIndex::kProjectIDFieldNumber;
const int CProjectServer_ServerIndex::kServerIndexFieldNumber;
#endif  // !_MSC_VER

CProjectServer_ServerIndex::CProjectServer_ServerIndex()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CProjectServer_ServerIndex::InitAsDefaultInstance() {
}

CProjectServer_ServerIndex::CProjectServer_ServerIndex(const CProjectServer_ServerIndex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CProjectServer_ServerIndex::SharedCtor() {
  _cached_size_ = 0;
  projectid_ = GOOGLE_ULONGLONG(0);
  serverindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProjectServer_ServerIndex::~CProjectServer_ServerIndex() {
  SharedDtor();
}

void CProjectServer_ServerIndex::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CProjectServer_ServerIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProjectServer_ServerIndex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProjectServer_ServerIndex_descriptor_;
}

const CProjectServer_ServerIndex& CProjectServer_ServerIndex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_projectServer_2eproto();
  return *default_instance_;
}

CProjectServer_ServerIndex* CProjectServer_ServerIndex::default_instance_ = NULL;

CProjectServer_ServerIndex* CProjectServer_ServerIndex::New() const {
  return new CProjectServer_ServerIndex;
}

void CProjectServer_ServerIndex::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    projectid_ = GOOGLE_ULONGLONG(0);
    serverindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CProjectServer_ServerIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ProjectID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &projectid_)));
          set_has_projectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ServerIndex;
        break;
      }

      // optional uint32 ServerIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ServerIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverindex_)));
          set_has_serverindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CProjectServer_ServerIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 ProjectID = 1;
  if (has_projectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->projectid(), output);
  }

  // optional uint32 ServerIndex = 2;
  if (has_serverindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serverindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CProjectServer_ServerIndex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 ProjectID = 1;
  if (has_projectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->projectid(), target);
  }

  // optional uint32 ServerIndex = 2;
  if (has_serverindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serverindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CProjectServer_ServerIndex::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ProjectID = 1;
    if (has_projectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->projectid());
    }

    // optional uint32 ServerIndex = 2;
    if (has_serverindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProjectServer_ServerIndex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CProjectServer_ServerIndex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CProjectServer_ServerIndex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProjectServer_ServerIndex::MergeFrom(const CProjectServer_ServerIndex& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_projectid()) {
      set_projectid(from.projectid());
    }
    if (from.has_serverindex()) {
      set_serverindex(from.serverindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CProjectServer_ServerIndex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProjectServer_ServerIndex::CopyFrom(const CProjectServer_ServerIndex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProjectServer_ServerIndex::IsInitialized() const {

  return true;
}

void CProjectServer_ServerIndex::Swap(CProjectServer_ServerIndex* other) {
  if (other != this) {
    std::swap(projectid_, other->projectid_);
    std::swap(serverindex_, other->serverindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CProjectServer_ServerIndex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProjectServer_ServerIndex_descriptor_;
  metadata.reflection = CProjectServer_ServerIndex_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CProjectServer_WhiteAddr::kProjectIDFieldNumber;
const int CProjectServer_WhiteAddr::kWhiteAddrFieldNumber;
#endif  // !_MSC_VER

CProjectServer_WhiteAddr::CProjectServer_WhiteAddr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CProjectServer_WhiteAddr::InitAsDefaultInstance() {
}

CProjectServer_WhiteAddr::CProjectServer_WhiteAddr(const CProjectServer_WhiteAddr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CProjectServer_WhiteAddr::SharedCtor() {
  _cached_size_ = 0;
  projectid_ = GOOGLE_ULONGLONG(0);
  whiteaddr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProjectServer_WhiteAddr::~CProjectServer_WhiteAddr() {
  SharedDtor();
}

void CProjectServer_WhiteAddr::SharedDtor() {
  if (whiteaddr_ != &::google::protobuf::internal::kEmptyString) {
    delete whiteaddr_;
  }
  if (this != default_instance_) {
  }
}

void CProjectServer_WhiteAddr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProjectServer_WhiteAddr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProjectServer_WhiteAddr_descriptor_;
}

const CProjectServer_WhiteAddr& CProjectServer_WhiteAddr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_projectServer_2eproto();
  return *default_instance_;
}

CProjectServer_WhiteAddr* CProjectServer_WhiteAddr::default_instance_ = NULL;

CProjectServer_WhiteAddr* CProjectServer_WhiteAddr::New() const {
  return new CProjectServer_WhiteAddr;
}

void CProjectServer_WhiteAddr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    projectid_ = GOOGLE_ULONGLONG(0);
    if (has_whiteaddr()) {
      if (whiteaddr_ != &::google::protobuf::internal::kEmptyString) {
        whiteaddr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CProjectServer_WhiteAddr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ProjectID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &projectid_)));
          set_has_projectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_WhiteAddr;
        break;
      }

      // optional string WhiteAddr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_WhiteAddr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_whiteaddr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->whiteaddr().data(), this->whiteaddr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CProjectServer_WhiteAddr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 ProjectID = 1;
  if (has_projectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->projectid(), output);
  }

  // optional string WhiteAddr = 2;
  if (has_whiteaddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->whiteaddr().data(), this->whiteaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->whiteaddr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CProjectServer_WhiteAddr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 ProjectID = 1;
  if (has_projectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->projectid(), target);
  }

  // optional string WhiteAddr = 2;
  if (has_whiteaddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->whiteaddr().data(), this->whiteaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->whiteaddr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CProjectServer_WhiteAddr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ProjectID = 1;
    if (has_projectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->projectid());
    }

    // optional string WhiteAddr = 2;
    if (has_whiteaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->whiteaddr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProjectServer_WhiteAddr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CProjectServer_WhiteAddr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CProjectServer_WhiteAddr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProjectServer_WhiteAddr::MergeFrom(const CProjectServer_WhiteAddr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_projectid()) {
      set_projectid(from.projectid());
    }
    if (from.has_whiteaddr()) {
      set_whiteaddr(from.whiteaddr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CProjectServer_WhiteAddr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProjectServer_WhiteAddr::CopyFrom(const CProjectServer_WhiteAddr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProjectServer_WhiteAddr::IsInitialized() const {

  return true;
}

void CProjectServer_WhiteAddr::Swap(CProjectServer_WhiteAddr* other) {
  if (other != this) {
    std::swap(projectid_, other->projectid_);
    std::swap(whiteaddr_, other->whiteaddr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CProjectServer_WhiteAddr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProjectServer_WhiteAddr_descriptor_;
  metadata.reflection = CProjectServer_WhiteAddr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CProjectServer_OpenState::kProjectIDFieldNumber;
const int CProjectServer_OpenState::kOpenStateFieldNumber;
#endif  // !_MSC_VER

CProjectServer_OpenState::CProjectServer_OpenState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CProjectServer_OpenState::InitAsDefaultInstance() {
}

CProjectServer_OpenState::CProjectServer_OpenState(const CProjectServer_OpenState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CProjectServer_OpenState::SharedCtor() {
  _cached_size_ = 0;
  projectid_ = GOOGLE_ULONGLONG(0);
  openstate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProjectServer_OpenState::~CProjectServer_OpenState() {
  SharedDtor();
}

void CProjectServer_OpenState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CProjectServer_OpenState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProjectServer_OpenState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProjectServer_OpenState_descriptor_;
}

const CProjectServer_OpenState& CProjectServer_OpenState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_projectServer_2eproto();
  return *default_instance_;
}

CProjectServer_OpenState* CProjectServer_OpenState::default_instance_ = NULL;

CProjectServer_OpenState* CProjectServer_OpenState::New() const {
  return new CProjectServer_OpenState;
}

void CProjectServer_OpenState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    projectid_ = GOOGLE_ULONGLONG(0);
    openstate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CProjectServer_OpenState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ProjectID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &projectid_)));
          set_has_projectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_OpenState;
        break;
      }

      // optional uint32 OpenState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OpenState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &openstate_)));
          set_has_openstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CProjectServer_OpenState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 ProjectID = 1;
  if (has_projectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->projectid(), output);
  }

  // optional uint32 OpenState = 2;
  if (has_openstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->openstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CProjectServer_OpenState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 ProjectID = 1;
  if (has_projectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->projectid(), target);
  }

  // optional uint32 OpenState = 2;
  if (has_openstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->openstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CProjectServer_OpenState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ProjectID = 1;
    if (has_projectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->projectid());
    }

    // optional uint32 OpenState = 2;
    if (has_openstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->openstate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProjectServer_OpenState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CProjectServer_OpenState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CProjectServer_OpenState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProjectServer_OpenState::MergeFrom(const CProjectServer_OpenState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_projectid()) {
      set_projectid(from.projectid());
    }
    if (from.has_openstate()) {
      set_openstate(from.openstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CProjectServer_OpenState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProjectServer_OpenState::CopyFrom(const CProjectServer_OpenState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProjectServer_OpenState::IsInitialized() const {

  return true;
}

void CProjectServer_OpenState::Swap(CProjectServer_OpenState* other) {
  if (other != this) {
    std::swap(projectid_, other->projectid_);
    std::swap(openstate_, other->openstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CProjectServer_OpenState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProjectServer_OpenState_descriptor_;
  metadata.reflection = CProjectServer_OpenState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CProjectServer_Members::kProjectIDFieldNumber;
const int CProjectServer_Members::kMembersFieldNumber;
#endif  // !_MSC_VER

CProjectServer_Members::CProjectServer_Members()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CProjectServer_Members::InitAsDefaultInstance() {
}

CProjectServer_Members::CProjectServer_Members(const CProjectServer_Members& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CProjectServer_Members::SharedCtor() {
  _cached_size_ = 0;
  projectid_ = GOOGLE_ULONGLONG(0);
  members_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProjectServer_Members::~CProjectServer_Members() {
  SharedDtor();
}

void CProjectServer_Members::SharedDtor() {
  if (members_ != &::google::protobuf::internal::kEmptyString) {
    delete members_;
  }
  if (this != default_instance_) {
  }
}

void CProjectServer_Members::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProjectServer_Members::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProjectServer_Members_descriptor_;
}

const CProjectServer_Members& CProjectServer_Members::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_projectServer_2eproto();
  return *default_instance_;
}

CProjectServer_Members* CProjectServer_Members::default_instance_ = NULL;

CProjectServer_Members* CProjectServer_Members::New() const {
  return new CProjectServer_Members;
}

void CProjectServer_Members::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    projectid_ = GOOGLE_ULONGLONG(0);
    if (has_members()) {
      if (members_ != &::google::protobuf::internal::kEmptyString) {
        members_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CProjectServer_Members::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ProjectID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &projectid_)));
          set_has_projectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Members;
        break;
      }

      // optional string Members = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_members()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->members().data(), this->members().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CProjectServer_Members::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 ProjectID = 1;
  if (has_projectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->projectid(), output);
  }

  // optional string Members = 2;
  if (has_members()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->members().data(), this->members().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->members(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CProjectServer_Members::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 ProjectID = 1;
  if (has_projectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->projectid(), target);
  }

  // optional string Members = 2;
  if (has_members()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->members().data(), this->members().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->members(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CProjectServer_Members::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ProjectID = 1;
    if (has_projectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->projectid());
    }

    // optional string Members = 2;
    if (has_members()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->members());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProjectServer_Members::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CProjectServer_Members* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CProjectServer_Members*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProjectServer_Members::MergeFrom(const CProjectServer_Members& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_projectid()) {
      set_projectid(from.projectid());
    }
    if (from.has_members()) {
      set_members(from.members());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CProjectServer_Members::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProjectServer_Members::CopyFrom(const CProjectServer_Members& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProjectServer_Members::IsInitialized() const {

  return true;
}

void CProjectServer_Members::Swap(CProjectServer_Members* other) {
  if (other != this) {
    std::swap(projectid_, other->projectid_);
    std::swap(members_, other->members_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CProjectServer_Members::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProjectServer_Members_descriptor_;
  metadata.reflection = CProjectServer_Members_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CProjectServerList::kObjectsFieldNumber;
#endif  // !_MSC_VER

CProjectServerList::CProjectServerList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CProjectServerList::InitAsDefaultInstance() {
}

CProjectServerList::CProjectServerList(const CProjectServerList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CProjectServerList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProjectServerList::~CProjectServerList() {
  SharedDtor();
}

void CProjectServerList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CProjectServerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProjectServerList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProjectServerList_descriptor_;
}

const CProjectServerList& CProjectServerList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_projectServer_2eproto();
  return *default_instance_;
}

CProjectServerList* CProjectServerList::default_instance_ = NULL;

CProjectServerList* CProjectServerList::New() const {
  return new CProjectServerList;
}

void CProjectServerList::Clear() {
  objects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CProjectServerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PTBuf.CProjectServer Objects = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Objects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objects()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Objects;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CProjectServerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PTBuf.CProjectServer Objects = 1;
  for (int i = 0; i < this->objects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->objects(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CProjectServerList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PTBuf.CProjectServer Objects = 1;
  for (int i = 0; i < this->objects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->objects(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CProjectServerList::ByteSize() const {
  int total_size = 0;

  // repeated .PTBuf.CProjectServer Objects = 1;
  total_size += 1 * this->objects_size();
  for (int i = 0; i < this->objects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objects(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProjectServerList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CProjectServerList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CProjectServerList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProjectServerList::MergeFrom(const CProjectServerList& from) {
  GOOGLE_CHECK_NE(&from, this);
  objects_.MergeFrom(from.objects_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CProjectServerList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProjectServerList::CopyFrom(const CProjectServerList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProjectServerList::IsInitialized() const {

  return true;
}

void CProjectServerList::Swap(CProjectServerList* other) {
  if (other != this) {
    objects_.Swap(&other->objects_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CProjectServerList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProjectServerList_descriptor_;
  metadata.reflection = CProjectServerList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PTBuf

// @@protoc_insertion_point(global_scope)
