// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: accountInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "accountInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PTBuf {

namespace {

const ::google::protobuf::Descriptor* CAccountInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAccountInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAccountInfo_GroupList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAccountInfo_GroupList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAccountInfo_ProjectList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAccountInfo_ProjectList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAccountInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAccountInfoList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_accountInfo_2eproto() {
  protobuf_AddDesc_accountInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "accountInfo.proto");
  GOOGLE_CHECK(file != NULL);
  CAccountInfo_descriptor_ = file->message_type(0);
  static const int CAccountInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountInfo, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountInfo, grouplist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountInfo, projectlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountInfo, modifytime_),
  };
  CAccountInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CAccountInfo_descriptor_,
      CAccountInfo::default_instance_,
      CAccountInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CAccountInfo));
  CAccountInfo_GroupList_descriptor_ = file->message_type(1);
  static const int CAccountInfo_GroupList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountInfo_GroupList, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountInfo_GroupList, grouplist_),
  };
  CAccountInfo_GroupList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CAccountInfo_GroupList_descriptor_,
      CAccountInfo_GroupList::default_instance_,
      CAccountInfo_GroupList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountInfo_GroupList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountInfo_GroupList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CAccountInfo_GroupList));
  CAccountInfo_ProjectList_descriptor_ = file->message_type(2);
  static const int CAccountInfo_ProjectList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountInfo_ProjectList, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountInfo_ProjectList, projectlist_),
  };
  CAccountInfo_ProjectList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CAccountInfo_ProjectList_descriptor_,
      CAccountInfo_ProjectList::default_instance_,
      CAccountInfo_ProjectList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountInfo_ProjectList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountInfo_ProjectList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CAccountInfo_ProjectList));
  CAccountInfoList_descriptor_ = file->message_type(3);
  static const int CAccountInfoList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountInfoList, objects_),
  };
  CAccountInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CAccountInfoList_descriptor_,
      CAccountInfoList::default_instance_,
      CAccountInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CAccountInfoList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_accountInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CAccountInfo_descriptor_, &CAccountInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CAccountInfo_GroupList_descriptor_, &CAccountInfo_GroupList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CAccountInfo_ProjectList_descriptor_, &CAccountInfo_ProjectList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CAccountInfoList_descriptor_, &CAccountInfoList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_accountInfo_2eproto() {
  delete CAccountInfo::default_instance_;
  delete CAccountInfo_reflection_;
  delete CAccountInfo_GroupList::default_instance_;
  delete CAccountInfo_GroupList_reflection_;
  delete CAccountInfo_ProjectList::default_instance_;
  delete CAccountInfo_ProjectList_reflection_;
  delete CAccountInfoList::default_instance_;
  delete CAccountInfoList_reflection_;
}

void protobuf_AddDesc_accountInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::PTBuf::protobuf_AddDesc_baseDef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021accountInfo.proto\022\005PTBuf\032\rbaseDef.prot"
    "o\"]\n\014CAccountInfo\022\021\n\tAccountID\030\001 \001(\004\022\021\n\t"
    "GroupList\030\002 \001(\t\022\023\n\013ProjectList\030\003 \001(\t\022\022\n\n"
    "ModifyTime\030\004 \001(\t\">\n\026CAccountInfo_GroupLi"
    "st\022\021\n\tAccountID\030\001 \001(\004\022\021\n\tGroupList\030\002 \001(\t"
    "\"B\n\030CAccountInfo_ProjectList\022\021\n\tAccountI"
    "D\030\001 \001(\004\022\023\n\013ProjectList\030\002 \001(\t\"8\n\020CAccount"
    "InfoList\022$\n\007Objects\030\001 \003(\0132\023.PTBuf.CAccou"
    "ntInfo", 326);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "accountInfo.proto", &protobuf_RegisterTypes);
  CAccountInfo::default_instance_ = new CAccountInfo();
  CAccountInfo_GroupList::default_instance_ = new CAccountInfo_GroupList();
  CAccountInfo_ProjectList::default_instance_ = new CAccountInfo_ProjectList();
  CAccountInfoList::default_instance_ = new CAccountInfoList();
  CAccountInfo::default_instance_->InitAsDefaultInstance();
  CAccountInfo_GroupList::default_instance_->InitAsDefaultInstance();
  CAccountInfo_ProjectList::default_instance_->InitAsDefaultInstance();
  CAccountInfoList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_accountInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_accountInfo_2eproto {
  StaticDescriptorInitializer_accountInfo_2eproto() {
    protobuf_AddDesc_accountInfo_2eproto();
  }
} static_descriptor_initializer_accountInfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CAccountInfo::kAccountIDFieldNumber;
const int CAccountInfo::kGroupListFieldNumber;
const int CAccountInfo::kProjectListFieldNumber;
const int CAccountInfo::kModifyTimeFieldNumber;
#endif  // !_MSC_VER

CAccountInfo::CAccountInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CAccountInfo::InitAsDefaultInstance() {
}

CAccountInfo::CAccountInfo(const CAccountInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CAccountInfo::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = GOOGLE_ULONGLONG(0);
  grouplist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  projectlist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  modifytime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAccountInfo::~CAccountInfo() {
  SharedDtor();
}

void CAccountInfo::SharedDtor() {
  if (grouplist_ != &::google::protobuf::internal::kEmptyString) {
    delete grouplist_;
  }
  if (projectlist_ != &::google::protobuf::internal::kEmptyString) {
    delete projectlist_;
  }
  if (modifytime_ != &::google::protobuf::internal::kEmptyString) {
    delete modifytime_;
  }
  if (this != default_instance_) {
  }
}

void CAccountInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAccountInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAccountInfo_descriptor_;
}

const CAccountInfo& CAccountInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_accountInfo_2eproto();
  return *default_instance_;
}

CAccountInfo* CAccountInfo::default_instance_ = NULL;

CAccountInfo* CAccountInfo::New() const {
  return new CAccountInfo;
}

void CAccountInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = GOOGLE_ULONGLONG(0);
    if (has_grouplist()) {
      if (grouplist_ != &::google::protobuf::internal::kEmptyString) {
        grouplist_->clear();
      }
    }
    if (has_projectlist()) {
      if (projectlist_ != &::google::protobuf::internal::kEmptyString) {
        projectlist_->clear();
      }
    }
    if (has_modifytime()) {
      if (modifytime_ != &::google::protobuf::internal::kEmptyString) {
        modifytime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CAccountInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 AccountID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_GroupList;
        break;
      }

      // optional string GroupList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GroupList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_grouplist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->grouplist().data(), this->grouplist().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ProjectList;
        break;
      }

      // optional string ProjectList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ProjectList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_projectlist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->projectlist().data(), this->projectlist().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ModifyTime;
        break;
      }

      // optional string ModifyTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ModifyTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modifytime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->modifytime().data(), this->modifytime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CAccountInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 AccountID = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->accountid(), output);
  }

  // optional string GroupList = 2;
  if (has_grouplist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->grouplist().data(), this->grouplist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->grouplist(), output);
  }

  // optional string ProjectList = 3;
  if (has_projectlist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->projectlist().data(), this->projectlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->projectlist(), output);
  }

  // optional string ModifyTime = 4;
  if (has_modifytime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modifytime().data(), this->modifytime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->modifytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CAccountInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 AccountID = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->accountid(), target);
  }

  // optional string GroupList = 2;
  if (has_grouplist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->grouplist().data(), this->grouplist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->grouplist(), target);
  }

  // optional string ProjectList = 3;
  if (has_projectlist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->projectlist().data(), this->projectlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->projectlist(), target);
  }

  // optional string ModifyTime = 4;
  if (has_modifytime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modifytime().data(), this->modifytime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->modifytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CAccountInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 AccountID = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accountid());
    }

    // optional string GroupList = 2;
    if (has_grouplist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->grouplist());
    }

    // optional string ProjectList = 3;
    if (has_projectlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->projectlist());
    }

    // optional string ModifyTime = 4;
    if (has_modifytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->modifytime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAccountInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CAccountInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CAccountInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAccountInfo::MergeFrom(const CAccountInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_grouplist()) {
      set_grouplist(from.grouplist());
    }
    if (from.has_projectlist()) {
      set_projectlist(from.projectlist());
    }
    if (from.has_modifytime()) {
      set_modifytime(from.modifytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CAccountInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountInfo::CopyFrom(const CAccountInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountInfo::IsInitialized() const {

  return true;
}

void CAccountInfo::Swap(CAccountInfo* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(grouplist_, other->grouplist_);
    std::swap(projectlist_, other->projectlist_);
    std::swap(modifytime_, other->modifytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CAccountInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAccountInfo_descriptor_;
  metadata.reflection = CAccountInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CAccountInfo_GroupList::kAccountIDFieldNumber;
const int CAccountInfo_GroupList::kGroupListFieldNumber;
#endif  // !_MSC_VER

CAccountInfo_GroupList::CAccountInfo_GroupList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CAccountInfo_GroupList::InitAsDefaultInstance() {
}

CAccountInfo_GroupList::CAccountInfo_GroupList(const CAccountInfo_GroupList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CAccountInfo_GroupList::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = GOOGLE_ULONGLONG(0);
  grouplist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAccountInfo_GroupList::~CAccountInfo_GroupList() {
  SharedDtor();
}

void CAccountInfo_GroupList::SharedDtor() {
  if (grouplist_ != &::google::protobuf::internal::kEmptyString) {
    delete grouplist_;
  }
  if (this != default_instance_) {
  }
}

void CAccountInfo_GroupList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAccountInfo_GroupList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAccountInfo_GroupList_descriptor_;
}

const CAccountInfo_GroupList& CAccountInfo_GroupList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_accountInfo_2eproto();
  return *default_instance_;
}

CAccountInfo_GroupList* CAccountInfo_GroupList::default_instance_ = NULL;

CAccountInfo_GroupList* CAccountInfo_GroupList::New() const {
  return new CAccountInfo_GroupList;
}

void CAccountInfo_GroupList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = GOOGLE_ULONGLONG(0);
    if (has_grouplist()) {
      if (grouplist_ != &::google::protobuf::internal::kEmptyString) {
        grouplist_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CAccountInfo_GroupList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 AccountID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_GroupList;
        break;
      }

      // optional string GroupList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GroupList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_grouplist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->grouplist().data(), this->grouplist().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CAccountInfo_GroupList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 AccountID = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->accountid(), output);
  }

  // optional string GroupList = 2;
  if (has_grouplist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->grouplist().data(), this->grouplist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->grouplist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CAccountInfo_GroupList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 AccountID = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->accountid(), target);
  }

  // optional string GroupList = 2;
  if (has_grouplist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->grouplist().data(), this->grouplist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->grouplist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CAccountInfo_GroupList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 AccountID = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accountid());
    }

    // optional string GroupList = 2;
    if (has_grouplist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->grouplist());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAccountInfo_GroupList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CAccountInfo_GroupList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CAccountInfo_GroupList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAccountInfo_GroupList::MergeFrom(const CAccountInfo_GroupList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_grouplist()) {
      set_grouplist(from.grouplist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CAccountInfo_GroupList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountInfo_GroupList::CopyFrom(const CAccountInfo_GroupList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountInfo_GroupList::IsInitialized() const {

  return true;
}

void CAccountInfo_GroupList::Swap(CAccountInfo_GroupList* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(grouplist_, other->grouplist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CAccountInfo_GroupList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAccountInfo_GroupList_descriptor_;
  metadata.reflection = CAccountInfo_GroupList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CAccountInfo_ProjectList::kAccountIDFieldNumber;
const int CAccountInfo_ProjectList::kProjectListFieldNumber;
#endif  // !_MSC_VER

CAccountInfo_ProjectList::CAccountInfo_ProjectList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CAccountInfo_ProjectList::InitAsDefaultInstance() {
}

CAccountInfo_ProjectList::CAccountInfo_ProjectList(const CAccountInfo_ProjectList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CAccountInfo_ProjectList::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = GOOGLE_ULONGLONG(0);
  projectlist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAccountInfo_ProjectList::~CAccountInfo_ProjectList() {
  SharedDtor();
}

void CAccountInfo_ProjectList::SharedDtor() {
  if (projectlist_ != &::google::protobuf::internal::kEmptyString) {
    delete projectlist_;
  }
  if (this != default_instance_) {
  }
}

void CAccountInfo_ProjectList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAccountInfo_ProjectList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAccountInfo_ProjectList_descriptor_;
}

const CAccountInfo_ProjectList& CAccountInfo_ProjectList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_accountInfo_2eproto();
  return *default_instance_;
}

CAccountInfo_ProjectList* CAccountInfo_ProjectList::default_instance_ = NULL;

CAccountInfo_ProjectList* CAccountInfo_ProjectList::New() const {
  return new CAccountInfo_ProjectList;
}

void CAccountInfo_ProjectList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = GOOGLE_ULONGLONG(0);
    if (has_projectlist()) {
      if (projectlist_ != &::google::protobuf::internal::kEmptyString) {
        projectlist_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CAccountInfo_ProjectList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 AccountID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ProjectList;
        break;
      }

      // optional string ProjectList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ProjectList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_projectlist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->projectlist().data(), this->projectlist().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CAccountInfo_ProjectList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 AccountID = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->accountid(), output);
  }

  // optional string ProjectList = 2;
  if (has_projectlist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->projectlist().data(), this->projectlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->projectlist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CAccountInfo_ProjectList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 AccountID = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->accountid(), target);
  }

  // optional string ProjectList = 2;
  if (has_projectlist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->projectlist().data(), this->projectlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->projectlist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CAccountInfo_ProjectList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 AccountID = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accountid());
    }

    // optional string ProjectList = 2;
    if (has_projectlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->projectlist());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAccountInfo_ProjectList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CAccountInfo_ProjectList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CAccountInfo_ProjectList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAccountInfo_ProjectList::MergeFrom(const CAccountInfo_ProjectList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_projectlist()) {
      set_projectlist(from.projectlist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CAccountInfo_ProjectList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountInfo_ProjectList::CopyFrom(const CAccountInfo_ProjectList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountInfo_ProjectList::IsInitialized() const {

  return true;
}

void CAccountInfo_ProjectList::Swap(CAccountInfo_ProjectList* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(projectlist_, other->projectlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CAccountInfo_ProjectList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAccountInfo_ProjectList_descriptor_;
  metadata.reflection = CAccountInfo_ProjectList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CAccountInfoList::kObjectsFieldNumber;
#endif  // !_MSC_VER

CAccountInfoList::CAccountInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CAccountInfoList::InitAsDefaultInstance() {
}

CAccountInfoList::CAccountInfoList(const CAccountInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CAccountInfoList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAccountInfoList::~CAccountInfoList() {
  SharedDtor();
}

void CAccountInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CAccountInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAccountInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAccountInfoList_descriptor_;
}

const CAccountInfoList& CAccountInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_accountInfo_2eproto();
  return *default_instance_;
}

CAccountInfoList* CAccountInfoList::default_instance_ = NULL;

CAccountInfoList* CAccountInfoList::New() const {
  return new CAccountInfoList;
}

void CAccountInfoList::Clear() {
  objects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CAccountInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PTBuf.CAccountInfo Objects = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Objects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objects()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Objects;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CAccountInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PTBuf.CAccountInfo Objects = 1;
  for (int i = 0; i < this->objects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->objects(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CAccountInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PTBuf.CAccountInfo Objects = 1;
  for (int i = 0; i < this->objects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->objects(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CAccountInfoList::ByteSize() const {
  int total_size = 0;

  // repeated .PTBuf.CAccountInfo Objects = 1;
  total_size += 1 * this->objects_size();
  for (int i = 0; i < this->objects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objects(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAccountInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CAccountInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CAccountInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAccountInfoList::MergeFrom(const CAccountInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  objects_.MergeFrom(from.objects_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CAccountInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountInfoList::CopyFrom(const CAccountInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountInfoList::IsInitialized() const {

  return true;
}

void CAccountInfoList::Swap(CAccountInfoList* other) {
  if (other != this) {
    objects_.Swap(&other->objects_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CAccountInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAccountInfoList_descriptor_;
  metadata.reflection = CAccountInfoList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PTBuf

// @@protoc_insertion_point(global_scope)
