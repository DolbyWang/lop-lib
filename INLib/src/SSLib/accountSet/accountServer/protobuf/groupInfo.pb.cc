// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: groupInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "groupInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PTBuf {

namespace {

const ::google::protobuf::Descriptor* CGroupInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGroupInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGroupInfo_AccountID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGroupInfo_AccountID_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGroupInfo_GroupType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGroupInfo_GroupType_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGroupInfo_GroupState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGroupInfo_GroupState_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGroupInfo_Permission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGroupInfo_Permission_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGroupInfo_Members_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGroupInfo_Members_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGroupInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGroupInfoList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_groupInfo_2eproto() {
  protobuf_AddDesc_groupInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "groupInfo.proto");
  GOOGLE_CHECK(file != NULL);
  CGroupInfo_descriptor_ = file->message_type(0);
  static const int CGroupInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGroupInfo, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGroupInfo, groupname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGroupInfo, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGroupInfo, grouptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGroupInfo, groupstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGroupInfo, permission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGroupInfo, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGroupInfo, modifytime_),
  };
  CGroupInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGroupInfo_descriptor_,
      CGroupInfo::default_instance_,
      CGroupInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGroupInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGroupInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGroupInfo));
  CGroupInfo_AccountID_descriptor_ = file->message_type(1);
  static const int CGroupInfo_AccountID_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGroupInfo_AccountID, groupname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGroupInfo_AccountID, accountid_),
  };
  CGroupInfo_AccountID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGroupInfo_AccountID_descriptor_,
      CGroupInfo_AccountID::default_instance_,
      CGroupInfo_AccountID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGroupInfo_AccountID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGroupInfo_AccountID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGroupInfo_AccountID));
  CGroupInfo_GroupType_descriptor_ = file->message_type(2);
  static const int CGroupInfo_GroupType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGroupInfo_GroupType, groupname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGroupInfo_GroupType, grouptype_),
  };
  CGroupInfo_GroupType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGroupInfo_GroupType_descriptor_,
      CGroupInfo_GroupType::default_instance_,
      CGroupInfo_GroupType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGroupInfo_GroupType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGroupInfo_GroupType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGroupInfo_GroupType));
  CGroupInfo_GroupState_descriptor_ = file->message_type(3);
  static const int CGroupInfo_GroupState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGroupInfo_GroupState, groupname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGroupInfo_GroupState, groupstate_),
  };
  CGroupInfo_GroupState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGroupInfo_GroupState_descriptor_,
      CGroupInfo_GroupState::default_instance_,
      CGroupInfo_GroupState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGroupInfo_GroupState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGroupInfo_GroupState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGroupInfo_GroupState));
  CGroupInfo_Permission_descriptor_ = file->message_type(4);
  static const int CGroupInfo_Permission_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGroupInfo_Permission, groupname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGroupInfo_Permission, permission_),
  };
  CGroupInfo_Permission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGroupInfo_Permission_descriptor_,
      CGroupInfo_Permission::default_instance_,
      CGroupInfo_Permission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGroupInfo_Permission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGroupInfo_Permission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGroupInfo_Permission));
  CGroupInfo_Members_descriptor_ = file->message_type(5);
  static const int CGroupInfo_Members_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGroupInfo_Members, groupname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGroupInfo_Members, members_),
  };
  CGroupInfo_Members_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGroupInfo_Members_descriptor_,
      CGroupInfo_Members::default_instance_,
      CGroupInfo_Members_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGroupInfo_Members, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGroupInfo_Members, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGroupInfo_Members));
  CGroupInfoList_descriptor_ = file->message_type(6);
  static const int CGroupInfoList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGroupInfoList, objects_),
  };
  CGroupInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGroupInfoList_descriptor_,
      CGroupInfoList::default_instance_,
      CGroupInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGroupInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGroupInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGroupInfoList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_groupInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGroupInfo_descriptor_, &CGroupInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGroupInfo_AccountID_descriptor_, &CGroupInfo_AccountID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGroupInfo_GroupType_descriptor_, &CGroupInfo_GroupType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGroupInfo_GroupState_descriptor_, &CGroupInfo_GroupState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGroupInfo_Permission_descriptor_, &CGroupInfo_Permission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGroupInfo_Members_descriptor_, &CGroupInfo_Members::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGroupInfoList_descriptor_, &CGroupInfoList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_groupInfo_2eproto() {
  delete CGroupInfo::default_instance_;
  delete CGroupInfo_reflection_;
  delete CGroupInfo_AccountID::default_instance_;
  delete CGroupInfo_AccountID_reflection_;
  delete CGroupInfo_GroupType::default_instance_;
  delete CGroupInfo_GroupType_reflection_;
  delete CGroupInfo_GroupState::default_instance_;
  delete CGroupInfo_GroupState_reflection_;
  delete CGroupInfo_Permission::default_instance_;
  delete CGroupInfo_Permission_reflection_;
  delete CGroupInfo_Members::default_instance_;
  delete CGroupInfo_Members_reflection_;
  delete CGroupInfoList::default_instance_;
  delete CGroupInfoList_reflection_;
}

void protobuf_AddDesc_groupInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::PTBuf::protobuf_AddDesc_baseDef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017groupInfo.proto\022\005PTBuf\032\rbaseDef.proto\""
    "\243\001\n\nCGroupInfo\022\017\n\007GroupID\030\001 \001(\004\022\021\n\tGroup"
    "Name\030\002 \001(\t\022\021\n\tAccountID\030\003 \001(\004\022\021\n\tGroupTy"
    "pe\030\004 \001(\r\022\022\n\nGroupState\030\005 \001(\r\022\022\n\nPermissi"
    "on\030\006 \001(\t\022\017\n\007Members\030\007 \001(\t\022\022\n\nModifyTime\030"
    "\010 \001(\t\"<\n\024CGroupInfo_AccountID\022\021\n\tGroupNa"
    "me\030\001 \001(\t\022\021\n\tAccountID\030\002 \001(\004\"<\n\024CGroupInf"
    "o_GroupType\022\021\n\tGroupName\030\001 \001(\t\022\021\n\tGroupT"
    "ype\030\002 \001(\r\">\n\025CGroupInfo_GroupState\022\021\n\tGr"
    "oupName\030\001 \001(\t\022\022\n\nGroupState\030\002 \001(\r\">\n\025CGr"
    "oupInfo_Permission\022\021\n\tGroupName\030\001 \001(\t\022\022\n"
    "\nPermission\030\002 \001(\t\"8\n\022CGroupInfo_Members\022"
    "\021\n\tGroupName\030\001 \001(\t\022\017\n\007Members\030\002 \001(\t\"4\n\016C"
    "GroupInfoList\022\"\n\007Objects\030\001 \003(\0132\021.PTBuf.C"
    "GroupInfo", 569);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "groupInfo.proto", &protobuf_RegisterTypes);
  CGroupInfo::default_instance_ = new CGroupInfo();
  CGroupInfo_AccountID::default_instance_ = new CGroupInfo_AccountID();
  CGroupInfo_GroupType::default_instance_ = new CGroupInfo_GroupType();
  CGroupInfo_GroupState::default_instance_ = new CGroupInfo_GroupState();
  CGroupInfo_Permission::default_instance_ = new CGroupInfo_Permission();
  CGroupInfo_Members::default_instance_ = new CGroupInfo_Members();
  CGroupInfoList::default_instance_ = new CGroupInfoList();
  CGroupInfo::default_instance_->InitAsDefaultInstance();
  CGroupInfo_AccountID::default_instance_->InitAsDefaultInstance();
  CGroupInfo_GroupType::default_instance_->InitAsDefaultInstance();
  CGroupInfo_GroupState::default_instance_->InitAsDefaultInstance();
  CGroupInfo_Permission::default_instance_->InitAsDefaultInstance();
  CGroupInfo_Members::default_instance_->InitAsDefaultInstance();
  CGroupInfoList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_groupInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_groupInfo_2eproto {
  StaticDescriptorInitializer_groupInfo_2eproto() {
    protobuf_AddDesc_groupInfo_2eproto();
  }
} static_descriptor_initializer_groupInfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CGroupInfo::kGroupIDFieldNumber;
const int CGroupInfo::kGroupNameFieldNumber;
const int CGroupInfo::kAccountIDFieldNumber;
const int CGroupInfo::kGroupTypeFieldNumber;
const int CGroupInfo::kGroupStateFieldNumber;
const int CGroupInfo::kPermissionFieldNumber;
const int CGroupInfo::kMembersFieldNumber;
const int CGroupInfo::kModifyTimeFieldNumber;
#endif  // !_MSC_VER

CGroupInfo::CGroupInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGroupInfo::InitAsDefaultInstance() {
}

CGroupInfo::CGroupInfo(const CGroupInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGroupInfo::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  groupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accountid_ = GOOGLE_ULONGLONG(0);
  grouptype_ = 0u;
  groupstate_ = 0u;
  permission_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  members_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  modifytime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGroupInfo::~CGroupInfo() {
  SharedDtor();
}

void CGroupInfo::SharedDtor() {
  if (groupname_ != &::google::protobuf::internal::kEmptyString) {
    delete groupname_;
  }
  if (permission_ != &::google::protobuf::internal::kEmptyString) {
    delete permission_;
  }
  if (members_ != &::google::protobuf::internal::kEmptyString) {
    delete members_;
  }
  if (modifytime_ != &::google::protobuf::internal::kEmptyString) {
    delete modifytime_;
  }
  if (this != default_instance_) {
  }
}

void CGroupInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGroupInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGroupInfo_descriptor_;
}

const CGroupInfo& CGroupInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_groupInfo_2eproto();
  return *default_instance_;
}

CGroupInfo* CGroupInfo::default_instance_ = NULL;

CGroupInfo* CGroupInfo::New() const {
  return new CGroupInfo;
}

void CGroupInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = GOOGLE_ULONGLONG(0);
    if (has_groupname()) {
      if (groupname_ != &::google::protobuf::internal::kEmptyString) {
        groupname_->clear();
      }
    }
    accountid_ = GOOGLE_ULONGLONG(0);
    grouptype_ = 0u;
    groupstate_ = 0u;
    if (has_permission()) {
      if (permission_ != &::google::protobuf::internal::kEmptyString) {
        permission_->clear();
      }
    }
    if (has_members()) {
      if (members_ != &::google::protobuf::internal::kEmptyString) {
        members_->clear();
      }
    }
    if (has_modifytime()) {
      if (modifytime_ != &::google::protobuf::internal::kEmptyString) {
        modifytime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGroupInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 GroupID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_GroupName;
        break;
      }

      // optional string GroupName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GroupName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->groupname().data(), this->groupname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_AccountID;
        break;
      }

      // optional uint64 AccountID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AccountID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_GroupType;
        break;
      }

      // optional uint32 GroupType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroupType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grouptype_)));
          set_has_grouptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_GroupState;
        break;
      }

      // optional uint32 GroupState = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroupState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupstate_)));
          set_has_groupstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_Permission;
        break;
      }

      // optional string Permission = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Permission:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_permission()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->permission().data(), this->permission().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_Members;
        break;
      }

      // optional string Members = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_members()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->members().data(), this->members().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_ModifyTime;
        break;
      }

      // optional string ModifyTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ModifyTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modifytime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->modifytime().data(), this->modifytime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGroupInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 GroupID = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // optional string GroupName = 2;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->groupname(), output);
  }

  // optional uint64 AccountID = 3;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->accountid(), output);
  }

  // optional uint32 GroupType = 4;
  if (has_grouptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->grouptype(), output);
  }

  // optional uint32 GroupState = 5;
  if (has_groupstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->groupstate(), output);
  }

  // optional string Permission = 6;
  if (has_permission()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->permission().data(), this->permission().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->permission(), output);
  }

  // optional string Members = 7;
  if (has_members()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->members().data(), this->members().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->members(), output);
  }

  // optional string ModifyTime = 8;
  if (has_modifytime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modifytime().data(), this->modifytime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->modifytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGroupInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 GroupID = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  // optional string GroupName = 2;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->groupname(), target);
  }

  // optional uint64 AccountID = 3;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->accountid(), target);
  }

  // optional uint32 GroupType = 4;
  if (has_grouptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->grouptype(), target);
  }

  // optional uint32 GroupState = 5;
  if (has_groupstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->groupstate(), target);
  }

  // optional string Permission = 6;
  if (has_permission()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->permission().data(), this->permission().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->permission(), target);
  }

  // optional string Members = 7;
  if (has_members()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->members().data(), this->members().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->members(), target);
  }

  // optional string ModifyTime = 8;
  if (has_modifytime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modifytime().data(), this->modifytime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->modifytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGroupInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 GroupID = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // optional string GroupName = 2;
    if (has_groupname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupname());
    }

    // optional uint64 AccountID = 3;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accountid());
    }

    // optional uint32 GroupType = 4;
    if (has_grouptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grouptype());
    }

    // optional uint32 GroupState = 5;
    if (has_groupstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupstate());
    }

    // optional string Permission = 6;
    if (has_permission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->permission());
    }

    // optional string Members = 7;
    if (has_members()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->members());
    }

    // optional string ModifyTime = 8;
    if (has_modifytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->modifytime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGroupInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGroupInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGroupInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGroupInfo::MergeFrom(const CGroupInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_groupname()) {
      set_groupname(from.groupname());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_grouptype()) {
      set_grouptype(from.grouptype());
    }
    if (from.has_groupstate()) {
      set_groupstate(from.groupstate());
    }
    if (from.has_permission()) {
      set_permission(from.permission());
    }
    if (from.has_members()) {
      set_members(from.members());
    }
    if (from.has_modifytime()) {
      set_modifytime(from.modifytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGroupInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGroupInfo::CopyFrom(const CGroupInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGroupInfo::IsInitialized() const {

  return true;
}

void CGroupInfo::Swap(CGroupInfo* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(groupname_, other->groupname_);
    std::swap(accountid_, other->accountid_);
    std::swap(grouptype_, other->grouptype_);
    std::swap(groupstate_, other->groupstate_);
    std::swap(permission_, other->permission_);
    std::swap(members_, other->members_);
    std::swap(modifytime_, other->modifytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGroupInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGroupInfo_descriptor_;
  metadata.reflection = CGroupInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGroupInfo_AccountID::kGroupNameFieldNumber;
const int CGroupInfo_AccountID::kAccountIDFieldNumber;
#endif  // !_MSC_VER

CGroupInfo_AccountID::CGroupInfo_AccountID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGroupInfo_AccountID::InitAsDefaultInstance() {
}

CGroupInfo_AccountID::CGroupInfo_AccountID(const CGroupInfo_AccountID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGroupInfo_AccountID::SharedCtor() {
  _cached_size_ = 0;
  groupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accountid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGroupInfo_AccountID::~CGroupInfo_AccountID() {
  SharedDtor();
}

void CGroupInfo_AccountID::SharedDtor() {
  if (groupname_ != &::google::protobuf::internal::kEmptyString) {
    delete groupname_;
  }
  if (this != default_instance_) {
  }
}

void CGroupInfo_AccountID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGroupInfo_AccountID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGroupInfo_AccountID_descriptor_;
}

const CGroupInfo_AccountID& CGroupInfo_AccountID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_groupInfo_2eproto();
  return *default_instance_;
}

CGroupInfo_AccountID* CGroupInfo_AccountID::default_instance_ = NULL;

CGroupInfo_AccountID* CGroupInfo_AccountID::New() const {
  return new CGroupInfo_AccountID;
}

void CGroupInfo_AccountID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_groupname()) {
      if (groupname_ != &::google::protobuf::internal::kEmptyString) {
        groupname_->clear();
      }
    }
    accountid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGroupInfo_AccountID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string GroupName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->groupname().data(), this->groupname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_AccountID;
        break;
      }

      // optional uint64 AccountID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AccountID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGroupInfo_AccountID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string GroupName = 1;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->groupname(), output);
  }

  // optional uint64 AccountID = 2;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->accountid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGroupInfo_AccountID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string GroupName = 1;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->groupname(), target);
  }

  // optional uint64 AccountID = 2;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->accountid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGroupInfo_AccountID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string GroupName = 1;
    if (has_groupname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupname());
    }

    // optional uint64 AccountID = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accountid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGroupInfo_AccountID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGroupInfo_AccountID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGroupInfo_AccountID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGroupInfo_AccountID::MergeFrom(const CGroupInfo_AccountID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupname()) {
      set_groupname(from.groupname());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGroupInfo_AccountID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGroupInfo_AccountID::CopyFrom(const CGroupInfo_AccountID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGroupInfo_AccountID::IsInitialized() const {

  return true;
}

void CGroupInfo_AccountID::Swap(CGroupInfo_AccountID* other) {
  if (other != this) {
    std::swap(groupname_, other->groupname_);
    std::swap(accountid_, other->accountid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGroupInfo_AccountID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGroupInfo_AccountID_descriptor_;
  metadata.reflection = CGroupInfo_AccountID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGroupInfo_GroupType::kGroupNameFieldNumber;
const int CGroupInfo_GroupType::kGroupTypeFieldNumber;
#endif  // !_MSC_VER

CGroupInfo_GroupType::CGroupInfo_GroupType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGroupInfo_GroupType::InitAsDefaultInstance() {
}

CGroupInfo_GroupType::CGroupInfo_GroupType(const CGroupInfo_GroupType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGroupInfo_GroupType::SharedCtor() {
  _cached_size_ = 0;
  groupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  grouptype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGroupInfo_GroupType::~CGroupInfo_GroupType() {
  SharedDtor();
}

void CGroupInfo_GroupType::SharedDtor() {
  if (groupname_ != &::google::protobuf::internal::kEmptyString) {
    delete groupname_;
  }
  if (this != default_instance_) {
  }
}

void CGroupInfo_GroupType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGroupInfo_GroupType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGroupInfo_GroupType_descriptor_;
}

const CGroupInfo_GroupType& CGroupInfo_GroupType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_groupInfo_2eproto();
  return *default_instance_;
}

CGroupInfo_GroupType* CGroupInfo_GroupType::default_instance_ = NULL;

CGroupInfo_GroupType* CGroupInfo_GroupType::New() const {
  return new CGroupInfo_GroupType;
}

void CGroupInfo_GroupType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_groupname()) {
      if (groupname_ != &::google::protobuf::internal::kEmptyString) {
        groupname_->clear();
      }
    }
    grouptype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGroupInfo_GroupType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string GroupName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->groupname().data(), this->groupname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GroupType;
        break;
      }

      // optional uint32 GroupType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroupType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grouptype_)));
          set_has_grouptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGroupInfo_GroupType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string GroupName = 1;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->groupname(), output);
  }

  // optional uint32 GroupType = 2;
  if (has_grouptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->grouptype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGroupInfo_GroupType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string GroupName = 1;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->groupname(), target);
  }

  // optional uint32 GroupType = 2;
  if (has_grouptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->grouptype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGroupInfo_GroupType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string GroupName = 1;
    if (has_groupname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupname());
    }

    // optional uint32 GroupType = 2;
    if (has_grouptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grouptype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGroupInfo_GroupType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGroupInfo_GroupType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGroupInfo_GroupType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGroupInfo_GroupType::MergeFrom(const CGroupInfo_GroupType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupname()) {
      set_groupname(from.groupname());
    }
    if (from.has_grouptype()) {
      set_grouptype(from.grouptype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGroupInfo_GroupType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGroupInfo_GroupType::CopyFrom(const CGroupInfo_GroupType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGroupInfo_GroupType::IsInitialized() const {

  return true;
}

void CGroupInfo_GroupType::Swap(CGroupInfo_GroupType* other) {
  if (other != this) {
    std::swap(groupname_, other->groupname_);
    std::swap(grouptype_, other->grouptype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGroupInfo_GroupType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGroupInfo_GroupType_descriptor_;
  metadata.reflection = CGroupInfo_GroupType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGroupInfo_GroupState::kGroupNameFieldNumber;
const int CGroupInfo_GroupState::kGroupStateFieldNumber;
#endif  // !_MSC_VER

CGroupInfo_GroupState::CGroupInfo_GroupState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGroupInfo_GroupState::InitAsDefaultInstance() {
}

CGroupInfo_GroupState::CGroupInfo_GroupState(const CGroupInfo_GroupState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGroupInfo_GroupState::SharedCtor() {
  _cached_size_ = 0;
  groupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  groupstate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGroupInfo_GroupState::~CGroupInfo_GroupState() {
  SharedDtor();
}

void CGroupInfo_GroupState::SharedDtor() {
  if (groupname_ != &::google::protobuf::internal::kEmptyString) {
    delete groupname_;
  }
  if (this != default_instance_) {
  }
}

void CGroupInfo_GroupState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGroupInfo_GroupState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGroupInfo_GroupState_descriptor_;
}

const CGroupInfo_GroupState& CGroupInfo_GroupState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_groupInfo_2eproto();
  return *default_instance_;
}

CGroupInfo_GroupState* CGroupInfo_GroupState::default_instance_ = NULL;

CGroupInfo_GroupState* CGroupInfo_GroupState::New() const {
  return new CGroupInfo_GroupState;
}

void CGroupInfo_GroupState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_groupname()) {
      if (groupname_ != &::google::protobuf::internal::kEmptyString) {
        groupname_->clear();
      }
    }
    groupstate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGroupInfo_GroupState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string GroupName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->groupname().data(), this->groupname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GroupState;
        break;
      }

      // optional uint32 GroupState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroupState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupstate_)));
          set_has_groupstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGroupInfo_GroupState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string GroupName = 1;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->groupname(), output);
  }

  // optional uint32 GroupState = 2;
  if (has_groupstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->groupstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGroupInfo_GroupState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string GroupName = 1;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->groupname(), target);
  }

  // optional uint32 GroupState = 2;
  if (has_groupstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->groupstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGroupInfo_GroupState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string GroupName = 1;
    if (has_groupname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupname());
    }

    // optional uint32 GroupState = 2;
    if (has_groupstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupstate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGroupInfo_GroupState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGroupInfo_GroupState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGroupInfo_GroupState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGroupInfo_GroupState::MergeFrom(const CGroupInfo_GroupState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupname()) {
      set_groupname(from.groupname());
    }
    if (from.has_groupstate()) {
      set_groupstate(from.groupstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGroupInfo_GroupState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGroupInfo_GroupState::CopyFrom(const CGroupInfo_GroupState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGroupInfo_GroupState::IsInitialized() const {

  return true;
}

void CGroupInfo_GroupState::Swap(CGroupInfo_GroupState* other) {
  if (other != this) {
    std::swap(groupname_, other->groupname_);
    std::swap(groupstate_, other->groupstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGroupInfo_GroupState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGroupInfo_GroupState_descriptor_;
  metadata.reflection = CGroupInfo_GroupState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGroupInfo_Permission::kGroupNameFieldNumber;
const int CGroupInfo_Permission::kPermissionFieldNumber;
#endif  // !_MSC_VER

CGroupInfo_Permission::CGroupInfo_Permission()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGroupInfo_Permission::InitAsDefaultInstance() {
}

CGroupInfo_Permission::CGroupInfo_Permission(const CGroupInfo_Permission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGroupInfo_Permission::SharedCtor() {
  _cached_size_ = 0;
  groupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  permission_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGroupInfo_Permission::~CGroupInfo_Permission() {
  SharedDtor();
}

void CGroupInfo_Permission::SharedDtor() {
  if (groupname_ != &::google::protobuf::internal::kEmptyString) {
    delete groupname_;
  }
  if (permission_ != &::google::protobuf::internal::kEmptyString) {
    delete permission_;
  }
  if (this != default_instance_) {
  }
}

void CGroupInfo_Permission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGroupInfo_Permission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGroupInfo_Permission_descriptor_;
}

const CGroupInfo_Permission& CGroupInfo_Permission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_groupInfo_2eproto();
  return *default_instance_;
}

CGroupInfo_Permission* CGroupInfo_Permission::default_instance_ = NULL;

CGroupInfo_Permission* CGroupInfo_Permission::New() const {
  return new CGroupInfo_Permission;
}

void CGroupInfo_Permission::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_groupname()) {
      if (groupname_ != &::google::protobuf::internal::kEmptyString) {
        groupname_->clear();
      }
    }
    if (has_permission()) {
      if (permission_ != &::google::protobuf::internal::kEmptyString) {
        permission_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGroupInfo_Permission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string GroupName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->groupname().data(), this->groupname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Permission;
        break;
      }

      // optional string Permission = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Permission:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_permission()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->permission().data(), this->permission().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGroupInfo_Permission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string GroupName = 1;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->groupname(), output);
  }

  // optional string Permission = 2;
  if (has_permission()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->permission().data(), this->permission().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->permission(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGroupInfo_Permission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string GroupName = 1;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->groupname(), target);
  }

  // optional string Permission = 2;
  if (has_permission()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->permission().data(), this->permission().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->permission(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGroupInfo_Permission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string GroupName = 1;
    if (has_groupname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupname());
    }

    // optional string Permission = 2;
    if (has_permission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->permission());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGroupInfo_Permission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGroupInfo_Permission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGroupInfo_Permission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGroupInfo_Permission::MergeFrom(const CGroupInfo_Permission& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupname()) {
      set_groupname(from.groupname());
    }
    if (from.has_permission()) {
      set_permission(from.permission());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGroupInfo_Permission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGroupInfo_Permission::CopyFrom(const CGroupInfo_Permission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGroupInfo_Permission::IsInitialized() const {

  return true;
}

void CGroupInfo_Permission::Swap(CGroupInfo_Permission* other) {
  if (other != this) {
    std::swap(groupname_, other->groupname_);
    std::swap(permission_, other->permission_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGroupInfo_Permission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGroupInfo_Permission_descriptor_;
  metadata.reflection = CGroupInfo_Permission_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGroupInfo_Members::kGroupNameFieldNumber;
const int CGroupInfo_Members::kMembersFieldNumber;
#endif  // !_MSC_VER

CGroupInfo_Members::CGroupInfo_Members()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGroupInfo_Members::InitAsDefaultInstance() {
}

CGroupInfo_Members::CGroupInfo_Members(const CGroupInfo_Members& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGroupInfo_Members::SharedCtor() {
  _cached_size_ = 0;
  groupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  members_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGroupInfo_Members::~CGroupInfo_Members() {
  SharedDtor();
}

void CGroupInfo_Members::SharedDtor() {
  if (groupname_ != &::google::protobuf::internal::kEmptyString) {
    delete groupname_;
  }
  if (members_ != &::google::protobuf::internal::kEmptyString) {
    delete members_;
  }
  if (this != default_instance_) {
  }
}

void CGroupInfo_Members::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGroupInfo_Members::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGroupInfo_Members_descriptor_;
}

const CGroupInfo_Members& CGroupInfo_Members::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_groupInfo_2eproto();
  return *default_instance_;
}

CGroupInfo_Members* CGroupInfo_Members::default_instance_ = NULL;

CGroupInfo_Members* CGroupInfo_Members::New() const {
  return new CGroupInfo_Members;
}

void CGroupInfo_Members::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_groupname()) {
      if (groupname_ != &::google::protobuf::internal::kEmptyString) {
        groupname_->clear();
      }
    }
    if (has_members()) {
      if (members_ != &::google::protobuf::internal::kEmptyString) {
        members_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGroupInfo_Members::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string GroupName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->groupname().data(), this->groupname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Members;
        break;
      }

      // optional string Members = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_members()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->members().data(), this->members().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGroupInfo_Members::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string GroupName = 1;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->groupname(), output);
  }

  // optional string Members = 2;
  if (has_members()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->members().data(), this->members().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->members(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGroupInfo_Members::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string GroupName = 1;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->groupname(), target);
  }

  // optional string Members = 2;
  if (has_members()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->members().data(), this->members().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->members(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGroupInfo_Members::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string GroupName = 1;
    if (has_groupname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupname());
    }

    // optional string Members = 2;
    if (has_members()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->members());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGroupInfo_Members::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGroupInfo_Members* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGroupInfo_Members*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGroupInfo_Members::MergeFrom(const CGroupInfo_Members& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupname()) {
      set_groupname(from.groupname());
    }
    if (from.has_members()) {
      set_members(from.members());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGroupInfo_Members::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGroupInfo_Members::CopyFrom(const CGroupInfo_Members& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGroupInfo_Members::IsInitialized() const {

  return true;
}

void CGroupInfo_Members::Swap(CGroupInfo_Members* other) {
  if (other != this) {
    std::swap(groupname_, other->groupname_);
    std::swap(members_, other->members_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGroupInfo_Members::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGroupInfo_Members_descriptor_;
  metadata.reflection = CGroupInfo_Members_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGroupInfoList::kObjectsFieldNumber;
#endif  // !_MSC_VER

CGroupInfoList::CGroupInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGroupInfoList::InitAsDefaultInstance() {
}

CGroupInfoList::CGroupInfoList(const CGroupInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGroupInfoList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGroupInfoList::~CGroupInfoList() {
  SharedDtor();
}

void CGroupInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGroupInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGroupInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGroupInfoList_descriptor_;
}

const CGroupInfoList& CGroupInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_groupInfo_2eproto();
  return *default_instance_;
}

CGroupInfoList* CGroupInfoList::default_instance_ = NULL;

CGroupInfoList* CGroupInfoList::New() const {
  return new CGroupInfoList;
}

void CGroupInfoList::Clear() {
  objects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGroupInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PTBuf.CGroupInfo Objects = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Objects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objects()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Objects;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGroupInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PTBuf.CGroupInfo Objects = 1;
  for (int i = 0; i < this->objects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->objects(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGroupInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PTBuf.CGroupInfo Objects = 1;
  for (int i = 0; i < this->objects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->objects(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGroupInfoList::ByteSize() const {
  int total_size = 0;

  // repeated .PTBuf.CGroupInfo Objects = 1;
  total_size += 1 * this->objects_size();
  for (int i = 0; i < this->objects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objects(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGroupInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGroupInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGroupInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGroupInfoList::MergeFrom(const CGroupInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  objects_.MergeFrom(from.objects_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGroupInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGroupInfoList::CopyFrom(const CGroupInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGroupInfoList::IsInitialized() const {

  return true;
}

void CGroupInfoList::Swap(CGroupInfoList* other) {
  if (other != this) {
    objects_.Swap(&other->objects_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGroupInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGroupInfoList_descriptor_;
  metadata.reflection = CGroupInfoList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PTBuf

// @@protoc_insertion_point(global_scope)
