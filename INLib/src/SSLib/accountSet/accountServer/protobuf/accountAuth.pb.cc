// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: accountAuth.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "accountAuth.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PTBuf {

namespace {

const ::google::protobuf::Descriptor* CAccountAuth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAccountAuth_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAccountAuth_AccountPwd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAccountAuth_AccountPwd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAccountAuth_AccountState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAccountAuth_AccountState_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAccountAuth_Permission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAccountAuth_Permission_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAccountAuth_Nickname_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAccountAuth_Nickname_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAccountAuth_Email_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAccountAuth_Email_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAccountAuth_EmailAuth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAccountAuth_EmailAuth_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAccountAuth_MobilePhone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAccountAuth_MobilePhone_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAccountAuth_MobilePhoneAuth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAccountAuth_MobilePhoneAuth_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAccountAuth_IDCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAccountAuth_IDCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAccountAuth_IDCardAuth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAccountAuth_IDCardAuth_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAccountAuth_Birthday_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAccountAuth_Birthday_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAccountAuth_LoginIP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAccountAuth_LoginIP_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAccountAuth_LoginTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAccountAuth_LoginTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAccountAuth_LimitIP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAccountAuth_LimitIP_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAccountAuthList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAccountAuthList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_accountAuth_2eproto() {
  protobuf_AddDesc_accountAuth_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "accountAuth.proto");
  GOOGLE_CHECK(file != NULL);
  CAccountAuth_descriptor_ = file->message_type(0);
  static const int CAccountAuth_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth, accountname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth, accountpwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth, accountorigin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth, accountstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth, permission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth, emailauth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth, mobilephone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth, mobilephoneauth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth, idcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth, idcardauth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth, birthday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth, registerip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth, registertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth, loginip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth, logintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth, limitip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth, modifytime_),
  };
  CAccountAuth_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CAccountAuth_descriptor_,
      CAccountAuth::default_instance_,
      CAccountAuth_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CAccountAuth));
  CAccountAuth_AccountPwd_descriptor_ = file->message_type(1);
  static const int CAccountAuth_AccountPwd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_AccountPwd, accountname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_AccountPwd, accountpwd_),
  };
  CAccountAuth_AccountPwd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CAccountAuth_AccountPwd_descriptor_,
      CAccountAuth_AccountPwd::default_instance_,
      CAccountAuth_AccountPwd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_AccountPwd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_AccountPwd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CAccountAuth_AccountPwd));
  CAccountAuth_AccountState_descriptor_ = file->message_type(2);
  static const int CAccountAuth_AccountState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_AccountState, accountname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_AccountState, accountstate_),
  };
  CAccountAuth_AccountState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CAccountAuth_AccountState_descriptor_,
      CAccountAuth_AccountState::default_instance_,
      CAccountAuth_AccountState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_AccountState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_AccountState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CAccountAuth_AccountState));
  CAccountAuth_Permission_descriptor_ = file->message_type(3);
  static const int CAccountAuth_Permission_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_Permission, accountname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_Permission, permission_),
  };
  CAccountAuth_Permission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CAccountAuth_Permission_descriptor_,
      CAccountAuth_Permission::default_instance_,
      CAccountAuth_Permission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_Permission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_Permission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CAccountAuth_Permission));
  CAccountAuth_Nickname_descriptor_ = file->message_type(4);
  static const int CAccountAuth_Nickname_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_Nickname, accountname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_Nickname, nickname_),
  };
  CAccountAuth_Nickname_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CAccountAuth_Nickname_descriptor_,
      CAccountAuth_Nickname::default_instance_,
      CAccountAuth_Nickname_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_Nickname, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_Nickname, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CAccountAuth_Nickname));
  CAccountAuth_Email_descriptor_ = file->message_type(5);
  static const int CAccountAuth_Email_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_Email, accountname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_Email, email_),
  };
  CAccountAuth_Email_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CAccountAuth_Email_descriptor_,
      CAccountAuth_Email::default_instance_,
      CAccountAuth_Email_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_Email, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_Email, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CAccountAuth_Email));
  CAccountAuth_EmailAuth_descriptor_ = file->message_type(6);
  static const int CAccountAuth_EmailAuth_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_EmailAuth, accountname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_EmailAuth, emailauth_),
  };
  CAccountAuth_EmailAuth_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CAccountAuth_EmailAuth_descriptor_,
      CAccountAuth_EmailAuth::default_instance_,
      CAccountAuth_EmailAuth_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_EmailAuth, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_EmailAuth, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CAccountAuth_EmailAuth));
  CAccountAuth_MobilePhone_descriptor_ = file->message_type(7);
  static const int CAccountAuth_MobilePhone_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_MobilePhone, accountname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_MobilePhone, mobilephone_),
  };
  CAccountAuth_MobilePhone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CAccountAuth_MobilePhone_descriptor_,
      CAccountAuth_MobilePhone::default_instance_,
      CAccountAuth_MobilePhone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_MobilePhone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_MobilePhone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CAccountAuth_MobilePhone));
  CAccountAuth_MobilePhoneAuth_descriptor_ = file->message_type(8);
  static const int CAccountAuth_MobilePhoneAuth_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_MobilePhoneAuth, accountname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_MobilePhoneAuth, mobilephoneauth_),
  };
  CAccountAuth_MobilePhoneAuth_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CAccountAuth_MobilePhoneAuth_descriptor_,
      CAccountAuth_MobilePhoneAuth::default_instance_,
      CAccountAuth_MobilePhoneAuth_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_MobilePhoneAuth, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_MobilePhoneAuth, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CAccountAuth_MobilePhoneAuth));
  CAccountAuth_IDCard_descriptor_ = file->message_type(9);
  static const int CAccountAuth_IDCard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_IDCard, accountname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_IDCard, idcard_),
  };
  CAccountAuth_IDCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CAccountAuth_IDCard_descriptor_,
      CAccountAuth_IDCard::default_instance_,
      CAccountAuth_IDCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_IDCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_IDCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CAccountAuth_IDCard));
  CAccountAuth_IDCardAuth_descriptor_ = file->message_type(10);
  static const int CAccountAuth_IDCardAuth_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_IDCardAuth, accountname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_IDCardAuth, idcardauth_),
  };
  CAccountAuth_IDCardAuth_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CAccountAuth_IDCardAuth_descriptor_,
      CAccountAuth_IDCardAuth::default_instance_,
      CAccountAuth_IDCardAuth_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_IDCardAuth, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_IDCardAuth, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CAccountAuth_IDCardAuth));
  CAccountAuth_Birthday_descriptor_ = file->message_type(11);
  static const int CAccountAuth_Birthday_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_Birthday, accountname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_Birthday, birthday_),
  };
  CAccountAuth_Birthday_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CAccountAuth_Birthday_descriptor_,
      CAccountAuth_Birthday::default_instance_,
      CAccountAuth_Birthday_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_Birthday, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_Birthday, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CAccountAuth_Birthday));
  CAccountAuth_LoginIP_descriptor_ = file->message_type(12);
  static const int CAccountAuth_LoginIP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_LoginIP, accountname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_LoginIP, loginip_),
  };
  CAccountAuth_LoginIP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CAccountAuth_LoginIP_descriptor_,
      CAccountAuth_LoginIP::default_instance_,
      CAccountAuth_LoginIP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_LoginIP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_LoginIP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CAccountAuth_LoginIP));
  CAccountAuth_LoginTime_descriptor_ = file->message_type(13);
  static const int CAccountAuth_LoginTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_LoginTime, accountname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_LoginTime, logintime_),
  };
  CAccountAuth_LoginTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CAccountAuth_LoginTime_descriptor_,
      CAccountAuth_LoginTime::default_instance_,
      CAccountAuth_LoginTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_LoginTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_LoginTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CAccountAuth_LoginTime));
  CAccountAuth_LimitIP_descriptor_ = file->message_type(14);
  static const int CAccountAuth_LimitIP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_LimitIP, accountname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_LimitIP, limitip_),
  };
  CAccountAuth_LimitIP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CAccountAuth_LimitIP_descriptor_,
      CAccountAuth_LimitIP::default_instance_,
      CAccountAuth_LimitIP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_LimitIP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuth_LimitIP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CAccountAuth_LimitIP));
  CAccountAuthList_descriptor_ = file->message_type(15);
  static const int CAccountAuthList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuthList, objects_),
  };
  CAccountAuthList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CAccountAuthList_descriptor_,
      CAccountAuthList::default_instance_,
      CAccountAuthList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuthList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountAuthList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CAccountAuthList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_accountAuth_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CAccountAuth_descriptor_, &CAccountAuth::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CAccountAuth_AccountPwd_descriptor_, &CAccountAuth_AccountPwd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CAccountAuth_AccountState_descriptor_, &CAccountAuth_AccountState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CAccountAuth_Permission_descriptor_, &CAccountAuth_Permission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CAccountAuth_Nickname_descriptor_, &CAccountAuth_Nickname::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CAccountAuth_Email_descriptor_, &CAccountAuth_Email::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CAccountAuth_EmailAuth_descriptor_, &CAccountAuth_EmailAuth::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CAccountAuth_MobilePhone_descriptor_, &CAccountAuth_MobilePhone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CAccountAuth_MobilePhoneAuth_descriptor_, &CAccountAuth_MobilePhoneAuth::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CAccountAuth_IDCard_descriptor_, &CAccountAuth_IDCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CAccountAuth_IDCardAuth_descriptor_, &CAccountAuth_IDCardAuth::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CAccountAuth_Birthday_descriptor_, &CAccountAuth_Birthday::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CAccountAuth_LoginIP_descriptor_, &CAccountAuth_LoginIP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CAccountAuth_LoginTime_descriptor_, &CAccountAuth_LoginTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CAccountAuth_LimitIP_descriptor_, &CAccountAuth_LimitIP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CAccountAuthList_descriptor_, &CAccountAuthList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_accountAuth_2eproto() {
  delete CAccountAuth::default_instance_;
  delete CAccountAuth_reflection_;
  delete CAccountAuth_AccountPwd::default_instance_;
  delete CAccountAuth_AccountPwd_reflection_;
  delete CAccountAuth_AccountState::default_instance_;
  delete CAccountAuth_AccountState_reflection_;
  delete CAccountAuth_Permission::default_instance_;
  delete CAccountAuth_Permission_reflection_;
  delete CAccountAuth_Nickname::default_instance_;
  delete CAccountAuth_Nickname_reflection_;
  delete CAccountAuth_Email::default_instance_;
  delete CAccountAuth_Email_reflection_;
  delete CAccountAuth_EmailAuth::default_instance_;
  delete CAccountAuth_EmailAuth_reflection_;
  delete CAccountAuth_MobilePhone::default_instance_;
  delete CAccountAuth_MobilePhone_reflection_;
  delete CAccountAuth_MobilePhoneAuth::default_instance_;
  delete CAccountAuth_MobilePhoneAuth_reflection_;
  delete CAccountAuth_IDCard::default_instance_;
  delete CAccountAuth_IDCard_reflection_;
  delete CAccountAuth_IDCardAuth::default_instance_;
  delete CAccountAuth_IDCardAuth_reflection_;
  delete CAccountAuth_Birthday::default_instance_;
  delete CAccountAuth_Birthday_reflection_;
  delete CAccountAuth_LoginIP::default_instance_;
  delete CAccountAuth_LoginIP_reflection_;
  delete CAccountAuth_LoginTime::default_instance_;
  delete CAccountAuth_LoginTime_reflection_;
  delete CAccountAuth_LimitIP::default_instance_;
  delete CAccountAuth_LimitIP_reflection_;
  delete CAccountAuthList::default_instance_;
  delete CAccountAuthList_reflection_;
}

void protobuf_AddDesc_accountAuth_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::PTBuf::protobuf_AddDesc_baseDef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021accountAuth.proto\022\005PTBuf\032\rbaseDef.prot"
    "o\"\226\003\n\014CAccountAuth\022\021\n\tAccountID\030\001 \001(\004\022\023\n"
    "\013AccountName\030\002 \001(\t\022\022\n\nAccountPwd\030\003 \001(\t\022\025"
    "\n\rAccountOrigin\030\004 \001(\r\022\024\n\014AccountState\030\005 "
    "\001(\r\022\022\n\nPermission\030\006 \001(\004\022\020\n\010Nickname\030\007 \001("
    "\t\022\r\n\005Email\030\010 \001(\t\022\021\n\tEmailAuth\030\t \001(\r\022\023\n\013M"
    "obilePhone\030\n \001(\t\022\027\n\017MobilePhoneAuth\030\013 \001("
    "\r\022\016\n\006IDCard\030\014 \001(\t\022\022\n\nIDCardAuth\030\r \001(\r\022\020\n"
    "\010Birthday\030\016 \001(\t\022\022\n\nRegisterIP\030\017 \001(\t\022\024\n\014R"
    "egisterTime\030\020 \001(\t\022\017\n\007LoginIP\030\021 \001(\t\022\021\n\tLo"
    "ginTime\030\022 \001(\t\022\017\n\007LimitIP\030\023 \001(\t\022\022\n\nModify"
    "Time\030\024 \001(\t\"B\n\027CAccountAuth_AccountPwd\022\023\n"
    "\013AccountName\030\001 \001(\t\022\022\n\nAccountPwd\030\002 \001(\t\"F"
    "\n\031CAccountAuth_AccountState\022\023\n\013AccountNa"
    "me\030\001 \001(\t\022\024\n\014AccountState\030\002 \001(\r\"B\n\027CAccou"
    "ntAuth_Permission\022\023\n\013AccountName\030\001 \001(\t\022\022"
    "\n\nPermission\030\002 \001(\004\">\n\025CAccountAuth_Nickn"
    "ame\022\023\n\013AccountName\030\001 \001(\t\022\020\n\010Nickname\030\002 \001"
    "(\t\"8\n\022CAccountAuth_Email\022\023\n\013AccountName\030"
    "\001 \001(\t\022\r\n\005Email\030\002 \001(\t\"@\n\026CAccountAuth_Ema"
    "ilAuth\022\023\n\013AccountName\030\001 \001(\t\022\021\n\tEmailAuth"
    "\030\002 \001(\r\"D\n\030CAccountAuth_MobilePhone\022\023\n\013Ac"
    "countName\030\001 \001(\t\022\023\n\013MobilePhone\030\002 \001(\t\"L\n\034"
    "CAccountAuth_MobilePhoneAuth\022\023\n\013AccountN"
    "ame\030\001 \001(\t\022\027\n\017MobilePhoneAuth\030\002 \001(\r\":\n\023CA"
    "ccountAuth_IDCard\022\023\n\013AccountName\030\001 \001(\t\022\016"
    "\n\006IDCard\030\002 \001(\t\"B\n\027CAccountAuth_IDCardAut"
    "h\022\023\n\013AccountName\030\001 \001(\t\022\022\n\nIDCardAuth\030\002 \001"
    "(\r\">\n\025CAccountAuth_Birthday\022\023\n\013AccountNa"
    "me\030\001 \001(\t\022\020\n\010Birthday\030\002 \001(\t\"<\n\024CAccountAu"
    "th_LoginIP\022\023\n\013AccountName\030\001 \001(\t\022\017\n\007Login"
    "IP\030\002 \001(\t\"@\n\026CAccountAuth_LoginTime\022\023\n\013Ac"
    "countName\030\001 \001(\t\022\021\n\tLoginTime\030\002 \001(\t\"<\n\024CA"
    "ccountAuth_LimitIP\022\023\n\013AccountName\030\001 \001(\t\022"
    "\017\n\007LimitIP\030\002 \001(\t\"8\n\020CAccountAuthList\022$\n\007"
    "Objects\030\001 \003(\0132\023.PTBuf.CAccountAuth", 1434);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "accountAuth.proto", &protobuf_RegisterTypes);
  CAccountAuth::default_instance_ = new CAccountAuth();
  CAccountAuth_AccountPwd::default_instance_ = new CAccountAuth_AccountPwd();
  CAccountAuth_AccountState::default_instance_ = new CAccountAuth_AccountState();
  CAccountAuth_Permission::default_instance_ = new CAccountAuth_Permission();
  CAccountAuth_Nickname::default_instance_ = new CAccountAuth_Nickname();
  CAccountAuth_Email::default_instance_ = new CAccountAuth_Email();
  CAccountAuth_EmailAuth::default_instance_ = new CAccountAuth_EmailAuth();
  CAccountAuth_MobilePhone::default_instance_ = new CAccountAuth_MobilePhone();
  CAccountAuth_MobilePhoneAuth::default_instance_ = new CAccountAuth_MobilePhoneAuth();
  CAccountAuth_IDCard::default_instance_ = new CAccountAuth_IDCard();
  CAccountAuth_IDCardAuth::default_instance_ = new CAccountAuth_IDCardAuth();
  CAccountAuth_Birthday::default_instance_ = new CAccountAuth_Birthday();
  CAccountAuth_LoginIP::default_instance_ = new CAccountAuth_LoginIP();
  CAccountAuth_LoginTime::default_instance_ = new CAccountAuth_LoginTime();
  CAccountAuth_LimitIP::default_instance_ = new CAccountAuth_LimitIP();
  CAccountAuthList::default_instance_ = new CAccountAuthList();
  CAccountAuth::default_instance_->InitAsDefaultInstance();
  CAccountAuth_AccountPwd::default_instance_->InitAsDefaultInstance();
  CAccountAuth_AccountState::default_instance_->InitAsDefaultInstance();
  CAccountAuth_Permission::default_instance_->InitAsDefaultInstance();
  CAccountAuth_Nickname::default_instance_->InitAsDefaultInstance();
  CAccountAuth_Email::default_instance_->InitAsDefaultInstance();
  CAccountAuth_EmailAuth::default_instance_->InitAsDefaultInstance();
  CAccountAuth_MobilePhone::default_instance_->InitAsDefaultInstance();
  CAccountAuth_MobilePhoneAuth::default_instance_->InitAsDefaultInstance();
  CAccountAuth_IDCard::default_instance_->InitAsDefaultInstance();
  CAccountAuth_IDCardAuth::default_instance_->InitAsDefaultInstance();
  CAccountAuth_Birthday::default_instance_->InitAsDefaultInstance();
  CAccountAuth_LoginIP::default_instance_->InitAsDefaultInstance();
  CAccountAuth_LoginTime::default_instance_->InitAsDefaultInstance();
  CAccountAuth_LimitIP::default_instance_->InitAsDefaultInstance();
  CAccountAuthList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_accountAuth_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_accountAuth_2eproto {
  StaticDescriptorInitializer_accountAuth_2eproto() {
    protobuf_AddDesc_accountAuth_2eproto();
  }
} static_descriptor_initializer_accountAuth_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CAccountAuth::kAccountIDFieldNumber;
const int CAccountAuth::kAccountNameFieldNumber;
const int CAccountAuth::kAccountPwdFieldNumber;
const int CAccountAuth::kAccountOriginFieldNumber;
const int CAccountAuth::kAccountStateFieldNumber;
const int CAccountAuth::kPermissionFieldNumber;
const int CAccountAuth::kNicknameFieldNumber;
const int CAccountAuth::kEmailFieldNumber;
const int CAccountAuth::kEmailAuthFieldNumber;
const int CAccountAuth::kMobilePhoneFieldNumber;
const int CAccountAuth::kMobilePhoneAuthFieldNumber;
const int CAccountAuth::kIDCardFieldNumber;
const int CAccountAuth::kIDCardAuthFieldNumber;
const int CAccountAuth::kBirthdayFieldNumber;
const int CAccountAuth::kRegisterIPFieldNumber;
const int CAccountAuth::kRegisterTimeFieldNumber;
const int CAccountAuth::kLoginIPFieldNumber;
const int CAccountAuth::kLoginTimeFieldNumber;
const int CAccountAuth::kLimitIPFieldNumber;
const int CAccountAuth::kModifyTimeFieldNumber;
#endif  // !_MSC_VER

CAccountAuth::CAccountAuth()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CAccountAuth::InitAsDefaultInstance() {
}

CAccountAuth::CAccountAuth(const CAccountAuth& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CAccountAuth::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = GOOGLE_ULONGLONG(0);
  accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accountpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accountorigin_ = 0u;
  accountstate_ = 0u;
  permission_ = GOOGLE_ULONGLONG(0);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  emailauth_ = 0u;
  mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mobilephoneauth_ = 0u;
  idcard_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  idcardauth_ = 0u;
  birthday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  registerip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  registertime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  loginip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  logintime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  limitip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  modifytime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAccountAuth::~CAccountAuth() {
  SharedDtor();
}

void CAccountAuth::SharedDtor() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (accountpwd_ != &::google::protobuf::internal::kEmptyString) {
    delete accountpwd_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (mobilephone_ != &::google::protobuf::internal::kEmptyString) {
    delete mobilephone_;
  }
  if (idcard_ != &::google::protobuf::internal::kEmptyString) {
    delete idcard_;
  }
  if (birthday_ != &::google::protobuf::internal::kEmptyString) {
    delete birthday_;
  }
  if (registerip_ != &::google::protobuf::internal::kEmptyString) {
    delete registerip_;
  }
  if (registertime_ != &::google::protobuf::internal::kEmptyString) {
    delete registertime_;
  }
  if (loginip_ != &::google::protobuf::internal::kEmptyString) {
    delete loginip_;
  }
  if (logintime_ != &::google::protobuf::internal::kEmptyString) {
    delete logintime_;
  }
  if (limitip_ != &::google::protobuf::internal::kEmptyString) {
    delete limitip_;
  }
  if (modifytime_ != &::google::protobuf::internal::kEmptyString) {
    delete modifytime_;
  }
  if (this != default_instance_) {
  }
}

void CAccountAuth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAccountAuth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAccountAuth_descriptor_;
}

const CAccountAuth& CAccountAuth::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_accountAuth_2eproto();
  return *default_instance_;
}

CAccountAuth* CAccountAuth::default_instance_ = NULL;

CAccountAuth* CAccountAuth::New() const {
  return new CAccountAuth;
}

void CAccountAuth::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = GOOGLE_ULONGLONG(0);
    if (has_accountname()) {
      if (accountname_ != &::google::protobuf::internal::kEmptyString) {
        accountname_->clear();
      }
    }
    if (has_accountpwd()) {
      if (accountpwd_ != &::google::protobuf::internal::kEmptyString) {
        accountpwd_->clear();
      }
    }
    accountorigin_ = 0u;
    accountstate_ = 0u;
    permission_ = GOOGLE_ULONGLONG(0);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    emailauth_ = 0u;
    if (has_mobilephone()) {
      if (mobilephone_ != &::google::protobuf::internal::kEmptyString) {
        mobilephone_->clear();
      }
    }
    mobilephoneauth_ = 0u;
    if (has_idcard()) {
      if (idcard_ != &::google::protobuf::internal::kEmptyString) {
        idcard_->clear();
      }
    }
    idcardauth_ = 0u;
    if (has_birthday()) {
      if (birthday_ != &::google::protobuf::internal::kEmptyString) {
        birthday_->clear();
      }
    }
    if (has_registerip()) {
      if (registerip_ != &::google::protobuf::internal::kEmptyString) {
        registerip_->clear();
      }
    }
    if (has_registertime()) {
      if (registertime_ != &::google::protobuf::internal::kEmptyString) {
        registertime_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_loginip()) {
      if (loginip_ != &::google::protobuf::internal::kEmptyString) {
        loginip_->clear();
      }
    }
    if (has_logintime()) {
      if (logintime_ != &::google::protobuf::internal::kEmptyString) {
        logintime_->clear();
      }
    }
    if (has_limitip()) {
      if (limitip_ != &::google::protobuf::internal::kEmptyString) {
        limitip_->clear();
      }
    }
    if (has_modifytime()) {
      if (modifytime_ != &::google::protobuf::internal::kEmptyString) {
        modifytime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CAccountAuth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 AccountID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AccountName;
        break;
      }

      // optional string AccountName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AccountName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountname().data(), this->accountname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_AccountPwd;
        break;
      }

      // optional string AccountPwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AccountPwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountpwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountpwd().data(), this->accountpwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_AccountOrigin;
        break;
      }

      // optional uint32 AccountOrigin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AccountOrigin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountorigin_)));
          set_has_accountorigin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_AccountState;
        break;
      }

      // optional uint32 AccountState = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AccountState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountstate_)));
          set_has_accountstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Permission;
        break;
      }

      // optional uint64 Permission = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Permission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &permission_)));
          set_has_permission();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_Nickname;
        break;
      }

      // optional string Nickname = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_Email;
        break;
      }

      // optional string Email = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_EmailAuth;
        break;
      }

      // optional uint32 EmailAuth = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EmailAuth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &emailauth_)));
          set_has_emailauth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_MobilePhone;
        break;
      }

      // optional string MobilePhone = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MobilePhone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobilephone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mobilephone().data(), this->mobilephone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_MobilePhoneAuth;
        break;
      }

      // optional uint32 MobilePhoneAuth = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MobilePhoneAuth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mobilephoneauth_)));
          set_has_mobilephoneauth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_IDCard;
        break;
      }

      // optional string IDCard = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IDCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idcard()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->idcard().data(), this->idcard().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_IDCardAuth;
        break;
      }

      // optional uint32 IDCardAuth = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IDCardAuth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idcardauth_)));
          set_has_idcardauth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_Birthday;
        break;
      }

      // optional string Birthday = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Birthday:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_birthday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->birthday().data(), this->birthday().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_RegisterIP;
        break;
      }

      // optional string RegisterIP = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RegisterIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_registerip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->registerip().data(), this->registerip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_RegisterTime;
        break;
      }

      // optional string RegisterTime = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RegisterTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_registertime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->registertime().data(), this->registertime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_LoginIP;
        break;
      }

      // optional string LoginIP = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LoginIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loginip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->loginip().data(), this->loginip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_LoginTime;
        break;
      }

      // optional string LoginTime = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LoginTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logintime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->logintime().data(), this->logintime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_LimitIP;
        break;
      }

      // optional string LimitIP = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LimitIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_limitip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->limitip().data(), this->limitip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_ModifyTime;
        break;
      }

      // optional string ModifyTime = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ModifyTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modifytime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->modifytime().data(), this->modifytime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CAccountAuth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 AccountID = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->accountid(), output);
  }

  // optional string AccountName = 2;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->accountname(), output);
  }

  // optional string AccountPwd = 3;
  if (has_accountpwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountpwd().data(), this->accountpwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->accountpwd(), output);
  }

  // optional uint32 AccountOrigin = 4;
  if (has_accountorigin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->accountorigin(), output);
  }

  // optional uint32 AccountState = 5;
  if (has_accountstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->accountstate(), output);
  }

  // optional uint64 Permission = 6;
  if (has_permission()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->permission(), output);
  }

  // optional string Nickname = 7;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->nickname(), output);
  }

  // optional string Email = 8;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->email(), output);
  }

  // optional uint32 EmailAuth = 9;
  if (has_emailauth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->emailauth(), output);
  }

  // optional string MobilePhone = 10;
  if (has_mobilephone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mobilephone().data(), this->mobilephone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->mobilephone(), output);
  }

  // optional uint32 MobilePhoneAuth = 11;
  if (has_mobilephoneauth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->mobilephoneauth(), output);
  }

  // optional string IDCard = 12;
  if (has_idcard()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idcard().data(), this->idcard().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->idcard(), output);
  }

  // optional uint32 IDCardAuth = 13;
  if (has_idcardauth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->idcardauth(), output);
  }

  // optional string Birthday = 14;
  if (has_birthday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->birthday().data(), this->birthday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->birthday(), output);
  }

  // optional string RegisterIP = 15;
  if (has_registerip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->registerip().data(), this->registerip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->registerip(), output);
  }

  // optional string RegisterTime = 16;
  if (has_registertime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->registertime().data(), this->registertime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->registertime(), output);
  }

  // optional string LoginIP = 17;
  if (has_loginip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->loginip().data(), this->loginip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->loginip(), output);
  }

  // optional string LoginTime = 18;
  if (has_logintime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logintime().data(), this->logintime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->logintime(), output);
  }

  // optional string LimitIP = 19;
  if (has_limitip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->limitip().data(), this->limitip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->limitip(), output);
  }

  // optional string ModifyTime = 20;
  if (has_modifytime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modifytime().data(), this->modifytime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->modifytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CAccountAuth::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 AccountID = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->accountid(), target);
  }

  // optional string AccountName = 2;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->accountname(), target);
  }

  // optional string AccountPwd = 3;
  if (has_accountpwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountpwd().data(), this->accountpwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->accountpwd(), target);
  }

  // optional uint32 AccountOrigin = 4;
  if (has_accountorigin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->accountorigin(), target);
  }

  // optional uint32 AccountState = 5;
  if (has_accountstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->accountstate(), target);
  }

  // optional uint64 Permission = 6;
  if (has_permission()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->permission(), target);
  }

  // optional string Nickname = 7;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->nickname(), target);
  }

  // optional string Email = 8;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->email(), target);
  }

  // optional uint32 EmailAuth = 9;
  if (has_emailauth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->emailauth(), target);
  }

  // optional string MobilePhone = 10;
  if (has_mobilephone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mobilephone().data(), this->mobilephone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->mobilephone(), target);
  }

  // optional uint32 MobilePhoneAuth = 11;
  if (has_mobilephoneauth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->mobilephoneauth(), target);
  }

  // optional string IDCard = 12;
  if (has_idcard()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idcard().data(), this->idcard().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->idcard(), target);
  }

  // optional uint32 IDCardAuth = 13;
  if (has_idcardauth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->idcardauth(), target);
  }

  // optional string Birthday = 14;
  if (has_birthday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->birthday().data(), this->birthday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->birthday(), target);
  }

  // optional string RegisterIP = 15;
  if (has_registerip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->registerip().data(), this->registerip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->registerip(), target);
  }

  // optional string RegisterTime = 16;
  if (has_registertime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->registertime().data(), this->registertime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->registertime(), target);
  }

  // optional string LoginIP = 17;
  if (has_loginip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->loginip().data(), this->loginip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->loginip(), target);
  }

  // optional string LoginTime = 18;
  if (has_logintime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logintime().data(), this->logintime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->logintime(), target);
  }

  // optional string LimitIP = 19;
  if (has_limitip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->limitip().data(), this->limitip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->limitip(), target);
  }

  // optional string ModifyTime = 20;
  if (has_modifytime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modifytime().data(), this->modifytime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->modifytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CAccountAuth::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 AccountID = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accountid());
    }

    // optional string AccountName = 2;
    if (has_accountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountname());
    }

    // optional string AccountPwd = 3;
    if (has_accountpwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountpwd());
    }

    // optional uint32 AccountOrigin = 4;
    if (has_accountorigin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountorigin());
    }

    // optional uint32 AccountState = 5;
    if (has_accountstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountstate());
    }

    // optional uint64 Permission = 6;
    if (has_permission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->permission());
    }

    // optional string Nickname = 7;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional string Email = 8;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 EmailAuth = 9;
    if (has_emailauth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->emailauth());
    }

    // optional string MobilePhone = 10;
    if (has_mobilephone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobilephone());
    }

    // optional uint32 MobilePhoneAuth = 11;
    if (has_mobilephoneauth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mobilephoneauth());
    }

    // optional string IDCard = 12;
    if (has_idcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->idcard());
    }

    // optional uint32 IDCardAuth = 13;
    if (has_idcardauth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idcardauth());
    }

    // optional string Birthday = 14;
    if (has_birthday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->birthday());
    }

    // optional string RegisterIP = 15;
    if (has_registerip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->registerip());
    }

    // optional string RegisterTime = 16;
    if (has_registertime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->registertime());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string LoginIP = 17;
    if (has_loginip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loginip());
    }

    // optional string LoginTime = 18;
    if (has_logintime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logintime());
    }

    // optional string LimitIP = 19;
    if (has_limitip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->limitip());
    }

    // optional string ModifyTime = 20;
    if (has_modifytime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->modifytime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAccountAuth::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CAccountAuth* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CAccountAuth*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAccountAuth::MergeFrom(const CAccountAuth& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_accountname()) {
      set_accountname(from.accountname());
    }
    if (from.has_accountpwd()) {
      set_accountpwd(from.accountpwd());
    }
    if (from.has_accountorigin()) {
      set_accountorigin(from.accountorigin());
    }
    if (from.has_accountstate()) {
      set_accountstate(from.accountstate());
    }
    if (from.has_permission()) {
      set_permission(from.permission());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_emailauth()) {
      set_emailauth(from.emailauth());
    }
    if (from.has_mobilephone()) {
      set_mobilephone(from.mobilephone());
    }
    if (from.has_mobilephoneauth()) {
      set_mobilephoneauth(from.mobilephoneauth());
    }
    if (from.has_idcard()) {
      set_idcard(from.idcard());
    }
    if (from.has_idcardauth()) {
      set_idcardauth(from.idcardauth());
    }
    if (from.has_birthday()) {
      set_birthday(from.birthday());
    }
    if (from.has_registerip()) {
      set_registerip(from.registerip());
    }
    if (from.has_registertime()) {
      set_registertime(from.registertime());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_loginip()) {
      set_loginip(from.loginip());
    }
    if (from.has_logintime()) {
      set_logintime(from.logintime());
    }
    if (from.has_limitip()) {
      set_limitip(from.limitip());
    }
    if (from.has_modifytime()) {
      set_modifytime(from.modifytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CAccountAuth::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountAuth::CopyFrom(const CAccountAuth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountAuth::IsInitialized() const {

  return true;
}

void CAccountAuth::Swap(CAccountAuth* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(accountname_, other->accountname_);
    std::swap(accountpwd_, other->accountpwd_);
    std::swap(accountorigin_, other->accountorigin_);
    std::swap(accountstate_, other->accountstate_);
    std::swap(permission_, other->permission_);
    std::swap(nickname_, other->nickname_);
    std::swap(email_, other->email_);
    std::swap(emailauth_, other->emailauth_);
    std::swap(mobilephone_, other->mobilephone_);
    std::swap(mobilephoneauth_, other->mobilephoneauth_);
    std::swap(idcard_, other->idcard_);
    std::swap(idcardauth_, other->idcardauth_);
    std::swap(birthday_, other->birthday_);
    std::swap(registerip_, other->registerip_);
    std::swap(registertime_, other->registertime_);
    std::swap(loginip_, other->loginip_);
    std::swap(logintime_, other->logintime_);
    std::swap(limitip_, other->limitip_);
    std::swap(modifytime_, other->modifytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CAccountAuth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAccountAuth_descriptor_;
  metadata.reflection = CAccountAuth_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CAccountAuth_AccountPwd::kAccountNameFieldNumber;
const int CAccountAuth_AccountPwd::kAccountPwdFieldNumber;
#endif  // !_MSC_VER

CAccountAuth_AccountPwd::CAccountAuth_AccountPwd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CAccountAuth_AccountPwd::InitAsDefaultInstance() {
}

CAccountAuth_AccountPwd::CAccountAuth_AccountPwd(const CAccountAuth_AccountPwd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CAccountAuth_AccountPwd::SharedCtor() {
  _cached_size_ = 0;
  accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accountpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAccountAuth_AccountPwd::~CAccountAuth_AccountPwd() {
  SharedDtor();
}

void CAccountAuth_AccountPwd::SharedDtor() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (accountpwd_ != &::google::protobuf::internal::kEmptyString) {
    delete accountpwd_;
  }
  if (this != default_instance_) {
  }
}

void CAccountAuth_AccountPwd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAccountAuth_AccountPwd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAccountAuth_AccountPwd_descriptor_;
}

const CAccountAuth_AccountPwd& CAccountAuth_AccountPwd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_accountAuth_2eproto();
  return *default_instance_;
}

CAccountAuth_AccountPwd* CAccountAuth_AccountPwd::default_instance_ = NULL;

CAccountAuth_AccountPwd* CAccountAuth_AccountPwd::New() const {
  return new CAccountAuth_AccountPwd;
}

void CAccountAuth_AccountPwd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_accountname()) {
      if (accountname_ != &::google::protobuf::internal::kEmptyString) {
        accountname_->clear();
      }
    }
    if (has_accountpwd()) {
      if (accountpwd_ != &::google::protobuf::internal::kEmptyString) {
        accountpwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CAccountAuth_AccountPwd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string AccountName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountname().data(), this->accountname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AccountPwd;
        break;
      }

      // optional string AccountPwd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AccountPwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountpwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountpwd().data(), this->accountpwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CAccountAuth_AccountPwd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string AccountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->accountname(), output);
  }

  // optional string AccountPwd = 2;
  if (has_accountpwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountpwd().data(), this->accountpwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->accountpwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CAccountAuth_AccountPwd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string AccountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->accountname(), target);
  }

  // optional string AccountPwd = 2;
  if (has_accountpwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountpwd().data(), this->accountpwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->accountpwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CAccountAuth_AccountPwd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string AccountName = 1;
    if (has_accountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountname());
    }

    // optional string AccountPwd = 2;
    if (has_accountpwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountpwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAccountAuth_AccountPwd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CAccountAuth_AccountPwd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CAccountAuth_AccountPwd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAccountAuth_AccountPwd::MergeFrom(const CAccountAuth_AccountPwd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountname()) {
      set_accountname(from.accountname());
    }
    if (from.has_accountpwd()) {
      set_accountpwd(from.accountpwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CAccountAuth_AccountPwd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountAuth_AccountPwd::CopyFrom(const CAccountAuth_AccountPwd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountAuth_AccountPwd::IsInitialized() const {

  return true;
}

void CAccountAuth_AccountPwd::Swap(CAccountAuth_AccountPwd* other) {
  if (other != this) {
    std::swap(accountname_, other->accountname_);
    std::swap(accountpwd_, other->accountpwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CAccountAuth_AccountPwd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAccountAuth_AccountPwd_descriptor_;
  metadata.reflection = CAccountAuth_AccountPwd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CAccountAuth_AccountState::kAccountNameFieldNumber;
const int CAccountAuth_AccountState::kAccountStateFieldNumber;
#endif  // !_MSC_VER

CAccountAuth_AccountState::CAccountAuth_AccountState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CAccountAuth_AccountState::InitAsDefaultInstance() {
}

CAccountAuth_AccountState::CAccountAuth_AccountState(const CAccountAuth_AccountState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CAccountAuth_AccountState::SharedCtor() {
  _cached_size_ = 0;
  accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accountstate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAccountAuth_AccountState::~CAccountAuth_AccountState() {
  SharedDtor();
}

void CAccountAuth_AccountState::SharedDtor() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (this != default_instance_) {
  }
}

void CAccountAuth_AccountState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAccountAuth_AccountState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAccountAuth_AccountState_descriptor_;
}

const CAccountAuth_AccountState& CAccountAuth_AccountState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_accountAuth_2eproto();
  return *default_instance_;
}

CAccountAuth_AccountState* CAccountAuth_AccountState::default_instance_ = NULL;

CAccountAuth_AccountState* CAccountAuth_AccountState::New() const {
  return new CAccountAuth_AccountState;
}

void CAccountAuth_AccountState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_accountname()) {
      if (accountname_ != &::google::protobuf::internal::kEmptyString) {
        accountname_->clear();
      }
    }
    accountstate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CAccountAuth_AccountState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string AccountName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountname().data(), this->accountname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_AccountState;
        break;
      }

      // optional uint32 AccountState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AccountState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountstate_)));
          set_has_accountstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CAccountAuth_AccountState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string AccountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->accountname(), output);
  }

  // optional uint32 AccountState = 2;
  if (has_accountstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->accountstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CAccountAuth_AccountState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string AccountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->accountname(), target);
  }

  // optional uint32 AccountState = 2;
  if (has_accountstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->accountstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CAccountAuth_AccountState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string AccountName = 1;
    if (has_accountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountname());
    }

    // optional uint32 AccountState = 2;
    if (has_accountstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountstate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAccountAuth_AccountState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CAccountAuth_AccountState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CAccountAuth_AccountState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAccountAuth_AccountState::MergeFrom(const CAccountAuth_AccountState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountname()) {
      set_accountname(from.accountname());
    }
    if (from.has_accountstate()) {
      set_accountstate(from.accountstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CAccountAuth_AccountState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountAuth_AccountState::CopyFrom(const CAccountAuth_AccountState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountAuth_AccountState::IsInitialized() const {

  return true;
}

void CAccountAuth_AccountState::Swap(CAccountAuth_AccountState* other) {
  if (other != this) {
    std::swap(accountname_, other->accountname_);
    std::swap(accountstate_, other->accountstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CAccountAuth_AccountState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAccountAuth_AccountState_descriptor_;
  metadata.reflection = CAccountAuth_AccountState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CAccountAuth_Permission::kAccountNameFieldNumber;
const int CAccountAuth_Permission::kPermissionFieldNumber;
#endif  // !_MSC_VER

CAccountAuth_Permission::CAccountAuth_Permission()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CAccountAuth_Permission::InitAsDefaultInstance() {
}

CAccountAuth_Permission::CAccountAuth_Permission(const CAccountAuth_Permission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CAccountAuth_Permission::SharedCtor() {
  _cached_size_ = 0;
  accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  permission_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAccountAuth_Permission::~CAccountAuth_Permission() {
  SharedDtor();
}

void CAccountAuth_Permission::SharedDtor() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (this != default_instance_) {
  }
}

void CAccountAuth_Permission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAccountAuth_Permission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAccountAuth_Permission_descriptor_;
}

const CAccountAuth_Permission& CAccountAuth_Permission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_accountAuth_2eproto();
  return *default_instance_;
}

CAccountAuth_Permission* CAccountAuth_Permission::default_instance_ = NULL;

CAccountAuth_Permission* CAccountAuth_Permission::New() const {
  return new CAccountAuth_Permission;
}

void CAccountAuth_Permission::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_accountname()) {
      if (accountname_ != &::google::protobuf::internal::kEmptyString) {
        accountname_->clear();
      }
    }
    permission_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CAccountAuth_Permission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string AccountName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountname().data(), this->accountname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Permission;
        break;
      }

      // optional uint64 Permission = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Permission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &permission_)));
          set_has_permission();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CAccountAuth_Permission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string AccountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->accountname(), output);
  }

  // optional uint64 Permission = 2;
  if (has_permission()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->permission(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CAccountAuth_Permission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string AccountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->accountname(), target);
  }

  // optional uint64 Permission = 2;
  if (has_permission()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->permission(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CAccountAuth_Permission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string AccountName = 1;
    if (has_accountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountname());
    }

    // optional uint64 Permission = 2;
    if (has_permission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->permission());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAccountAuth_Permission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CAccountAuth_Permission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CAccountAuth_Permission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAccountAuth_Permission::MergeFrom(const CAccountAuth_Permission& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountname()) {
      set_accountname(from.accountname());
    }
    if (from.has_permission()) {
      set_permission(from.permission());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CAccountAuth_Permission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountAuth_Permission::CopyFrom(const CAccountAuth_Permission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountAuth_Permission::IsInitialized() const {

  return true;
}

void CAccountAuth_Permission::Swap(CAccountAuth_Permission* other) {
  if (other != this) {
    std::swap(accountname_, other->accountname_);
    std::swap(permission_, other->permission_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CAccountAuth_Permission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAccountAuth_Permission_descriptor_;
  metadata.reflection = CAccountAuth_Permission_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CAccountAuth_Nickname::kAccountNameFieldNumber;
const int CAccountAuth_Nickname::kNicknameFieldNumber;
#endif  // !_MSC_VER

CAccountAuth_Nickname::CAccountAuth_Nickname()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CAccountAuth_Nickname::InitAsDefaultInstance() {
}

CAccountAuth_Nickname::CAccountAuth_Nickname(const CAccountAuth_Nickname& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CAccountAuth_Nickname::SharedCtor() {
  _cached_size_ = 0;
  accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAccountAuth_Nickname::~CAccountAuth_Nickname() {
  SharedDtor();
}

void CAccountAuth_Nickname::SharedDtor() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void CAccountAuth_Nickname::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAccountAuth_Nickname::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAccountAuth_Nickname_descriptor_;
}

const CAccountAuth_Nickname& CAccountAuth_Nickname::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_accountAuth_2eproto();
  return *default_instance_;
}

CAccountAuth_Nickname* CAccountAuth_Nickname::default_instance_ = NULL;

CAccountAuth_Nickname* CAccountAuth_Nickname::New() const {
  return new CAccountAuth_Nickname;
}

void CAccountAuth_Nickname::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_accountname()) {
      if (accountname_ != &::google::protobuf::internal::kEmptyString) {
        accountname_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CAccountAuth_Nickname::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string AccountName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountname().data(), this->accountname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Nickname;
        break;
      }

      // optional string Nickname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CAccountAuth_Nickname::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string AccountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->accountname(), output);
  }

  // optional string Nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CAccountAuth_Nickname::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string AccountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->accountname(), target);
  }

  // optional string Nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CAccountAuth_Nickname::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string AccountName = 1;
    if (has_accountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountname());
    }

    // optional string Nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAccountAuth_Nickname::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CAccountAuth_Nickname* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CAccountAuth_Nickname*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAccountAuth_Nickname::MergeFrom(const CAccountAuth_Nickname& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountname()) {
      set_accountname(from.accountname());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CAccountAuth_Nickname::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountAuth_Nickname::CopyFrom(const CAccountAuth_Nickname& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountAuth_Nickname::IsInitialized() const {

  return true;
}

void CAccountAuth_Nickname::Swap(CAccountAuth_Nickname* other) {
  if (other != this) {
    std::swap(accountname_, other->accountname_);
    std::swap(nickname_, other->nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CAccountAuth_Nickname::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAccountAuth_Nickname_descriptor_;
  metadata.reflection = CAccountAuth_Nickname_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CAccountAuth_Email::kAccountNameFieldNumber;
const int CAccountAuth_Email::kEmailFieldNumber;
#endif  // !_MSC_VER

CAccountAuth_Email::CAccountAuth_Email()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CAccountAuth_Email::InitAsDefaultInstance() {
}

CAccountAuth_Email::CAccountAuth_Email(const CAccountAuth_Email& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CAccountAuth_Email::SharedCtor() {
  _cached_size_ = 0;
  accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAccountAuth_Email::~CAccountAuth_Email() {
  SharedDtor();
}

void CAccountAuth_Email::SharedDtor() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (this != default_instance_) {
  }
}

void CAccountAuth_Email::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAccountAuth_Email::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAccountAuth_Email_descriptor_;
}

const CAccountAuth_Email& CAccountAuth_Email::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_accountAuth_2eproto();
  return *default_instance_;
}

CAccountAuth_Email* CAccountAuth_Email::default_instance_ = NULL;

CAccountAuth_Email* CAccountAuth_Email::New() const {
  return new CAccountAuth_Email;
}

void CAccountAuth_Email::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_accountname()) {
      if (accountname_ != &::google::protobuf::internal::kEmptyString) {
        accountname_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CAccountAuth_Email::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string AccountName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountname().data(), this->accountname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Email;
        break;
      }

      // optional string Email = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CAccountAuth_Email::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string AccountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->accountname(), output);
  }

  // optional string Email = 2;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->email(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CAccountAuth_Email::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string AccountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->accountname(), target);
  }

  // optional string Email = 2;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->email(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CAccountAuth_Email::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string AccountName = 1;
    if (has_accountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountname());
    }

    // optional string Email = 2;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAccountAuth_Email::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CAccountAuth_Email* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CAccountAuth_Email*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAccountAuth_Email::MergeFrom(const CAccountAuth_Email& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountname()) {
      set_accountname(from.accountname());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CAccountAuth_Email::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountAuth_Email::CopyFrom(const CAccountAuth_Email& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountAuth_Email::IsInitialized() const {

  return true;
}

void CAccountAuth_Email::Swap(CAccountAuth_Email* other) {
  if (other != this) {
    std::swap(accountname_, other->accountname_);
    std::swap(email_, other->email_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CAccountAuth_Email::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAccountAuth_Email_descriptor_;
  metadata.reflection = CAccountAuth_Email_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CAccountAuth_EmailAuth::kAccountNameFieldNumber;
const int CAccountAuth_EmailAuth::kEmailAuthFieldNumber;
#endif  // !_MSC_VER

CAccountAuth_EmailAuth::CAccountAuth_EmailAuth()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CAccountAuth_EmailAuth::InitAsDefaultInstance() {
}

CAccountAuth_EmailAuth::CAccountAuth_EmailAuth(const CAccountAuth_EmailAuth& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CAccountAuth_EmailAuth::SharedCtor() {
  _cached_size_ = 0;
  accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  emailauth_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAccountAuth_EmailAuth::~CAccountAuth_EmailAuth() {
  SharedDtor();
}

void CAccountAuth_EmailAuth::SharedDtor() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (this != default_instance_) {
  }
}

void CAccountAuth_EmailAuth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAccountAuth_EmailAuth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAccountAuth_EmailAuth_descriptor_;
}

const CAccountAuth_EmailAuth& CAccountAuth_EmailAuth::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_accountAuth_2eproto();
  return *default_instance_;
}

CAccountAuth_EmailAuth* CAccountAuth_EmailAuth::default_instance_ = NULL;

CAccountAuth_EmailAuth* CAccountAuth_EmailAuth::New() const {
  return new CAccountAuth_EmailAuth;
}

void CAccountAuth_EmailAuth::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_accountname()) {
      if (accountname_ != &::google::protobuf::internal::kEmptyString) {
        accountname_->clear();
      }
    }
    emailauth_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CAccountAuth_EmailAuth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string AccountName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountname().data(), this->accountname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_EmailAuth;
        break;
      }

      // optional uint32 EmailAuth = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EmailAuth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &emailauth_)));
          set_has_emailauth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CAccountAuth_EmailAuth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string AccountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->accountname(), output);
  }

  // optional uint32 EmailAuth = 2;
  if (has_emailauth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->emailauth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CAccountAuth_EmailAuth::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string AccountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->accountname(), target);
  }

  // optional uint32 EmailAuth = 2;
  if (has_emailauth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->emailauth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CAccountAuth_EmailAuth::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string AccountName = 1;
    if (has_accountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountname());
    }

    // optional uint32 EmailAuth = 2;
    if (has_emailauth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->emailauth());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAccountAuth_EmailAuth::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CAccountAuth_EmailAuth* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CAccountAuth_EmailAuth*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAccountAuth_EmailAuth::MergeFrom(const CAccountAuth_EmailAuth& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountname()) {
      set_accountname(from.accountname());
    }
    if (from.has_emailauth()) {
      set_emailauth(from.emailauth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CAccountAuth_EmailAuth::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountAuth_EmailAuth::CopyFrom(const CAccountAuth_EmailAuth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountAuth_EmailAuth::IsInitialized() const {

  return true;
}

void CAccountAuth_EmailAuth::Swap(CAccountAuth_EmailAuth* other) {
  if (other != this) {
    std::swap(accountname_, other->accountname_);
    std::swap(emailauth_, other->emailauth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CAccountAuth_EmailAuth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAccountAuth_EmailAuth_descriptor_;
  metadata.reflection = CAccountAuth_EmailAuth_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CAccountAuth_MobilePhone::kAccountNameFieldNumber;
const int CAccountAuth_MobilePhone::kMobilePhoneFieldNumber;
#endif  // !_MSC_VER

CAccountAuth_MobilePhone::CAccountAuth_MobilePhone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CAccountAuth_MobilePhone::InitAsDefaultInstance() {
}

CAccountAuth_MobilePhone::CAccountAuth_MobilePhone(const CAccountAuth_MobilePhone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CAccountAuth_MobilePhone::SharedCtor() {
  _cached_size_ = 0;
  accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mobilephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAccountAuth_MobilePhone::~CAccountAuth_MobilePhone() {
  SharedDtor();
}

void CAccountAuth_MobilePhone::SharedDtor() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (mobilephone_ != &::google::protobuf::internal::kEmptyString) {
    delete mobilephone_;
  }
  if (this != default_instance_) {
  }
}

void CAccountAuth_MobilePhone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAccountAuth_MobilePhone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAccountAuth_MobilePhone_descriptor_;
}

const CAccountAuth_MobilePhone& CAccountAuth_MobilePhone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_accountAuth_2eproto();
  return *default_instance_;
}

CAccountAuth_MobilePhone* CAccountAuth_MobilePhone::default_instance_ = NULL;

CAccountAuth_MobilePhone* CAccountAuth_MobilePhone::New() const {
  return new CAccountAuth_MobilePhone;
}

void CAccountAuth_MobilePhone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_accountname()) {
      if (accountname_ != &::google::protobuf::internal::kEmptyString) {
        accountname_->clear();
      }
    }
    if (has_mobilephone()) {
      if (mobilephone_ != &::google::protobuf::internal::kEmptyString) {
        mobilephone_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CAccountAuth_MobilePhone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string AccountName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountname().data(), this->accountname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_MobilePhone;
        break;
      }

      // optional string MobilePhone = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MobilePhone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobilephone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mobilephone().data(), this->mobilephone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CAccountAuth_MobilePhone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string AccountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->accountname(), output);
  }

  // optional string MobilePhone = 2;
  if (has_mobilephone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mobilephone().data(), this->mobilephone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->mobilephone(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CAccountAuth_MobilePhone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string AccountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->accountname(), target);
  }

  // optional string MobilePhone = 2;
  if (has_mobilephone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mobilephone().data(), this->mobilephone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mobilephone(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CAccountAuth_MobilePhone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string AccountName = 1;
    if (has_accountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountname());
    }

    // optional string MobilePhone = 2;
    if (has_mobilephone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobilephone());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAccountAuth_MobilePhone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CAccountAuth_MobilePhone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CAccountAuth_MobilePhone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAccountAuth_MobilePhone::MergeFrom(const CAccountAuth_MobilePhone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountname()) {
      set_accountname(from.accountname());
    }
    if (from.has_mobilephone()) {
      set_mobilephone(from.mobilephone());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CAccountAuth_MobilePhone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountAuth_MobilePhone::CopyFrom(const CAccountAuth_MobilePhone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountAuth_MobilePhone::IsInitialized() const {

  return true;
}

void CAccountAuth_MobilePhone::Swap(CAccountAuth_MobilePhone* other) {
  if (other != this) {
    std::swap(accountname_, other->accountname_);
    std::swap(mobilephone_, other->mobilephone_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CAccountAuth_MobilePhone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAccountAuth_MobilePhone_descriptor_;
  metadata.reflection = CAccountAuth_MobilePhone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CAccountAuth_MobilePhoneAuth::kAccountNameFieldNumber;
const int CAccountAuth_MobilePhoneAuth::kMobilePhoneAuthFieldNumber;
#endif  // !_MSC_VER

CAccountAuth_MobilePhoneAuth::CAccountAuth_MobilePhoneAuth()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CAccountAuth_MobilePhoneAuth::InitAsDefaultInstance() {
}

CAccountAuth_MobilePhoneAuth::CAccountAuth_MobilePhoneAuth(const CAccountAuth_MobilePhoneAuth& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CAccountAuth_MobilePhoneAuth::SharedCtor() {
  _cached_size_ = 0;
  accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mobilephoneauth_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAccountAuth_MobilePhoneAuth::~CAccountAuth_MobilePhoneAuth() {
  SharedDtor();
}

void CAccountAuth_MobilePhoneAuth::SharedDtor() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (this != default_instance_) {
  }
}

void CAccountAuth_MobilePhoneAuth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAccountAuth_MobilePhoneAuth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAccountAuth_MobilePhoneAuth_descriptor_;
}

const CAccountAuth_MobilePhoneAuth& CAccountAuth_MobilePhoneAuth::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_accountAuth_2eproto();
  return *default_instance_;
}

CAccountAuth_MobilePhoneAuth* CAccountAuth_MobilePhoneAuth::default_instance_ = NULL;

CAccountAuth_MobilePhoneAuth* CAccountAuth_MobilePhoneAuth::New() const {
  return new CAccountAuth_MobilePhoneAuth;
}

void CAccountAuth_MobilePhoneAuth::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_accountname()) {
      if (accountname_ != &::google::protobuf::internal::kEmptyString) {
        accountname_->clear();
      }
    }
    mobilephoneauth_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CAccountAuth_MobilePhoneAuth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string AccountName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountname().data(), this->accountname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MobilePhoneAuth;
        break;
      }

      // optional uint32 MobilePhoneAuth = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MobilePhoneAuth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mobilephoneauth_)));
          set_has_mobilephoneauth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CAccountAuth_MobilePhoneAuth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string AccountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->accountname(), output);
  }

  // optional uint32 MobilePhoneAuth = 2;
  if (has_mobilephoneauth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mobilephoneauth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CAccountAuth_MobilePhoneAuth::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string AccountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->accountname(), target);
  }

  // optional uint32 MobilePhoneAuth = 2;
  if (has_mobilephoneauth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mobilephoneauth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CAccountAuth_MobilePhoneAuth::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string AccountName = 1;
    if (has_accountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountname());
    }

    // optional uint32 MobilePhoneAuth = 2;
    if (has_mobilephoneauth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mobilephoneauth());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAccountAuth_MobilePhoneAuth::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CAccountAuth_MobilePhoneAuth* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CAccountAuth_MobilePhoneAuth*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAccountAuth_MobilePhoneAuth::MergeFrom(const CAccountAuth_MobilePhoneAuth& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountname()) {
      set_accountname(from.accountname());
    }
    if (from.has_mobilephoneauth()) {
      set_mobilephoneauth(from.mobilephoneauth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CAccountAuth_MobilePhoneAuth::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountAuth_MobilePhoneAuth::CopyFrom(const CAccountAuth_MobilePhoneAuth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountAuth_MobilePhoneAuth::IsInitialized() const {

  return true;
}

void CAccountAuth_MobilePhoneAuth::Swap(CAccountAuth_MobilePhoneAuth* other) {
  if (other != this) {
    std::swap(accountname_, other->accountname_);
    std::swap(mobilephoneauth_, other->mobilephoneauth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CAccountAuth_MobilePhoneAuth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAccountAuth_MobilePhoneAuth_descriptor_;
  metadata.reflection = CAccountAuth_MobilePhoneAuth_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CAccountAuth_IDCard::kAccountNameFieldNumber;
const int CAccountAuth_IDCard::kIDCardFieldNumber;
#endif  // !_MSC_VER

CAccountAuth_IDCard::CAccountAuth_IDCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CAccountAuth_IDCard::InitAsDefaultInstance() {
}

CAccountAuth_IDCard::CAccountAuth_IDCard(const CAccountAuth_IDCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CAccountAuth_IDCard::SharedCtor() {
  _cached_size_ = 0;
  accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  idcard_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAccountAuth_IDCard::~CAccountAuth_IDCard() {
  SharedDtor();
}

void CAccountAuth_IDCard::SharedDtor() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (idcard_ != &::google::protobuf::internal::kEmptyString) {
    delete idcard_;
  }
  if (this != default_instance_) {
  }
}

void CAccountAuth_IDCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAccountAuth_IDCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAccountAuth_IDCard_descriptor_;
}

const CAccountAuth_IDCard& CAccountAuth_IDCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_accountAuth_2eproto();
  return *default_instance_;
}

CAccountAuth_IDCard* CAccountAuth_IDCard::default_instance_ = NULL;

CAccountAuth_IDCard* CAccountAuth_IDCard::New() const {
  return new CAccountAuth_IDCard;
}

void CAccountAuth_IDCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_accountname()) {
      if (accountname_ != &::google::protobuf::internal::kEmptyString) {
        accountname_->clear();
      }
    }
    if (has_idcard()) {
      if (idcard_ != &::google::protobuf::internal::kEmptyString) {
        idcard_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CAccountAuth_IDCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string AccountName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountname().data(), this->accountname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_IDCard;
        break;
      }

      // optional string IDCard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IDCard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idcard()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->idcard().data(), this->idcard().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CAccountAuth_IDCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string AccountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->accountname(), output);
  }

  // optional string IDCard = 2;
  if (has_idcard()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idcard().data(), this->idcard().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->idcard(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CAccountAuth_IDCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string AccountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->accountname(), target);
  }

  // optional string IDCard = 2;
  if (has_idcard()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idcard().data(), this->idcard().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->idcard(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CAccountAuth_IDCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string AccountName = 1;
    if (has_accountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountname());
    }

    // optional string IDCard = 2;
    if (has_idcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->idcard());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAccountAuth_IDCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CAccountAuth_IDCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CAccountAuth_IDCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAccountAuth_IDCard::MergeFrom(const CAccountAuth_IDCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountname()) {
      set_accountname(from.accountname());
    }
    if (from.has_idcard()) {
      set_idcard(from.idcard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CAccountAuth_IDCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountAuth_IDCard::CopyFrom(const CAccountAuth_IDCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountAuth_IDCard::IsInitialized() const {

  return true;
}

void CAccountAuth_IDCard::Swap(CAccountAuth_IDCard* other) {
  if (other != this) {
    std::swap(accountname_, other->accountname_);
    std::swap(idcard_, other->idcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CAccountAuth_IDCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAccountAuth_IDCard_descriptor_;
  metadata.reflection = CAccountAuth_IDCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CAccountAuth_IDCardAuth::kAccountNameFieldNumber;
const int CAccountAuth_IDCardAuth::kIDCardAuthFieldNumber;
#endif  // !_MSC_VER

CAccountAuth_IDCardAuth::CAccountAuth_IDCardAuth()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CAccountAuth_IDCardAuth::InitAsDefaultInstance() {
}

CAccountAuth_IDCardAuth::CAccountAuth_IDCardAuth(const CAccountAuth_IDCardAuth& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CAccountAuth_IDCardAuth::SharedCtor() {
  _cached_size_ = 0;
  accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  idcardauth_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAccountAuth_IDCardAuth::~CAccountAuth_IDCardAuth() {
  SharedDtor();
}

void CAccountAuth_IDCardAuth::SharedDtor() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (this != default_instance_) {
  }
}

void CAccountAuth_IDCardAuth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAccountAuth_IDCardAuth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAccountAuth_IDCardAuth_descriptor_;
}

const CAccountAuth_IDCardAuth& CAccountAuth_IDCardAuth::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_accountAuth_2eproto();
  return *default_instance_;
}

CAccountAuth_IDCardAuth* CAccountAuth_IDCardAuth::default_instance_ = NULL;

CAccountAuth_IDCardAuth* CAccountAuth_IDCardAuth::New() const {
  return new CAccountAuth_IDCardAuth;
}

void CAccountAuth_IDCardAuth::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_accountname()) {
      if (accountname_ != &::google::protobuf::internal::kEmptyString) {
        accountname_->clear();
      }
    }
    idcardauth_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CAccountAuth_IDCardAuth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string AccountName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountname().data(), this->accountname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_IDCardAuth;
        break;
      }

      // optional uint32 IDCardAuth = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IDCardAuth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idcardauth_)));
          set_has_idcardauth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CAccountAuth_IDCardAuth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string AccountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->accountname(), output);
  }

  // optional uint32 IDCardAuth = 2;
  if (has_idcardauth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->idcardauth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CAccountAuth_IDCardAuth::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string AccountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->accountname(), target);
  }

  // optional uint32 IDCardAuth = 2;
  if (has_idcardauth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->idcardauth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CAccountAuth_IDCardAuth::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string AccountName = 1;
    if (has_accountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountname());
    }

    // optional uint32 IDCardAuth = 2;
    if (has_idcardauth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idcardauth());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAccountAuth_IDCardAuth::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CAccountAuth_IDCardAuth* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CAccountAuth_IDCardAuth*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAccountAuth_IDCardAuth::MergeFrom(const CAccountAuth_IDCardAuth& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountname()) {
      set_accountname(from.accountname());
    }
    if (from.has_idcardauth()) {
      set_idcardauth(from.idcardauth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CAccountAuth_IDCardAuth::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountAuth_IDCardAuth::CopyFrom(const CAccountAuth_IDCardAuth& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountAuth_IDCardAuth::IsInitialized() const {

  return true;
}

void CAccountAuth_IDCardAuth::Swap(CAccountAuth_IDCardAuth* other) {
  if (other != this) {
    std::swap(accountname_, other->accountname_);
    std::swap(idcardauth_, other->idcardauth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CAccountAuth_IDCardAuth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAccountAuth_IDCardAuth_descriptor_;
  metadata.reflection = CAccountAuth_IDCardAuth_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CAccountAuth_Birthday::kAccountNameFieldNumber;
const int CAccountAuth_Birthday::kBirthdayFieldNumber;
#endif  // !_MSC_VER

CAccountAuth_Birthday::CAccountAuth_Birthday()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CAccountAuth_Birthday::InitAsDefaultInstance() {
}

CAccountAuth_Birthday::CAccountAuth_Birthday(const CAccountAuth_Birthday& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CAccountAuth_Birthday::SharedCtor() {
  _cached_size_ = 0;
  accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  birthday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAccountAuth_Birthday::~CAccountAuth_Birthday() {
  SharedDtor();
}

void CAccountAuth_Birthday::SharedDtor() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (birthday_ != &::google::protobuf::internal::kEmptyString) {
    delete birthday_;
  }
  if (this != default_instance_) {
  }
}

void CAccountAuth_Birthday::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAccountAuth_Birthday::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAccountAuth_Birthday_descriptor_;
}

const CAccountAuth_Birthday& CAccountAuth_Birthday::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_accountAuth_2eproto();
  return *default_instance_;
}

CAccountAuth_Birthday* CAccountAuth_Birthday::default_instance_ = NULL;

CAccountAuth_Birthday* CAccountAuth_Birthday::New() const {
  return new CAccountAuth_Birthday;
}

void CAccountAuth_Birthday::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_accountname()) {
      if (accountname_ != &::google::protobuf::internal::kEmptyString) {
        accountname_->clear();
      }
    }
    if (has_birthday()) {
      if (birthday_ != &::google::protobuf::internal::kEmptyString) {
        birthday_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CAccountAuth_Birthday::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string AccountName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountname().data(), this->accountname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Birthday;
        break;
      }

      // optional string Birthday = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Birthday:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_birthday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->birthday().data(), this->birthday().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CAccountAuth_Birthday::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string AccountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->accountname(), output);
  }

  // optional string Birthday = 2;
  if (has_birthday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->birthday().data(), this->birthday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->birthday(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CAccountAuth_Birthday::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string AccountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->accountname(), target);
  }

  // optional string Birthday = 2;
  if (has_birthday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->birthday().data(), this->birthday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->birthday(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CAccountAuth_Birthday::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string AccountName = 1;
    if (has_accountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountname());
    }

    // optional string Birthday = 2;
    if (has_birthday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->birthday());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAccountAuth_Birthday::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CAccountAuth_Birthday* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CAccountAuth_Birthday*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAccountAuth_Birthday::MergeFrom(const CAccountAuth_Birthday& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountname()) {
      set_accountname(from.accountname());
    }
    if (from.has_birthday()) {
      set_birthday(from.birthday());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CAccountAuth_Birthday::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountAuth_Birthday::CopyFrom(const CAccountAuth_Birthday& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountAuth_Birthday::IsInitialized() const {

  return true;
}

void CAccountAuth_Birthday::Swap(CAccountAuth_Birthday* other) {
  if (other != this) {
    std::swap(accountname_, other->accountname_);
    std::swap(birthday_, other->birthday_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CAccountAuth_Birthday::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAccountAuth_Birthday_descriptor_;
  metadata.reflection = CAccountAuth_Birthday_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CAccountAuth_LoginIP::kAccountNameFieldNumber;
const int CAccountAuth_LoginIP::kLoginIPFieldNumber;
#endif  // !_MSC_VER

CAccountAuth_LoginIP::CAccountAuth_LoginIP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CAccountAuth_LoginIP::InitAsDefaultInstance() {
}

CAccountAuth_LoginIP::CAccountAuth_LoginIP(const CAccountAuth_LoginIP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CAccountAuth_LoginIP::SharedCtor() {
  _cached_size_ = 0;
  accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  loginip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAccountAuth_LoginIP::~CAccountAuth_LoginIP() {
  SharedDtor();
}

void CAccountAuth_LoginIP::SharedDtor() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (loginip_ != &::google::protobuf::internal::kEmptyString) {
    delete loginip_;
  }
  if (this != default_instance_) {
  }
}

void CAccountAuth_LoginIP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAccountAuth_LoginIP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAccountAuth_LoginIP_descriptor_;
}

const CAccountAuth_LoginIP& CAccountAuth_LoginIP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_accountAuth_2eproto();
  return *default_instance_;
}

CAccountAuth_LoginIP* CAccountAuth_LoginIP::default_instance_ = NULL;

CAccountAuth_LoginIP* CAccountAuth_LoginIP::New() const {
  return new CAccountAuth_LoginIP;
}

void CAccountAuth_LoginIP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_accountname()) {
      if (accountname_ != &::google::protobuf::internal::kEmptyString) {
        accountname_->clear();
      }
    }
    if (has_loginip()) {
      if (loginip_ != &::google::protobuf::internal::kEmptyString) {
        loginip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CAccountAuth_LoginIP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string AccountName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountname().data(), this->accountname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LoginIP;
        break;
      }

      // optional string LoginIP = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LoginIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loginip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->loginip().data(), this->loginip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CAccountAuth_LoginIP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string AccountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->accountname(), output);
  }

  // optional string LoginIP = 2;
  if (has_loginip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->loginip().data(), this->loginip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->loginip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CAccountAuth_LoginIP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string AccountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->accountname(), target);
  }

  // optional string LoginIP = 2;
  if (has_loginip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->loginip().data(), this->loginip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->loginip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CAccountAuth_LoginIP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string AccountName = 1;
    if (has_accountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountname());
    }

    // optional string LoginIP = 2;
    if (has_loginip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loginip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAccountAuth_LoginIP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CAccountAuth_LoginIP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CAccountAuth_LoginIP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAccountAuth_LoginIP::MergeFrom(const CAccountAuth_LoginIP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountname()) {
      set_accountname(from.accountname());
    }
    if (from.has_loginip()) {
      set_loginip(from.loginip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CAccountAuth_LoginIP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountAuth_LoginIP::CopyFrom(const CAccountAuth_LoginIP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountAuth_LoginIP::IsInitialized() const {

  return true;
}

void CAccountAuth_LoginIP::Swap(CAccountAuth_LoginIP* other) {
  if (other != this) {
    std::swap(accountname_, other->accountname_);
    std::swap(loginip_, other->loginip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CAccountAuth_LoginIP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAccountAuth_LoginIP_descriptor_;
  metadata.reflection = CAccountAuth_LoginIP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CAccountAuth_LoginTime::kAccountNameFieldNumber;
const int CAccountAuth_LoginTime::kLoginTimeFieldNumber;
#endif  // !_MSC_VER

CAccountAuth_LoginTime::CAccountAuth_LoginTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CAccountAuth_LoginTime::InitAsDefaultInstance() {
}

CAccountAuth_LoginTime::CAccountAuth_LoginTime(const CAccountAuth_LoginTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CAccountAuth_LoginTime::SharedCtor() {
  _cached_size_ = 0;
  accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  logintime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAccountAuth_LoginTime::~CAccountAuth_LoginTime() {
  SharedDtor();
}

void CAccountAuth_LoginTime::SharedDtor() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (logintime_ != &::google::protobuf::internal::kEmptyString) {
    delete logintime_;
  }
  if (this != default_instance_) {
  }
}

void CAccountAuth_LoginTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAccountAuth_LoginTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAccountAuth_LoginTime_descriptor_;
}

const CAccountAuth_LoginTime& CAccountAuth_LoginTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_accountAuth_2eproto();
  return *default_instance_;
}

CAccountAuth_LoginTime* CAccountAuth_LoginTime::default_instance_ = NULL;

CAccountAuth_LoginTime* CAccountAuth_LoginTime::New() const {
  return new CAccountAuth_LoginTime;
}

void CAccountAuth_LoginTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_accountname()) {
      if (accountname_ != &::google::protobuf::internal::kEmptyString) {
        accountname_->clear();
      }
    }
    if (has_logintime()) {
      if (logintime_ != &::google::protobuf::internal::kEmptyString) {
        logintime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CAccountAuth_LoginTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string AccountName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountname().data(), this->accountname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LoginTime;
        break;
      }

      // optional string LoginTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LoginTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logintime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->logintime().data(), this->logintime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CAccountAuth_LoginTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string AccountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->accountname(), output);
  }

  // optional string LoginTime = 2;
  if (has_logintime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logintime().data(), this->logintime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->logintime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CAccountAuth_LoginTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string AccountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->accountname(), target);
  }

  // optional string LoginTime = 2;
  if (has_logintime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logintime().data(), this->logintime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->logintime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CAccountAuth_LoginTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string AccountName = 1;
    if (has_accountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountname());
    }

    // optional string LoginTime = 2;
    if (has_logintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logintime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAccountAuth_LoginTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CAccountAuth_LoginTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CAccountAuth_LoginTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAccountAuth_LoginTime::MergeFrom(const CAccountAuth_LoginTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountname()) {
      set_accountname(from.accountname());
    }
    if (from.has_logintime()) {
      set_logintime(from.logintime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CAccountAuth_LoginTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountAuth_LoginTime::CopyFrom(const CAccountAuth_LoginTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountAuth_LoginTime::IsInitialized() const {

  return true;
}

void CAccountAuth_LoginTime::Swap(CAccountAuth_LoginTime* other) {
  if (other != this) {
    std::swap(accountname_, other->accountname_);
    std::swap(logintime_, other->logintime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CAccountAuth_LoginTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAccountAuth_LoginTime_descriptor_;
  metadata.reflection = CAccountAuth_LoginTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CAccountAuth_LimitIP::kAccountNameFieldNumber;
const int CAccountAuth_LimitIP::kLimitIPFieldNumber;
#endif  // !_MSC_VER

CAccountAuth_LimitIP::CAccountAuth_LimitIP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CAccountAuth_LimitIP::InitAsDefaultInstance() {
}

CAccountAuth_LimitIP::CAccountAuth_LimitIP(const CAccountAuth_LimitIP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CAccountAuth_LimitIP::SharedCtor() {
  _cached_size_ = 0;
  accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  limitip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAccountAuth_LimitIP::~CAccountAuth_LimitIP() {
  SharedDtor();
}

void CAccountAuth_LimitIP::SharedDtor() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (limitip_ != &::google::protobuf::internal::kEmptyString) {
    delete limitip_;
  }
  if (this != default_instance_) {
  }
}

void CAccountAuth_LimitIP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAccountAuth_LimitIP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAccountAuth_LimitIP_descriptor_;
}

const CAccountAuth_LimitIP& CAccountAuth_LimitIP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_accountAuth_2eproto();
  return *default_instance_;
}

CAccountAuth_LimitIP* CAccountAuth_LimitIP::default_instance_ = NULL;

CAccountAuth_LimitIP* CAccountAuth_LimitIP::New() const {
  return new CAccountAuth_LimitIP;
}

void CAccountAuth_LimitIP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_accountname()) {
      if (accountname_ != &::google::protobuf::internal::kEmptyString) {
        accountname_->clear();
      }
    }
    if (has_limitip()) {
      if (limitip_ != &::google::protobuf::internal::kEmptyString) {
        limitip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CAccountAuth_LimitIP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string AccountName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountname().data(), this->accountname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_LimitIP;
        break;
      }

      // optional string LimitIP = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LimitIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_limitip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->limitip().data(), this->limitip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CAccountAuth_LimitIP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string AccountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->accountname(), output);
  }

  // optional string LimitIP = 2;
  if (has_limitip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->limitip().data(), this->limitip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->limitip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CAccountAuth_LimitIP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string AccountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->accountname(), target);
  }

  // optional string LimitIP = 2;
  if (has_limitip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->limitip().data(), this->limitip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->limitip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CAccountAuth_LimitIP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string AccountName = 1;
    if (has_accountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountname());
    }

    // optional string LimitIP = 2;
    if (has_limitip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->limitip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAccountAuth_LimitIP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CAccountAuth_LimitIP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CAccountAuth_LimitIP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAccountAuth_LimitIP::MergeFrom(const CAccountAuth_LimitIP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountname()) {
      set_accountname(from.accountname());
    }
    if (from.has_limitip()) {
      set_limitip(from.limitip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CAccountAuth_LimitIP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountAuth_LimitIP::CopyFrom(const CAccountAuth_LimitIP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountAuth_LimitIP::IsInitialized() const {

  return true;
}

void CAccountAuth_LimitIP::Swap(CAccountAuth_LimitIP* other) {
  if (other != this) {
    std::swap(accountname_, other->accountname_);
    std::swap(limitip_, other->limitip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CAccountAuth_LimitIP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAccountAuth_LimitIP_descriptor_;
  metadata.reflection = CAccountAuth_LimitIP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CAccountAuthList::kObjectsFieldNumber;
#endif  // !_MSC_VER

CAccountAuthList::CAccountAuthList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CAccountAuthList::InitAsDefaultInstance() {
}

CAccountAuthList::CAccountAuthList(const CAccountAuthList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CAccountAuthList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAccountAuthList::~CAccountAuthList() {
  SharedDtor();
}

void CAccountAuthList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CAccountAuthList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAccountAuthList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAccountAuthList_descriptor_;
}

const CAccountAuthList& CAccountAuthList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_accountAuth_2eproto();
  return *default_instance_;
}

CAccountAuthList* CAccountAuthList::default_instance_ = NULL;

CAccountAuthList* CAccountAuthList::New() const {
  return new CAccountAuthList;
}

void CAccountAuthList::Clear() {
  objects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CAccountAuthList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PTBuf.CAccountAuth Objects = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Objects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objects()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Objects;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CAccountAuthList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PTBuf.CAccountAuth Objects = 1;
  for (int i = 0; i < this->objects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->objects(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CAccountAuthList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PTBuf.CAccountAuth Objects = 1;
  for (int i = 0; i < this->objects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->objects(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CAccountAuthList::ByteSize() const {
  int total_size = 0;

  // repeated .PTBuf.CAccountAuth Objects = 1;
  total_size += 1 * this->objects_size();
  for (int i = 0; i < this->objects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objects(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAccountAuthList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CAccountAuthList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CAccountAuthList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAccountAuthList::MergeFrom(const CAccountAuthList& from) {
  GOOGLE_CHECK_NE(&from, this);
  objects_.MergeFrom(from.objects_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CAccountAuthList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountAuthList::CopyFrom(const CAccountAuthList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountAuthList::IsInitialized() const {

  return true;
}

void CAccountAuthList::Swap(CAccountAuthList* other) {
  if (other != this) {
    objects_.Swap(&other->objects_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CAccountAuthList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAccountAuthList_descriptor_;
  metadata.reflection = CAccountAuthList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PTBuf

// @@protoc_insertion_point(global_scope)
