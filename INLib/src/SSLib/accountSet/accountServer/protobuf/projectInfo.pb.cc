// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: projectInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "projectInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PTBuf {

namespace {

const ::google::protobuf::Descriptor* CProjectInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProjectInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CProjectInfo_AccountID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProjectInfo_AccountID_reflection_ = NULL;
const ::google::protobuf::Descriptor* CProjectInfo_ProjectType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProjectInfo_ProjectType_reflection_ = NULL;
const ::google::protobuf::Descriptor* CProjectInfo_ProjectState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProjectInfo_ProjectState_reflection_ = NULL;
const ::google::protobuf::Descriptor* CProjectInfo_Members_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProjectInfo_Members_reflection_ = NULL;
const ::google::protobuf::Descriptor* CProjectInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CProjectInfoList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_projectInfo_2eproto() {
  protobuf_AddDesc_projectInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "projectInfo.proto");
  GOOGLE_CHECK(file != NULL);
  CProjectInfo_descriptor_ = file->message_type(0);
  static const int CProjectInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectInfo, projectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectInfo, projectname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectInfo, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectInfo, projecttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectInfo, projectstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectInfo, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectInfo, modifytime_),
  };
  CProjectInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CProjectInfo_descriptor_,
      CProjectInfo::default_instance_,
      CProjectInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CProjectInfo));
  CProjectInfo_AccountID_descriptor_ = file->message_type(1);
  static const int CProjectInfo_AccountID_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectInfo_AccountID, projectname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectInfo_AccountID, accountid_),
  };
  CProjectInfo_AccountID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CProjectInfo_AccountID_descriptor_,
      CProjectInfo_AccountID::default_instance_,
      CProjectInfo_AccountID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectInfo_AccountID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectInfo_AccountID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CProjectInfo_AccountID));
  CProjectInfo_ProjectType_descriptor_ = file->message_type(2);
  static const int CProjectInfo_ProjectType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectInfo_ProjectType, projectname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectInfo_ProjectType, projecttype_),
  };
  CProjectInfo_ProjectType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CProjectInfo_ProjectType_descriptor_,
      CProjectInfo_ProjectType::default_instance_,
      CProjectInfo_ProjectType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectInfo_ProjectType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectInfo_ProjectType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CProjectInfo_ProjectType));
  CProjectInfo_ProjectState_descriptor_ = file->message_type(3);
  static const int CProjectInfo_ProjectState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectInfo_ProjectState, projectname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectInfo_ProjectState, projectstate_),
  };
  CProjectInfo_ProjectState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CProjectInfo_ProjectState_descriptor_,
      CProjectInfo_ProjectState::default_instance_,
      CProjectInfo_ProjectState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectInfo_ProjectState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectInfo_ProjectState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CProjectInfo_ProjectState));
  CProjectInfo_Members_descriptor_ = file->message_type(4);
  static const int CProjectInfo_Members_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectInfo_Members, projectname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectInfo_Members, members_),
  };
  CProjectInfo_Members_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CProjectInfo_Members_descriptor_,
      CProjectInfo_Members::default_instance_,
      CProjectInfo_Members_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectInfo_Members, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectInfo_Members, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CProjectInfo_Members));
  CProjectInfoList_descriptor_ = file->message_type(5);
  static const int CProjectInfoList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectInfoList, objects_),
  };
  CProjectInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CProjectInfoList_descriptor_,
      CProjectInfoList::default_instance_,
      CProjectInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProjectInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CProjectInfoList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_projectInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CProjectInfo_descriptor_, &CProjectInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CProjectInfo_AccountID_descriptor_, &CProjectInfo_AccountID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CProjectInfo_ProjectType_descriptor_, &CProjectInfo_ProjectType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CProjectInfo_ProjectState_descriptor_, &CProjectInfo_ProjectState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CProjectInfo_Members_descriptor_, &CProjectInfo_Members::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CProjectInfoList_descriptor_, &CProjectInfoList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_projectInfo_2eproto() {
  delete CProjectInfo::default_instance_;
  delete CProjectInfo_reflection_;
  delete CProjectInfo_AccountID::default_instance_;
  delete CProjectInfo_AccountID_reflection_;
  delete CProjectInfo_ProjectType::default_instance_;
  delete CProjectInfo_ProjectType_reflection_;
  delete CProjectInfo_ProjectState::default_instance_;
  delete CProjectInfo_ProjectState_reflection_;
  delete CProjectInfo_Members::default_instance_;
  delete CProjectInfo_Members_reflection_;
  delete CProjectInfoList::default_instance_;
  delete CProjectInfoList_reflection_;
}

void protobuf_AddDesc_projectInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::PTBuf::protobuf_AddDesc_baseDef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021projectInfo.proto\022\005PTBuf\032\rbaseDef.prot"
    "o\"\231\001\n\014CProjectInfo\022\021\n\tProjectID\030\001 \001(\004\022\023\n"
    "\013ProjectName\030\002 \001(\t\022\021\n\tAccountID\030\003 \001(\004\022\023\n"
    "\013ProjectType\030\004 \001(\r\022\024\n\014ProjectState\030\005 \001(\r"
    "\022\017\n\007Members\030\006 \001(\t\022\022\n\nModifyTime\030\007 \001(\t\"@\n"
    "\026CProjectInfo_AccountID\022\023\n\013ProjectName\030\001"
    " \001(\t\022\021\n\tAccountID\030\002 \001(\004\"D\n\030CProjectInfo_"
    "ProjectType\022\023\n\013ProjectName\030\001 \001(\t\022\023\n\013Proj"
    "ectType\030\002 \001(\r\"F\n\031CProjectInfo_ProjectSta"
    "te\022\023\n\013ProjectName\030\001 \001(\t\022\024\n\014ProjectState\030"
    "\002 \001(\r\"<\n\024CProjectInfo_Members\022\023\n\013Project"
    "Name\030\001 \001(\t\022\017\n\007Members\030\002 \001(\t\"8\n\020CProjectI"
    "nfoList\022$\n\007Objects\030\001 \003(\0132\023.PTBuf.CProjec"
    "tInfo", 525);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "projectInfo.proto", &protobuf_RegisterTypes);
  CProjectInfo::default_instance_ = new CProjectInfo();
  CProjectInfo_AccountID::default_instance_ = new CProjectInfo_AccountID();
  CProjectInfo_ProjectType::default_instance_ = new CProjectInfo_ProjectType();
  CProjectInfo_ProjectState::default_instance_ = new CProjectInfo_ProjectState();
  CProjectInfo_Members::default_instance_ = new CProjectInfo_Members();
  CProjectInfoList::default_instance_ = new CProjectInfoList();
  CProjectInfo::default_instance_->InitAsDefaultInstance();
  CProjectInfo_AccountID::default_instance_->InitAsDefaultInstance();
  CProjectInfo_ProjectType::default_instance_->InitAsDefaultInstance();
  CProjectInfo_ProjectState::default_instance_->InitAsDefaultInstance();
  CProjectInfo_Members::default_instance_->InitAsDefaultInstance();
  CProjectInfoList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_projectInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_projectInfo_2eproto {
  StaticDescriptorInitializer_projectInfo_2eproto() {
    protobuf_AddDesc_projectInfo_2eproto();
  }
} static_descriptor_initializer_projectInfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CProjectInfo::kProjectIDFieldNumber;
const int CProjectInfo::kProjectNameFieldNumber;
const int CProjectInfo::kAccountIDFieldNumber;
const int CProjectInfo::kProjectTypeFieldNumber;
const int CProjectInfo::kProjectStateFieldNumber;
const int CProjectInfo::kMembersFieldNumber;
const int CProjectInfo::kModifyTimeFieldNumber;
#endif  // !_MSC_VER

CProjectInfo::CProjectInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CProjectInfo::InitAsDefaultInstance() {
}

CProjectInfo::CProjectInfo(const CProjectInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CProjectInfo::SharedCtor() {
  _cached_size_ = 0;
  projectid_ = GOOGLE_ULONGLONG(0);
  projectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accountid_ = GOOGLE_ULONGLONG(0);
  projecttype_ = 0u;
  projectstate_ = 0u;
  members_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  modifytime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProjectInfo::~CProjectInfo() {
  SharedDtor();
}

void CProjectInfo::SharedDtor() {
  if (projectname_ != &::google::protobuf::internal::kEmptyString) {
    delete projectname_;
  }
  if (members_ != &::google::protobuf::internal::kEmptyString) {
    delete members_;
  }
  if (modifytime_ != &::google::protobuf::internal::kEmptyString) {
    delete modifytime_;
  }
  if (this != default_instance_) {
  }
}

void CProjectInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProjectInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProjectInfo_descriptor_;
}

const CProjectInfo& CProjectInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_projectInfo_2eproto();
  return *default_instance_;
}

CProjectInfo* CProjectInfo::default_instance_ = NULL;

CProjectInfo* CProjectInfo::New() const {
  return new CProjectInfo;
}

void CProjectInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    projectid_ = GOOGLE_ULONGLONG(0);
    if (has_projectname()) {
      if (projectname_ != &::google::protobuf::internal::kEmptyString) {
        projectname_->clear();
      }
    }
    accountid_ = GOOGLE_ULONGLONG(0);
    projecttype_ = 0u;
    projectstate_ = 0u;
    if (has_members()) {
      if (members_ != &::google::protobuf::internal::kEmptyString) {
        members_->clear();
      }
    }
    if (has_modifytime()) {
      if (modifytime_ != &::google::protobuf::internal::kEmptyString) {
        modifytime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CProjectInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ProjectID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &projectid_)));
          set_has_projectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ProjectName;
        break;
      }

      // optional string ProjectName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ProjectName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_projectname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->projectname().data(), this->projectname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_AccountID;
        break;
      }

      // optional uint64 AccountID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AccountID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ProjectType;
        break;
      }

      // optional uint32 ProjectType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ProjectType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &projecttype_)));
          set_has_projecttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ProjectState;
        break;
      }

      // optional uint32 ProjectState = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ProjectState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &projectstate_)));
          set_has_projectstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_Members;
        break;
      }

      // optional string Members = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_members()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->members().data(), this->members().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ModifyTime;
        break;
      }

      // optional string ModifyTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ModifyTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modifytime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->modifytime().data(), this->modifytime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CProjectInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 ProjectID = 1;
  if (has_projectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->projectid(), output);
  }

  // optional string ProjectName = 2;
  if (has_projectname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->projectname().data(), this->projectname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->projectname(), output);
  }

  // optional uint64 AccountID = 3;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->accountid(), output);
  }

  // optional uint32 ProjectType = 4;
  if (has_projecttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->projecttype(), output);
  }

  // optional uint32 ProjectState = 5;
  if (has_projectstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->projectstate(), output);
  }

  // optional string Members = 6;
  if (has_members()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->members().data(), this->members().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->members(), output);
  }

  // optional string ModifyTime = 7;
  if (has_modifytime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modifytime().data(), this->modifytime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->modifytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CProjectInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 ProjectID = 1;
  if (has_projectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->projectid(), target);
  }

  // optional string ProjectName = 2;
  if (has_projectname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->projectname().data(), this->projectname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->projectname(), target);
  }

  // optional uint64 AccountID = 3;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->accountid(), target);
  }

  // optional uint32 ProjectType = 4;
  if (has_projecttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->projecttype(), target);
  }

  // optional uint32 ProjectState = 5;
  if (has_projectstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->projectstate(), target);
  }

  // optional string Members = 6;
  if (has_members()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->members().data(), this->members().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->members(), target);
  }

  // optional string ModifyTime = 7;
  if (has_modifytime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modifytime().data(), this->modifytime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->modifytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CProjectInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ProjectID = 1;
    if (has_projectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->projectid());
    }

    // optional string ProjectName = 2;
    if (has_projectname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->projectname());
    }

    // optional uint64 AccountID = 3;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accountid());
    }

    // optional uint32 ProjectType = 4;
    if (has_projecttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->projecttype());
    }

    // optional uint32 ProjectState = 5;
    if (has_projectstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->projectstate());
    }

    // optional string Members = 6;
    if (has_members()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->members());
    }

    // optional string ModifyTime = 7;
    if (has_modifytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->modifytime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProjectInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CProjectInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CProjectInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProjectInfo::MergeFrom(const CProjectInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_projectid()) {
      set_projectid(from.projectid());
    }
    if (from.has_projectname()) {
      set_projectname(from.projectname());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_projecttype()) {
      set_projecttype(from.projecttype());
    }
    if (from.has_projectstate()) {
      set_projectstate(from.projectstate());
    }
    if (from.has_members()) {
      set_members(from.members());
    }
    if (from.has_modifytime()) {
      set_modifytime(from.modifytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CProjectInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProjectInfo::CopyFrom(const CProjectInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProjectInfo::IsInitialized() const {

  return true;
}

void CProjectInfo::Swap(CProjectInfo* other) {
  if (other != this) {
    std::swap(projectid_, other->projectid_);
    std::swap(projectname_, other->projectname_);
    std::swap(accountid_, other->accountid_);
    std::swap(projecttype_, other->projecttype_);
    std::swap(projectstate_, other->projectstate_);
    std::swap(members_, other->members_);
    std::swap(modifytime_, other->modifytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CProjectInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProjectInfo_descriptor_;
  metadata.reflection = CProjectInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CProjectInfo_AccountID::kProjectNameFieldNumber;
const int CProjectInfo_AccountID::kAccountIDFieldNumber;
#endif  // !_MSC_VER

CProjectInfo_AccountID::CProjectInfo_AccountID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CProjectInfo_AccountID::InitAsDefaultInstance() {
}

CProjectInfo_AccountID::CProjectInfo_AccountID(const CProjectInfo_AccountID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CProjectInfo_AccountID::SharedCtor() {
  _cached_size_ = 0;
  projectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accountid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProjectInfo_AccountID::~CProjectInfo_AccountID() {
  SharedDtor();
}

void CProjectInfo_AccountID::SharedDtor() {
  if (projectname_ != &::google::protobuf::internal::kEmptyString) {
    delete projectname_;
  }
  if (this != default_instance_) {
  }
}

void CProjectInfo_AccountID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProjectInfo_AccountID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProjectInfo_AccountID_descriptor_;
}

const CProjectInfo_AccountID& CProjectInfo_AccountID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_projectInfo_2eproto();
  return *default_instance_;
}

CProjectInfo_AccountID* CProjectInfo_AccountID::default_instance_ = NULL;

CProjectInfo_AccountID* CProjectInfo_AccountID::New() const {
  return new CProjectInfo_AccountID;
}

void CProjectInfo_AccountID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_projectname()) {
      if (projectname_ != &::google::protobuf::internal::kEmptyString) {
        projectname_->clear();
      }
    }
    accountid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CProjectInfo_AccountID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ProjectName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_projectname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->projectname().data(), this->projectname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_AccountID;
        break;
      }

      // optional uint64 AccountID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AccountID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CProjectInfo_AccountID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string ProjectName = 1;
  if (has_projectname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->projectname().data(), this->projectname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->projectname(), output);
  }

  // optional uint64 AccountID = 2;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->accountid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CProjectInfo_AccountID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string ProjectName = 1;
  if (has_projectname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->projectname().data(), this->projectname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->projectname(), target);
  }

  // optional uint64 AccountID = 2;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->accountid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CProjectInfo_AccountID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ProjectName = 1;
    if (has_projectname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->projectname());
    }

    // optional uint64 AccountID = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accountid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProjectInfo_AccountID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CProjectInfo_AccountID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CProjectInfo_AccountID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProjectInfo_AccountID::MergeFrom(const CProjectInfo_AccountID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_projectname()) {
      set_projectname(from.projectname());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CProjectInfo_AccountID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProjectInfo_AccountID::CopyFrom(const CProjectInfo_AccountID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProjectInfo_AccountID::IsInitialized() const {

  return true;
}

void CProjectInfo_AccountID::Swap(CProjectInfo_AccountID* other) {
  if (other != this) {
    std::swap(projectname_, other->projectname_);
    std::swap(accountid_, other->accountid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CProjectInfo_AccountID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProjectInfo_AccountID_descriptor_;
  metadata.reflection = CProjectInfo_AccountID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CProjectInfo_ProjectType::kProjectNameFieldNumber;
const int CProjectInfo_ProjectType::kProjectTypeFieldNumber;
#endif  // !_MSC_VER

CProjectInfo_ProjectType::CProjectInfo_ProjectType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CProjectInfo_ProjectType::InitAsDefaultInstance() {
}

CProjectInfo_ProjectType::CProjectInfo_ProjectType(const CProjectInfo_ProjectType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CProjectInfo_ProjectType::SharedCtor() {
  _cached_size_ = 0;
  projectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  projecttype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProjectInfo_ProjectType::~CProjectInfo_ProjectType() {
  SharedDtor();
}

void CProjectInfo_ProjectType::SharedDtor() {
  if (projectname_ != &::google::protobuf::internal::kEmptyString) {
    delete projectname_;
  }
  if (this != default_instance_) {
  }
}

void CProjectInfo_ProjectType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProjectInfo_ProjectType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProjectInfo_ProjectType_descriptor_;
}

const CProjectInfo_ProjectType& CProjectInfo_ProjectType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_projectInfo_2eproto();
  return *default_instance_;
}

CProjectInfo_ProjectType* CProjectInfo_ProjectType::default_instance_ = NULL;

CProjectInfo_ProjectType* CProjectInfo_ProjectType::New() const {
  return new CProjectInfo_ProjectType;
}

void CProjectInfo_ProjectType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_projectname()) {
      if (projectname_ != &::google::protobuf::internal::kEmptyString) {
        projectname_->clear();
      }
    }
    projecttype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CProjectInfo_ProjectType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ProjectName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_projectname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->projectname().data(), this->projectname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ProjectType;
        break;
      }

      // optional uint32 ProjectType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ProjectType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &projecttype_)));
          set_has_projecttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CProjectInfo_ProjectType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string ProjectName = 1;
  if (has_projectname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->projectname().data(), this->projectname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->projectname(), output);
  }

  // optional uint32 ProjectType = 2;
  if (has_projecttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->projecttype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CProjectInfo_ProjectType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string ProjectName = 1;
  if (has_projectname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->projectname().data(), this->projectname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->projectname(), target);
  }

  // optional uint32 ProjectType = 2;
  if (has_projecttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->projecttype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CProjectInfo_ProjectType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ProjectName = 1;
    if (has_projectname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->projectname());
    }

    // optional uint32 ProjectType = 2;
    if (has_projecttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->projecttype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProjectInfo_ProjectType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CProjectInfo_ProjectType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CProjectInfo_ProjectType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProjectInfo_ProjectType::MergeFrom(const CProjectInfo_ProjectType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_projectname()) {
      set_projectname(from.projectname());
    }
    if (from.has_projecttype()) {
      set_projecttype(from.projecttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CProjectInfo_ProjectType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProjectInfo_ProjectType::CopyFrom(const CProjectInfo_ProjectType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProjectInfo_ProjectType::IsInitialized() const {

  return true;
}

void CProjectInfo_ProjectType::Swap(CProjectInfo_ProjectType* other) {
  if (other != this) {
    std::swap(projectname_, other->projectname_);
    std::swap(projecttype_, other->projecttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CProjectInfo_ProjectType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProjectInfo_ProjectType_descriptor_;
  metadata.reflection = CProjectInfo_ProjectType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CProjectInfo_ProjectState::kProjectNameFieldNumber;
const int CProjectInfo_ProjectState::kProjectStateFieldNumber;
#endif  // !_MSC_VER

CProjectInfo_ProjectState::CProjectInfo_ProjectState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CProjectInfo_ProjectState::InitAsDefaultInstance() {
}

CProjectInfo_ProjectState::CProjectInfo_ProjectState(const CProjectInfo_ProjectState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CProjectInfo_ProjectState::SharedCtor() {
  _cached_size_ = 0;
  projectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  projectstate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProjectInfo_ProjectState::~CProjectInfo_ProjectState() {
  SharedDtor();
}

void CProjectInfo_ProjectState::SharedDtor() {
  if (projectname_ != &::google::protobuf::internal::kEmptyString) {
    delete projectname_;
  }
  if (this != default_instance_) {
  }
}

void CProjectInfo_ProjectState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProjectInfo_ProjectState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProjectInfo_ProjectState_descriptor_;
}

const CProjectInfo_ProjectState& CProjectInfo_ProjectState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_projectInfo_2eproto();
  return *default_instance_;
}

CProjectInfo_ProjectState* CProjectInfo_ProjectState::default_instance_ = NULL;

CProjectInfo_ProjectState* CProjectInfo_ProjectState::New() const {
  return new CProjectInfo_ProjectState;
}

void CProjectInfo_ProjectState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_projectname()) {
      if (projectname_ != &::google::protobuf::internal::kEmptyString) {
        projectname_->clear();
      }
    }
    projectstate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CProjectInfo_ProjectState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ProjectName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_projectname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->projectname().data(), this->projectname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ProjectState;
        break;
      }

      // optional uint32 ProjectState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ProjectState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &projectstate_)));
          set_has_projectstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CProjectInfo_ProjectState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string ProjectName = 1;
  if (has_projectname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->projectname().data(), this->projectname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->projectname(), output);
  }

  // optional uint32 ProjectState = 2;
  if (has_projectstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->projectstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CProjectInfo_ProjectState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string ProjectName = 1;
  if (has_projectname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->projectname().data(), this->projectname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->projectname(), target);
  }

  // optional uint32 ProjectState = 2;
  if (has_projectstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->projectstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CProjectInfo_ProjectState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ProjectName = 1;
    if (has_projectname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->projectname());
    }

    // optional uint32 ProjectState = 2;
    if (has_projectstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->projectstate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProjectInfo_ProjectState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CProjectInfo_ProjectState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CProjectInfo_ProjectState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProjectInfo_ProjectState::MergeFrom(const CProjectInfo_ProjectState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_projectname()) {
      set_projectname(from.projectname());
    }
    if (from.has_projectstate()) {
      set_projectstate(from.projectstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CProjectInfo_ProjectState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProjectInfo_ProjectState::CopyFrom(const CProjectInfo_ProjectState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProjectInfo_ProjectState::IsInitialized() const {

  return true;
}

void CProjectInfo_ProjectState::Swap(CProjectInfo_ProjectState* other) {
  if (other != this) {
    std::swap(projectname_, other->projectname_);
    std::swap(projectstate_, other->projectstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CProjectInfo_ProjectState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProjectInfo_ProjectState_descriptor_;
  metadata.reflection = CProjectInfo_ProjectState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CProjectInfo_Members::kProjectNameFieldNumber;
const int CProjectInfo_Members::kMembersFieldNumber;
#endif  // !_MSC_VER

CProjectInfo_Members::CProjectInfo_Members()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CProjectInfo_Members::InitAsDefaultInstance() {
}

CProjectInfo_Members::CProjectInfo_Members(const CProjectInfo_Members& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CProjectInfo_Members::SharedCtor() {
  _cached_size_ = 0;
  projectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  members_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProjectInfo_Members::~CProjectInfo_Members() {
  SharedDtor();
}

void CProjectInfo_Members::SharedDtor() {
  if (projectname_ != &::google::protobuf::internal::kEmptyString) {
    delete projectname_;
  }
  if (members_ != &::google::protobuf::internal::kEmptyString) {
    delete members_;
  }
  if (this != default_instance_) {
  }
}

void CProjectInfo_Members::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProjectInfo_Members::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProjectInfo_Members_descriptor_;
}

const CProjectInfo_Members& CProjectInfo_Members::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_projectInfo_2eproto();
  return *default_instance_;
}

CProjectInfo_Members* CProjectInfo_Members::default_instance_ = NULL;

CProjectInfo_Members* CProjectInfo_Members::New() const {
  return new CProjectInfo_Members;
}

void CProjectInfo_Members::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_projectname()) {
      if (projectname_ != &::google::protobuf::internal::kEmptyString) {
        projectname_->clear();
      }
    }
    if (has_members()) {
      if (members_ != &::google::protobuf::internal::kEmptyString) {
        members_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CProjectInfo_Members::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ProjectName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_projectname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->projectname().data(), this->projectname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Members;
        break;
      }

      // optional string Members = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_members()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->members().data(), this->members().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CProjectInfo_Members::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string ProjectName = 1;
  if (has_projectname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->projectname().data(), this->projectname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->projectname(), output);
  }

  // optional string Members = 2;
  if (has_members()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->members().data(), this->members().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->members(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CProjectInfo_Members::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string ProjectName = 1;
  if (has_projectname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->projectname().data(), this->projectname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->projectname(), target);
  }

  // optional string Members = 2;
  if (has_members()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->members().data(), this->members().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->members(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CProjectInfo_Members::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ProjectName = 1;
    if (has_projectname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->projectname());
    }

    // optional string Members = 2;
    if (has_members()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->members());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProjectInfo_Members::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CProjectInfo_Members* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CProjectInfo_Members*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProjectInfo_Members::MergeFrom(const CProjectInfo_Members& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_projectname()) {
      set_projectname(from.projectname());
    }
    if (from.has_members()) {
      set_members(from.members());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CProjectInfo_Members::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProjectInfo_Members::CopyFrom(const CProjectInfo_Members& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProjectInfo_Members::IsInitialized() const {

  return true;
}

void CProjectInfo_Members::Swap(CProjectInfo_Members* other) {
  if (other != this) {
    std::swap(projectname_, other->projectname_);
    std::swap(members_, other->members_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CProjectInfo_Members::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProjectInfo_Members_descriptor_;
  metadata.reflection = CProjectInfo_Members_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CProjectInfoList::kObjectsFieldNumber;
#endif  // !_MSC_VER

CProjectInfoList::CProjectInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CProjectInfoList::InitAsDefaultInstance() {
}

CProjectInfoList::CProjectInfoList(const CProjectInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CProjectInfoList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CProjectInfoList::~CProjectInfoList() {
  SharedDtor();
}

void CProjectInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CProjectInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProjectInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CProjectInfoList_descriptor_;
}

const CProjectInfoList& CProjectInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_projectInfo_2eproto();
  return *default_instance_;
}

CProjectInfoList* CProjectInfoList::default_instance_ = NULL;

CProjectInfoList* CProjectInfoList::New() const {
  return new CProjectInfoList;
}

void CProjectInfoList::Clear() {
  objects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CProjectInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PTBuf.CProjectInfo Objects = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Objects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objects()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Objects;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CProjectInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PTBuf.CProjectInfo Objects = 1;
  for (int i = 0; i < this->objects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->objects(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CProjectInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PTBuf.CProjectInfo Objects = 1;
  for (int i = 0; i < this->objects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->objects(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CProjectInfoList::ByteSize() const {
  int total_size = 0;

  // repeated .PTBuf.CProjectInfo Objects = 1;
  total_size += 1 * this->objects_size();
  for (int i = 0; i < this->objects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objects(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProjectInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CProjectInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CProjectInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CProjectInfoList::MergeFrom(const CProjectInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  objects_.MergeFrom(from.objects_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CProjectInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProjectInfoList::CopyFrom(const CProjectInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProjectInfoList::IsInitialized() const {

  return true;
}

void CProjectInfoList::Swap(CProjectInfoList* other) {
  if (other != this) {
    objects_.Swap(&other->objects_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CProjectInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CProjectInfoList_descriptor_;
  metadata.reflection = CProjectInfoList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PTBuf

// @@protoc_insertion_point(global_scope)
