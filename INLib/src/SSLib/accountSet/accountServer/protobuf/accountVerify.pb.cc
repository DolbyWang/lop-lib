// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: accountVerify.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "accountVerify.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PTBuf {

namespace {

const ::google::protobuf::Descriptor* CAccountVerify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAccountVerify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAccountVerify_PlatformName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAccountVerify_PlatformName_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAccountVerify_ChannelName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAccountVerify_ChannelName_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAccountVerify_AccountPwd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAccountVerify_AccountPwd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAccountVerify_AccountKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAccountVerify_AccountKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAccountVerify_IsAdult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAccountVerify_IsAdult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAccountVerify_DeviceID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAccountVerify_DeviceID_reflection_ = NULL;
const ::google::protobuf::Descriptor* CAccountVerifyList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CAccountVerifyList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_accountVerify_2eproto() {
  protobuf_AddDesc_accountVerify_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "accountVerify.proto");
  GOOGLE_CHECK(file != NULL);
  CAccountVerify_descriptor_ = file->message_type(0);
  static const int CAccountVerify_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountVerify, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountVerify, platformname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountVerify, channelname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountVerify, accountname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountVerify, accountpwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountVerify, accountkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountVerify, isadult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountVerify, deviceid_),
  };
  CAccountVerify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CAccountVerify_descriptor_,
      CAccountVerify::default_instance_,
      CAccountVerify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountVerify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountVerify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CAccountVerify));
  CAccountVerify_PlatformName_descriptor_ = file->message_type(1);
  static const int CAccountVerify_PlatformName_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountVerify_PlatformName, accountname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountVerify_PlatformName, platformname_),
  };
  CAccountVerify_PlatformName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CAccountVerify_PlatformName_descriptor_,
      CAccountVerify_PlatformName::default_instance_,
      CAccountVerify_PlatformName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountVerify_PlatformName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountVerify_PlatformName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CAccountVerify_PlatformName));
  CAccountVerify_ChannelName_descriptor_ = file->message_type(2);
  static const int CAccountVerify_ChannelName_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountVerify_ChannelName, accountname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountVerify_ChannelName, channelname_),
  };
  CAccountVerify_ChannelName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CAccountVerify_ChannelName_descriptor_,
      CAccountVerify_ChannelName::default_instance_,
      CAccountVerify_ChannelName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountVerify_ChannelName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountVerify_ChannelName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CAccountVerify_ChannelName));
  CAccountVerify_AccountPwd_descriptor_ = file->message_type(3);
  static const int CAccountVerify_AccountPwd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountVerify_AccountPwd, accountname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountVerify_AccountPwd, accountpwd_),
  };
  CAccountVerify_AccountPwd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CAccountVerify_AccountPwd_descriptor_,
      CAccountVerify_AccountPwd::default_instance_,
      CAccountVerify_AccountPwd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountVerify_AccountPwd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountVerify_AccountPwd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CAccountVerify_AccountPwd));
  CAccountVerify_AccountKey_descriptor_ = file->message_type(4);
  static const int CAccountVerify_AccountKey_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountVerify_AccountKey, accountname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountVerify_AccountKey, accountkey_),
  };
  CAccountVerify_AccountKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CAccountVerify_AccountKey_descriptor_,
      CAccountVerify_AccountKey::default_instance_,
      CAccountVerify_AccountKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountVerify_AccountKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountVerify_AccountKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CAccountVerify_AccountKey));
  CAccountVerify_IsAdult_descriptor_ = file->message_type(5);
  static const int CAccountVerify_IsAdult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountVerify_IsAdult, accountname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountVerify_IsAdult, isadult_),
  };
  CAccountVerify_IsAdult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CAccountVerify_IsAdult_descriptor_,
      CAccountVerify_IsAdult::default_instance_,
      CAccountVerify_IsAdult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountVerify_IsAdult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountVerify_IsAdult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CAccountVerify_IsAdult));
  CAccountVerify_DeviceID_descriptor_ = file->message_type(6);
  static const int CAccountVerify_DeviceID_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountVerify_DeviceID, accountname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountVerify_DeviceID, deviceid_),
  };
  CAccountVerify_DeviceID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CAccountVerify_DeviceID_descriptor_,
      CAccountVerify_DeviceID::default_instance_,
      CAccountVerify_DeviceID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountVerify_DeviceID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountVerify_DeviceID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CAccountVerify_DeviceID));
  CAccountVerifyList_descriptor_ = file->message_type(7);
  static const int CAccountVerifyList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountVerifyList, objects_),
  };
  CAccountVerifyList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CAccountVerifyList_descriptor_,
      CAccountVerifyList::default_instance_,
      CAccountVerifyList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountVerifyList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAccountVerifyList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CAccountVerifyList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_accountVerify_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CAccountVerify_descriptor_, &CAccountVerify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CAccountVerify_PlatformName_descriptor_, &CAccountVerify_PlatformName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CAccountVerify_ChannelName_descriptor_, &CAccountVerify_ChannelName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CAccountVerify_AccountPwd_descriptor_, &CAccountVerify_AccountPwd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CAccountVerify_AccountKey_descriptor_, &CAccountVerify_AccountKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CAccountVerify_IsAdult_descriptor_, &CAccountVerify_IsAdult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CAccountVerify_DeviceID_descriptor_, &CAccountVerify_DeviceID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CAccountVerifyList_descriptor_, &CAccountVerifyList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_accountVerify_2eproto() {
  delete CAccountVerify::default_instance_;
  delete CAccountVerify_reflection_;
  delete CAccountVerify_PlatformName::default_instance_;
  delete CAccountVerify_PlatformName_reflection_;
  delete CAccountVerify_ChannelName::default_instance_;
  delete CAccountVerify_ChannelName_reflection_;
  delete CAccountVerify_AccountPwd::default_instance_;
  delete CAccountVerify_AccountPwd_reflection_;
  delete CAccountVerify_AccountKey::default_instance_;
  delete CAccountVerify_AccountKey_reflection_;
  delete CAccountVerify_IsAdult::default_instance_;
  delete CAccountVerify_IsAdult_reflection_;
  delete CAccountVerify_DeviceID::default_instance_;
  delete CAccountVerify_DeviceID_reflection_;
  delete CAccountVerifyList::default_instance_;
  delete CAccountVerifyList_reflection_;
}

void protobuf_AddDesc_accountVerify_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::PTBuf::protobuf_AddDesc_baseDef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023accountVerify.proto\022\005PTBuf\032\rbaseDef.pr"
    "oto\"\256\001\n\016CAccountVerify\022\021\n\tAccountID\030\001 \001("
    "\004\022\024\n\014PlatformName\030\002 \001(\t\022\023\n\013ChannelName\030\003"
    " \001(\t\022\023\n\013AccountName\030\004 \001(\t\022\022\n\nAccountPwd\030"
    "\005 \001(\t\022\022\n\nAccountKey\030\006 \001(\t\022\017\n\007IsAdult\030\007 \001"
    "(\021\022\020\n\010DeviceID\030\010 \001(\t\"H\n\033CAccountVerify_P"
    "latformName\022\023\n\013AccountName\030\001 \001(\t\022\024\n\014Plat"
    "formName\030\002 \001(\t\"F\n\032CAccountVerify_Channel"
    "Name\022\023\n\013AccountName\030\001 \001(\t\022\023\n\013ChannelName"
    "\030\002 \001(\t\"D\n\031CAccountVerify_AccountPwd\022\023\n\013A"
    "ccountName\030\001 \001(\t\022\022\n\nAccountPwd\030\002 \001(\t\"D\n\031"
    "CAccountVerify_AccountKey\022\023\n\013AccountName"
    "\030\001 \001(\t\022\022\n\nAccountKey\030\002 \001(\t\">\n\026CAccountVe"
    "rify_IsAdult\022\023\n\013AccountName\030\001 \001(\t\022\017\n\007IsA"
    "dult\030\002 \001(\021\"@\n\027CAccountVerify_DeviceID\022\023\n"
    "\013AccountName\030\001 \001(\t\022\020\n\010DeviceID\030\002 \001(\t\"<\n\022"
    "CAccountVerifyList\022&\n\007Objects\030\001 \003(\0132\025.PT"
    "Buf.CAccountVerify", 698);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "accountVerify.proto", &protobuf_RegisterTypes);
  CAccountVerify::default_instance_ = new CAccountVerify();
  CAccountVerify_PlatformName::default_instance_ = new CAccountVerify_PlatformName();
  CAccountVerify_ChannelName::default_instance_ = new CAccountVerify_ChannelName();
  CAccountVerify_AccountPwd::default_instance_ = new CAccountVerify_AccountPwd();
  CAccountVerify_AccountKey::default_instance_ = new CAccountVerify_AccountKey();
  CAccountVerify_IsAdult::default_instance_ = new CAccountVerify_IsAdult();
  CAccountVerify_DeviceID::default_instance_ = new CAccountVerify_DeviceID();
  CAccountVerifyList::default_instance_ = new CAccountVerifyList();
  CAccountVerify::default_instance_->InitAsDefaultInstance();
  CAccountVerify_PlatformName::default_instance_->InitAsDefaultInstance();
  CAccountVerify_ChannelName::default_instance_->InitAsDefaultInstance();
  CAccountVerify_AccountPwd::default_instance_->InitAsDefaultInstance();
  CAccountVerify_AccountKey::default_instance_->InitAsDefaultInstance();
  CAccountVerify_IsAdult::default_instance_->InitAsDefaultInstance();
  CAccountVerify_DeviceID::default_instance_->InitAsDefaultInstance();
  CAccountVerifyList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_accountVerify_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_accountVerify_2eproto {
  StaticDescriptorInitializer_accountVerify_2eproto() {
    protobuf_AddDesc_accountVerify_2eproto();
  }
} static_descriptor_initializer_accountVerify_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CAccountVerify::kAccountIDFieldNumber;
const int CAccountVerify::kPlatformNameFieldNumber;
const int CAccountVerify::kChannelNameFieldNumber;
const int CAccountVerify::kAccountNameFieldNumber;
const int CAccountVerify::kAccountPwdFieldNumber;
const int CAccountVerify::kAccountKeyFieldNumber;
const int CAccountVerify::kIsAdultFieldNumber;
const int CAccountVerify::kDeviceIDFieldNumber;
#endif  // !_MSC_VER

CAccountVerify::CAccountVerify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CAccountVerify::InitAsDefaultInstance() {
}

CAccountVerify::CAccountVerify(const CAccountVerify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CAccountVerify::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = GOOGLE_ULONGLONG(0);
  platformname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accountpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accountkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isadult_ = 0;
  deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAccountVerify::~CAccountVerify() {
  SharedDtor();
}

void CAccountVerify::SharedDtor() {
  if (platformname_ != &::google::protobuf::internal::kEmptyString) {
    delete platformname_;
  }
  if (channelname_ != &::google::protobuf::internal::kEmptyString) {
    delete channelname_;
  }
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (accountpwd_ != &::google::protobuf::internal::kEmptyString) {
    delete accountpwd_;
  }
  if (accountkey_ != &::google::protobuf::internal::kEmptyString) {
    delete accountkey_;
  }
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (this != default_instance_) {
  }
}

void CAccountVerify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAccountVerify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAccountVerify_descriptor_;
}

const CAccountVerify& CAccountVerify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_accountVerify_2eproto();
  return *default_instance_;
}

CAccountVerify* CAccountVerify::default_instance_ = NULL;

CAccountVerify* CAccountVerify::New() const {
  return new CAccountVerify;
}

void CAccountVerify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = GOOGLE_ULONGLONG(0);
    if (has_platformname()) {
      if (platformname_ != &::google::protobuf::internal::kEmptyString) {
        platformname_->clear();
      }
    }
    if (has_channelname()) {
      if (channelname_ != &::google::protobuf::internal::kEmptyString) {
        channelname_->clear();
      }
    }
    if (has_accountname()) {
      if (accountname_ != &::google::protobuf::internal::kEmptyString) {
        accountname_->clear();
      }
    }
    if (has_accountpwd()) {
      if (accountpwd_ != &::google::protobuf::internal::kEmptyString) {
        accountpwd_->clear();
      }
    }
    if (has_accountkey()) {
      if (accountkey_ != &::google::protobuf::internal::kEmptyString) {
        accountkey_->clear();
      }
    }
    isadult_ = 0;
    if (has_deviceid()) {
      if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
        deviceid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CAccountVerify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 AccountID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_PlatformName;
        break;
      }

      // optional string PlatformName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlatformName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platformname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platformname().data(), this->platformname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ChannelName;
        break;
      }

      // optional string ChannelName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ChannelName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channelname().data(), this->channelname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_AccountName;
        break;
      }

      // optional string AccountName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AccountName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountname().data(), this->accountname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_AccountPwd;
        break;
      }

      // optional string AccountPwd = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AccountPwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountpwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountpwd().data(), this->accountpwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_AccountKey;
        break;
      }

      // optional string AccountKey = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AccountKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountkey().data(), this->accountkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_IsAdult;
        break;
      }

      // optional sint32 IsAdult = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsAdult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &isadult_)));
          set_has_isadult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_DeviceID;
        break;
      }

      // optional string DeviceID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DeviceID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CAccountVerify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 AccountID = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->accountid(), output);
  }

  // optional string PlatformName = 2;
  if (has_platformname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platformname().data(), this->platformname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->platformname(), output);
  }

  // optional string ChannelName = 3;
  if (has_channelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelname().data(), this->channelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->channelname(), output);
  }

  // optional string AccountName = 4;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->accountname(), output);
  }

  // optional string AccountPwd = 5;
  if (has_accountpwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountpwd().data(), this->accountpwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->accountpwd(), output);
  }

  // optional string AccountKey = 6;
  if (has_accountkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountkey().data(), this->accountkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->accountkey(), output);
  }

  // optional sint32 IsAdult = 7;
  if (has_isadult()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->isadult(), output);
  }

  // optional string DeviceID = 8;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->deviceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CAccountVerify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 AccountID = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->accountid(), target);
  }

  // optional string PlatformName = 2;
  if (has_platformname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platformname().data(), this->platformname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->platformname(), target);
  }

  // optional string ChannelName = 3;
  if (has_channelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelname().data(), this->channelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->channelname(), target);
  }

  // optional string AccountName = 4;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->accountname(), target);
  }

  // optional string AccountPwd = 5;
  if (has_accountpwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountpwd().data(), this->accountpwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->accountpwd(), target);
  }

  // optional string AccountKey = 6;
  if (has_accountkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountkey().data(), this->accountkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->accountkey(), target);
  }

  // optional sint32 IsAdult = 7;
  if (has_isadult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->isadult(), target);
  }

  // optional string DeviceID = 8;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->deviceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CAccountVerify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 AccountID = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accountid());
    }

    // optional string PlatformName = 2;
    if (has_platformname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platformname());
    }

    // optional string ChannelName = 3;
    if (has_channelname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelname());
    }

    // optional string AccountName = 4;
    if (has_accountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountname());
    }

    // optional string AccountPwd = 5;
    if (has_accountpwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountpwd());
    }

    // optional string AccountKey = 6;
    if (has_accountkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountkey());
    }

    // optional sint32 IsAdult = 7;
    if (has_isadult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->isadult());
    }

    // optional string DeviceID = 8;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAccountVerify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CAccountVerify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CAccountVerify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAccountVerify::MergeFrom(const CAccountVerify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_platformname()) {
      set_platformname(from.platformname());
    }
    if (from.has_channelname()) {
      set_channelname(from.channelname());
    }
    if (from.has_accountname()) {
      set_accountname(from.accountname());
    }
    if (from.has_accountpwd()) {
      set_accountpwd(from.accountpwd());
    }
    if (from.has_accountkey()) {
      set_accountkey(from.accountkey());
    }
    if (from.has_isadult()) {
      set_isadult(from.isadult());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CAccountVerify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountVerify::CopyFrom(const CAccountVerify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountVerify::IsInitialized() const {

  return true;
}

void CAccountVerify::Swap(CAccountVerify* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(platformname_, other->platformname_);
    std::swap(channelname_, other->channelname_);
    std::swap(accountname_, other->accountname_);
    std::swap(accountpwd_, other->accountpwd_);
    std::swap(accountkey_, other->accountkey_);
    std::swap(isadult_, other->isadult_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CAccountVerify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAccountVerify_descriptor_;
  metadata.reflection = CAccountVerify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CAccountVerify_PlatformName::kAccountNameFieldNumber;
const int CAccountVerify_PlatformName::kPlatformNameFieldNumber;
#endif  // !_MSC_VER

CAccountVerify_PlatformName::CAccountVerify_PlatformName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CAccountVerify_PlatformName::InitAsDefaultInstance() {
}

CAccountVerify_PlatformName::CAccountVerify_PlatformName(const CAccountVerify_PlatformName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CAccountVerify_PlatformName::SharedCtor() {
  _cached_size_ = 0;
  accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platformname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAccountVerify_PlatformName::~CAccountVerify_PlatformName() {
  SharedDtor();
}

void CAccountVerify_PlatformName::SharedDtor() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (platformname_ != &::google::protobuf::internal::kEmptyString) {
    delete platformname_;
  }
  if (this != default_instance_) {
  }
}

void CAccountVerify_PlatformName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAccountVerify_PlatformName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAccountVerify_PlatformName_descriptor_;
}

const CAccountVerify_PlatformName& CAccountVerify_PlatformName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_accountVerify_2eproto();
  return *default_instance_;
}

CAccountVerify_PlatformName* CAccountVerify_PlatformName::default_instance_ = NULL;

CAccountVerify_PlatformName* CAccountVerify_PlatformName::New() const {
  return new CAccountVerify_PlatformName;
}

void CAccountVerify_PlatformName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_accountname()) {
      if (accountname_ != &::google::protobuf::internal::kEmptyString) {
        accountname_->clear();
      }
    }
    if (has_platformname()) {
      if (platformname_ != &::google::protobuf::internal::kEmptyString) {
        platformname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CAccountVerify_PlatformName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string AccountName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountname().data(), this->accountname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_PlatformName;
        break;
      }

      // optional string PlatformName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlatformName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platformname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platformname().data(), this->platformname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CAccountVerify_PlatformName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string AccountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->accountname(), output);
  }

  // optional string PlatformName = 2;
  if (has_platformname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platformname().data(), this->platformname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->platformname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CAccountVerify_PlatformName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string AccountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->accountname(), target);
  }

  // optional string PlatformName = 2;
  if (has_platformname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platformname().data(), this->platformname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->platformname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CAccountVerify_PlatformName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string AccountName = 1;
    if (has_accountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountname());
    }

    // optional string PlatformName = 2;
    if (has_platformname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platformname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAccountVerify_PlatformName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CAccountVerify_PlatformName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CAccountVerify_PlatformName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAccountVerify_PlatformName::MergeFrom(const CAccountVerify_PlatformName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountname()) {
      set_accountname(from.accountname());
    }
    if (from.has_platformname()) {
      set_platformname(from.platformname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CAccountVerify_PlatformName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountVerify_PlatformName::CopyFrom(const CAccountVerify_PlatformName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountVerify_PlatformName::IsInitialized() const {

  return true;
}

void CAccountVerify_PlatformName::Swap(CAccountVerify_PlatformName* other) {
  if (other != this) {
    std::swap(accountname_, other->accountname_);
    std::swap(platformname_, other->platformname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CAccountVerify_PlatformName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAccountVerify_PlatformName_descriptor_;
  metadata.reflection = CAccountVerify_PlatformName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CAccountVerify_ChannelName::kAccountNameFieldNumber;
const int CAccountVerify_ChannelName::kChannelNameFieldNumber;
#endif  // !_MSC_VER

CAccountVerify_ChannelName::CAccountVerify_ChannelName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CAccountVerify_ChannelName::InitAsDefaultInstance() {
}

CAccountVerify_ChannelName::CAccountVerify_ChannelName(const CAccountVerify_ChannelName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CAccountVerify_ChannelName::SharedCtor() {
  _cached_size_ = 0;
  accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAccountVerify_ChannelName::~CAccountVerify_ChannelName() {
  SharedDtor();
}

void CAccountVerify_ChannelName::SharedDtor() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (channelname_ != &::google::protobuf::internal::kEmptyString) {
    delete channelname_;
  }
  if (this != default_instance_) {
  }
}

void CAccountVerify_ChannelName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAccountVerify_ChannelName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAccountVerify_ChannelName_descriptor_;
}

const CAccountVerify_ChannelName& CAccountVerify_ChannelName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_accountVerify_2eproto();
  return *default_instance_;
}

CAccountVerify_ChannelName* CAccountVerify_ChannelName::default_instance_ = NULL;

CAccountVerify_ChannelName* CAccountVerify_ChannelName::New() const {
  return new CAccountVerify_ChannelName;
}

void CAccountVerify_ChannelName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_accountname()) {
      if (accountname_ != &::google::protobuf::internal::kEmptyString) {
        accountname_->clear();
      }
    }
    if (has_channelname()) {
      if (channelname_ != &::google::protobuf::internal::kEmptyString) {
        channelname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CAccountVerify_ChannelName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string AccountName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountname().data(), this->accountname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ChannelName;
        break;
      }

      // optional string ChannelName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ChannelName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channelname().data(), this->channelname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CAccountVerify_ChannelName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string AccountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->accountname(), output);
  }

  // optional string ChannelName = 2;
  if (has_channelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelname().data(), this->channelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->channelname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CAccountVerify_ChannelName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string AccountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->accountname(), target);
  }

  // optional string ChannelName = 2;
  if (has_channelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelname().data(), this->channelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->channelname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CAccountVerify_ChannelName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string AccountName = 1;
    if (has_accountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountname());
    }

    // optional string ChannelName = 2;
    if (has_channelname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAccountVerify_ChannelName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CAccountVerify_ChannelName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CAccountVerify_ChannelName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAccountVerify_ChannelName::MergeFrom(const CAccountVerify_ChannelName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountname()) {
      set_accountname(from.accountname());
    }
    if (from.has_channelname()) {
      set_channelname(from.channelname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CAccountVerify_ChannelName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountVerify_ChannelName::CopyFrom(const CAccountVerify_ChannelName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountVerify_ChannelName::IsInitialized() const {

  return true;
}

void CAccountVerify_ChannelName::Swap(CAccountVerify_ChannelName* other) {
  if (other != this) {
    std::swap(accountname_, other->accountname_);
    std::swap(channelname_, other->channelname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CAccountVerify_ChannelName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAccountVerify_ChannelName_descriptor_;
  metadata.reflection = CAccountVerify_ChannelName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CAccountVerify_AccountPwd::kAccountNameFieldNumber;
const int CAccountVerify_AccountPwd::kAccountPwdFieldNumber;
#endif  // !_MSC_VER

CAccountVerify_AccountPwd::CAccountVerify_AccountPwd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CAccountVerify_AccountPwd::InitAsDefaultInstance() {
}

CAccountVerify_AccountPwd::CAccountVerify_AccountPwd(const CAccountVerify_AccountPwd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CAccountVerify_AccountPwd::SharedCtor() {
  _cached_size_ = 0;
  accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accountpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAccountVerify_AccountPwd::~CAccountVerify_AccountPwd() {
  SharedDtor();
}

void CAccountVerify_AccountPwd::SharedDtor() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (accountpwd_ != &::google::protobuf::internal::kEmptyString) {
    delete accountpwd_;
  }
  if (this != default_instance_) {
  }
}

void CAccountVerify_AccountPwd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAccountVerify_AccountPwd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAccountVerify_AccountPwd_descriptor_;
}

const CAccountVerify_AccountPwd& CAccountVerify_AccountPwd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_accountVerify_2eproto();
  return *default_instance_;
}

CAccountVerify_AccountPwd* CAccountVerify_AccountPwd::default_instance_ = NULL;

CAccountVerify_AccountPwd* CAccountVerify_AccountPwd::New() const {
  return new CAccountVerify_AccountPwd;
}

void CAccountVerify_AccountPwd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_accountname()) {
      if (accountname_ != &::google::protobuf::internal::kEmptyString) {
        accountname_->clear();
      }
    }
    if (has_accountpwd()) {
      if (accountpwd_ != &::google::protobuf::internal::kEmptyString) {
        accountpwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CAccountVerify_AccountPwd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string AccountName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountname().data(), this->accountname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AccountPwd;
        break;
      }

      // optional string AccountPwd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AccountPwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountpwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountpwd().data(), this->accountpwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CAccountVerify_AccountPwd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string AccountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->accountname(), output);
  }

  // optional string AccountPwd = 2;
  if (has_accountpwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountpwd().data(), this->accountpwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->accountpwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CAccountVerify_AccountPwd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string AccountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->accountname(), target);
  }

  // optional string AccountPwd = 2;
  if (has_accountpwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountpwd().data(), this->accountpwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->accountpwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CAccountVerify_AccountPwd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string AccountName = 1;
    if (has_accountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountname());
    }

    // optional string AccountPwd = 2;
    if (has_accountpwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountpwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAccountVerify_AccountPwd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CAccountVerify_AccountPwd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CAccountVerify_AccountPwd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAccountVerify_AccountPwd::MergeFrom(const CAccountVerify_AccountPwd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountname()) {
      set_accountname(from.accountname());
    }
    if (from.has_accountpwd()) {
      set_accountpwd(from.accountpwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CAccountVerify_AccountPwd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountVerify_AccountPwd::CopyFrom(const CAccountVerify_AccountPwd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountVerify_AccountPwd::IsInitialized() const {

  return true;
}

void CAccountVerify_AccountPwd::Swap(CAccountVerify_AccountPwd* other) {
  if (other != this) {
    std::swap(accountname_, other->accountname_);
    std::swap(accountpwd_, other->accountpwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CAccountVerify_AccountPwd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAccountVerify_AccountPwd_descriptor_;
  metadata.reflection = CAccountVerify_AccountPwd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CAccountVerify_AccountKey::kAccountNameFieldNumber;
const int CAccountVerify_AccountKey::kAccountKeyFieldNumber;
#endif  // !_MSC_VER

CAccountVerify_AccountKey::CAccountVerify_AccountKey()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CAccountVerify_AccountKey::InitAsDefaultInstance() {
}

CAccountVerify_AccountKey::CAccountVerify_AccountKey(const CAccountVerify_AccountKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CAccountVerify_AccountKey::SharedCtor() {
  _cached_size_ = 0;
  accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accountkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAccountVerify_AccountKey::~CAccountVerify_AccountKey() {
  SharedDtor();
}

void CAccountVerify_AccountKey::SharedDtor() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (accountkey_ != &::google::protobuf::internal::kEmptyString) {
    delete accountkey_;
  }
  if (this != default_instance_) {
  }
}

void CAccountVerify_AccountKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAccountVerify_AccountKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAccountVerify_AccountKey_descriptor_;
}

const CAccountVerify_AccountKey& CAccountVerify_AccountKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_accountVerify_2eproto();
  return *default_instance_;
}

CAccountVerify_AccountKey* CAccountVerify_AccountKey::default_instance_ = NULL;

CAccountVerify_AccountKey* CAccountVerify_AccountKey::New() const {
  return new CAccountVerify_AccountKey;
}

void CAccountVerify_AccountKey::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_accountname()) {
      if (accountname_ != &::google::protobuf::internal::kEmptyString) {
        accountname_->clear();
      }
    }
    if (has_accountkey()) {
      if (accountkey_ != &::google::protobuf::internal::kEmptyString) {
        accountkey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CAccountVerify_AccountKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string AccountName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountname().data(), this->accountname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AccountKey;
        break;
      }

      // optional string AccountKey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AccountKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountkey().data(), this->accountkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CAccountVerify_AccountKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string AccountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->accountname(), output);
  }

  // optional string AccountKey = 2;
  if (has_accountkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountkey().data(), this->accountkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->accountkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CAccountVerify_AccountKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string AccountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->accountname(), target);
  }

  // optional string AccountKey = 2;
  if (has_accountkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountkey().data(), this->accountkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->accountkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CAccountVerify_AccountKey::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string AccountName = 1;
    if (has_accountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountname());
    }

    // optional string AccountKey = 2;
    if (has_accountkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAccountVerify_AccountKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CAccountVerify_AccountKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CAccountVerify_AccountKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAccountVerify_AccountKey::MergeFrom(const CAccountVerify_AccountKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountname()) {
      set_accountname(from.accountname());
    }
    if (from.has_accountkey()) {
      set_accountkey(from.accountkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CAccountVerify_AccountKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountVerify_AccountKey::CopyFrom(const CAccountVerify_AccountKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountVerify_AccountKey::IsInitialized() const {

  return true;
}

void CAccountVerify_AccountKey::Swap(CAccountVerify_AccountKey* other) {
  if (other != this) {
    std::swap(accountname_, other->accountname_);
    std::swap(accountkey_, other->accountkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CAccountVerify_AccountKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAccountVerify_AccountKey_descriptor_;
  metadata.reflection = CAccountVerify_AccountKey_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CAccountVerify_IsAdult::kAccountNameFieldNumber;
const int CAccountVerify_IsAdult::kIsAdultFieldNumber;
#endif  // !_MSC_VER

CAccountVerify_IsAdult::CAccountVerify_IsAdult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CAccountVerify_IsAdult::InitAsDefaultInstance() {
}

CAccountVerify_IsAdult::CAccountVerify_IsAdult(const CAccountVerify_IsAdult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CAccountVerify_IsAdult::SharedCtor() {
  _cached_size_ = 0;
  accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isadult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAccountVerify_IsAdult::~CAccountVerify_IsAdult() {
  SharedDtor();
}

void CAccountVerify_IsAdult::SharedDtor() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (this != default_instance_) {
  }
}

void CAccountVerify_IsAdult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAccountVerify_IsAdult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAccountVerify_IsAdult_descriptor_;
}

const CAccountVerify_IsAdult& CAccountVerify_IsAdult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_accountVerify_2eproto();
  return *default_instance_;
}

CAccountVerify_IsAdult* CAccountVerify_IsAdult::default_instance_ = NULL;

CAccountVerify_IsAdult* CAccountVerify_IsAdult::New() const {
  return new CAccountVerify_IsAdult;
}

void CAccountVerify_IsAdult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_accountname()) {
      if (accountname_ != &::google::protobuf::internal::kEmptyString) {
        accountname_->clear();
      }
    }
    isadult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CAccountVerify_IsAdult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string AccountName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountname().data(), this->accountname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_IsAdult;
        break;
      }

      // optional sint32 IsAdult = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsAdult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &isadult_)));
          set_has_isadult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CAccountVerify_IsAdult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string AccountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->accountname(), output);
  }

  // optional sint32 IsAdult = 2;
  if (has_isadult()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->isadult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CAccountVerify_IsAdult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string AccountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->accountname(), target);
  }

  // optional sint32 IsAdult = 2;
  if (has_isadult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->isadult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CAccountVerify_IsAdult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string AccountName = 1;
    if (has_accountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountname());
    }

    // optional sint32 IsAdult = 2;
    if (has_isadult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->isadult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAccountVerify_IsAdult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CAccountVerify_IsAdult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CAccountVerify_IsAdult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAccountVerify_IsAdult::MergeFrom(const CAccountVerify_IsAdult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountname()) {
      set_accountname(from.accountname());
    }
    if (from.has_isadult()) {
      set_isadult(from.isadult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CAccountVerify_IsAdult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountVerify_IsAdult::CopyFrom(const CAccountVerify_IsAdult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountVerify_IsAdult::IsInitialized() const {

  return true;
}

void CAccountVerify_IsAdult::Swap(CAccountVerify_IsAdult* other) {
  if (other != this) {
    std::swap(accountname_, other->accountname_);
    std::swap(isadult_, other->isadult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CAccountVerify_IsAdult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAccountVerify_IsAdult_descriptor_;
  metadata.reflection = CAccountVerify_IsAdult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CAccountVerify_DeviceID::kAccountNameFieldNumber;
const int CAccountVerify_DeviceID::kDeviceIDFieldNumber;
#endif  // !_MSC_VER

CAccountVerify_DeviceID::CAccountVerify_DeviceID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CAccountVerify_DeviceID::InitAsDefaultInstance() {
}

CAccountVerify_DeviceID::CAccountVerify_DeviceID(const CAccountVerify_DeviceID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CAccountVerify_DeviceID::SharedCtor() {
  _cached_size_ = 0;
  accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAccountVerify_DeviceID::~CAccountVerify_DeviceID() {
  SharedDtor();
}

void CAccountVerify_DeviceID::SharedDtor() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (this != default_instance_) {
  }
}

void CAccountVerify_DeviceID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAccountVerify_DeviceID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAccountVerify_DeviceID_descriptor_;
}

const CAccountVerify_DeviceID& CAccountVerify_DeviceID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_accountVerify_2eproto();
  return *default_instance_;
}

CAccountVerify_DeviceID* CAccountVerify_DeviceID::default_instance_ = NULL;

CAccountVerify_DeviceID* CAccountVerify_DeviceID::New() const {
  return new CAccountVerify_DeviceID;
}

void CAccountVerify_DeviceID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_accountname()) {
      if (accountname_ != &::google::protobuf::internal::kEmptyString) {
        accountname_->clear();
      }
    }
    if (has_deviceid()) {
      if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
        deviceid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CAccountVerify_DeviceID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string AccountName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountname().data(), this->accountname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_DeviceID;
        break;
      }

      // optional string DeviceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DeviceID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CAccountVerify_DeviceID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string AccountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->accountname(), output);
  }

  // optional string DeviceID = 2;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->deviceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CAccountVerify_DeviceID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string AccountName = 1;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->accountname(), target);
  }

  // optional string DeviceID = 2;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->deviceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CAccountVerify_DeviceID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string AccountName = 1;
    if (has_accountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountname());
    }

    // optional string DeviceID = 2;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAccountVerify_DeviceID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CAccountVerify_DeviceID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CAccountVerify_DeviceID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAccountVerify_DeviceID::MergeFrom(const CAccountVerify_DeviceID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountname()) {
      set_accountname(from.accountname());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CAccountVerify_DeviceID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountVerify_DeviceID::CopyFrom(const CAccountVerify_DeviceID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountVerify_DeviceID::IsInitialized() const {

  return true;
}

void CAccountVerify_DeviceID::Swap(CAccountVerify_DeviceID* other) {
  if (other != this) {
    std::swap(accountname_, other->accountname_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CAccountVerify_DeviceID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAccountVerify_DeviceID_descriptor_;
  metadata.reflection = CAccountVerify_DeviceID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CAccountVerifyList::kObjectsFieldNumber;
#endif  // !_MSC_VER

CAccountVerifyList::CAccountVerifyList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CAccountVerifyList::InitAsDefaultInstance() {
}

CAccountVerifyList::CAccountVerifyList(const CAccountVerifyList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CAccountVerifyList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CAccountVerifyList::~CAccountVerifyList() {
  SharedDtor();
}

void CAccountVerifyList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CAccountVerifyList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAccountVerifyList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CAccountVerifyList_descriptor_;
}

const CAccountVerifyList& CAccountVerifyList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_accountVerify_2eproto();
  return *default_instance_;
}

CAccountVerifyList* CAccountVerifyList::default_instance_ = NULL;

CAccountVerifyList* CAccountVerifyList::New() const {
  return new CAccountVerifyList;
}

void CAccountVerifyList::Clear() {
  objects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CAccountVerifyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PTBuf.CAccountVerify Objects = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Objects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objects()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Objects;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CAccountVerifyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PTBuf.CAccountVerify Objects = 1;
  for (int i = 0; i < this->objects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->objects(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CAccountVerifyList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PTBuf.CAccountVerify Objects = 1;
  for (int i = 0; i < this->objects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->objects(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CAccountVerifyList::ByteSize() const {
  int total_size = 0;

  // repeated .PTBuf.CAccountVerify Objects = 1;
  total_size += 1 * this->objects_size();
  for (int i = 0; i < this->objects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objects(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAccountVerifyList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CAccountVerifyList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CAccountVerifyList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CAccountVerifyList::MergeFrom(const CAccountVerifyList& from) {
  GOOGLE_CHECK_NE(&from, this);
  objects_.MergeFrom(from.objects_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CAccountVerifyList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAccountVerifyList::CopyFrom(const CAccountVerifyList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAccountVerifyList::IsInitialized() const {

  return true;
}

void CAccountVerifyList::Swap(CAccountVerifyList* other) {
  if (other != this) {
    objects_.Swap(&other->objects_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CAccountVerifyList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CAccountVerifyList_descriptor_;
  metadata.reflection = CAccountVerifyList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PTBuf

// @@protoc_insertion_point(global_scope)
