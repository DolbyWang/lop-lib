// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

#include "accountAuth.pe.h"
#include <BCLib/utility/convert.h>
#include <BCLib/utility/logFile.h>

namespace PTExt
{

CAccountAuth::CAccountAuth()
{
}

CAccountAuth::CAccountAuth(const PTBuf::CAccountAuth& ptBuf)
{
    m_ptBuf = ptBuf;
}

CAccountAuth::~CAccountAuth()
{
}

PTBuf::CAccountAuth& CAccountAuth::getBuf()
{
    return m_ptBuf;
}

void CAccountAuth::dumpInfo()
{
    BCLIB_LOG_TRACE(BCLib::ELOGMODULE_DEFAULT, "DumpInfo : accountid = %llu, accountname = %s, accountpwd = %s, accountorigin = %u, accountstate = %u, permission = %llu, nickname = %s, email = %s, emailauth = %u, mobilephone = %s, mobilephoneauth = %u, idcard = %s, idcardauth = %u, registerip = %s, loginip = %s, limitip = %s", m_ptBuf.accountid(), m_ptBuf.accountname().c_str(), m_ptBuf.accountpwd().c_str(), m_ptBuf.accountorigin(), m_ptBuf.accountstate(), m_ptBuf.permission(), m_ptBuf.nickname().c_str(), m_ptBuf.email().c_str(), m_ptBuf.emailauth(), m_ptBuf.mobilephone().c_str(), m_ptBuf.mobilephoneauth(), m_ptBuf.idcard().c_str(), m_ptBuf.idcardauth(), m_ptBuf.registerip().c_str(), m_ptBuf.loginip().c_str(), m_ptBuf.limitip().c_str());
}

bool CAccountAuth::isValidity(PTBuf::CAccountAuth& ptBuf)
{
    std::string strValue = "";

    // string
    strValue = "";
    BCLib::Utility::CConvert::utf8ToGB2312(strValue, ptBuf.accountname());
    if (strValue.size() > 64) return false;
    // string
    strValue = "";
    BCLib::Utility::CConvert::utf8ToGB2312(strValue, ptBuf.accountpwd());
    if (strValue.size() > 32) return false;
    // ushort
    if (ptBuf.accountorigin() > BCLIB_UINT16_MAX) return false;
    // byte
    if (ptBuf.accountstate() > BCLIB_UINT8_MAX) return false;
    // string
    strValue = "";
    BCLib::Utility::CConvert::utf8ToGB2312(strValue, ptBuf.nickname());
    if (strValue.size() > 64) return false;
    // string
    strValue = "";
    BCLib::Utility::CConvert::utf8ToGB2312(strValue, ptBuf.email());
    if (strValue.size() > 64) return false;
    // byte
    if (ptBuf.emailauth() > BCLIB_UINT8_MAX) return false;
    // string
    strValue = "";
    BCLib::Utility::CConvert::utf8ToGB2312(strValue, ptBuf.mobilephone());
    if (strValue.size() > 16) return false;
    // byte
    if (ptBuf.mobilephoneauth() > BCLIB_UINT8_MAX) return false;
    // string
    strValue = "";
    BCLib::Utility::CConvert::utf8ToGB2312(strValue, ptBuf.idcard());
    if (strValue.size() > 32) return false;
    // byte
    if (ptBuf.idcardauth() > BCLIB_UINT8_MAX) return false;
    // string
    strValue = "";
    BCLib::Utility::CConvert::utf8ToGB2312(strValue, ptBuf.registerip());
    if (strValue.size() > 16) return false;
    // string
    strValue = "";
    BCLib::Utility::CConvert::utf8ToGB2312(strValue, ptBuf.loginip());
    if (strValue.size() > 16) return false;
    // string
    strValue = "";
    BCLib::Utility::CConvert::utf8ToGB2312(strValue, ptBuf.limitip());
    if (strValue.size() > 128) return false;

    return true;
}

bool CAccountAuth::makeValidity(PTBuf::CAccountAuth& ptBuf)
{
    std::string strValue = "";

    // string
    strValue = "";
    BCLib::Utility::CConvert::utf8ToGB2312(strValue, ptBuf.accountname());
    if (strValue.size() > 64) strValue = strValue.substr(0, 64);
    BCLib::Utility::CConvert::gb2312ToUTF8(strValue, strValue);
    ptBuf.set_accountname(strValue);
    // string
    strValue = "";
    BCLib::Utility::CConvert::utf8ToGB2312(strValue, ptBuf.accountpwd());
    if (strValue.size() > 32) strValue = strValue.substr(0, 32);
    BCLib::Utility::CConvert::gb2312ToUTF8(strValue, strValue);
    ptBuf.set_accountpwd(strValue);
    // ushort
    if (ptBuf.accountorigin() > BCLIB_UINT16_MAX) ptBuf.set_accountorigin(BCLIB_UINT16_MAX);
    // byte
    if (ptBuf.accountstate() > BCLIB_UINT8_MAX) ptBuf.set_accountstate(BCLIB_UINT8_MAX);
    // string
    strValue = "";
    BCLib::Utility::CConvert::utf8ToGB2312(strValue, ptBuf.nickname());
    if (strValue.size() > 64) strValue = strValue.substr(0, 64);
    BCLib::Utility::CConvert::gb2312ToUTF8(strValue, strValue);
    ptBuf.set_nickname(strValue);
    // string
    strValue = "";
    BCLib::Utility::CConvert::utf8ToGB2312(strValue, ptBuf.email());
    if (strValue.size() > 64) strValue = strValue.substr(0, 64);
    BCLib::Utility::CConvert::gb2312ToUTF8(strValue, strValue);
    ptBuf.set_email(strValue);
    // byte
    if (ptBuf.emailauth() > BCLIB_UINT8_MAX) ptBuf.set_emailauth(BCLIB_UINT8_MAX);
    // string
    strValue = "";
    BCLib::Utility::CConvert::utf8ToGB2312(strValue, ptBuf.mobilephone());
    if (strValue.size() > 16) strValue = strValue.substr(0, 16);
    BCLib::Utility::CConvert::gb2312ToUTF8(strValue, strValue);
    ptBuf.set_mobilephone(strValue);
    // byte
    if (ptBuf.mobilephoneauth() > BCLIB_UINT8_MAX) ptBuf.set_mobilephoneauth(BCLIB_UINT8_MAX);
    // string
    strValue = "";
    BCLib::Utility::CConvert::utf8ToGB2312(strValue, ptBuf.idcard());
    if (strValue.size() > 32) strValue = strValue.substr(0, 32);
    BCLib::Utility::CConvert::gb2312ToUTF8(strValue, strValue);
    ptBuf.set_idcard(strValue);
    // byte
    if (ptBuf.idcardauth() > BCLIB_UINT8_MAX) ptBuf.set_idcardauth(BCLIB_UINT8_MAX);
    // string
    strValue = "";
    BCLib::Utility::CConvert::utf8ToGB2312(strValue, ptBuf.registerip());
    if (strValue.size() > 16) strValue = strValue.substr(0, 16);
    BCLib::Utility::CConvert::gb2312ToUTF8(strValue, strValue);
    ptBuf.set_registerip(strValue);
    // string
    strValue = "";
    BCLib::Utility::CConvert::utf8ToGB2312(strValue, ptBuf.loginip());
    if (strValue.size() > 16) strValue = strValue.substr(0, 16);
    BCLib::Utility::CConvert::gb2312ToUTF8(strValue, strValue);
    ptBuf.set_loginip(strValue);
    // string
    strValue = "";
    BCLib::Utility::CConvert::utf8ToGB2312(strValue, ptBuf.limitip());
    if (strValue.size() > 128) strValue = strValue.substr(0, 128);
    BCLib::Utility::CConvert::gb2312ToUTF8(strValue, strValue);
    ptBuf.set_limitip(strValue);

    return true;
}

bool CAccountAuth::canUpdate(PTBuf::CAccountAuth& oldBuf, PTBuf::CAccountAuth& newBuf)
{
    return true;
}

BCLIB_SINGLETON_DEFINE(CAccountAuthOwner)

CAccountAuthOwner::CAccountAuthOwner()
{
}

CAccountAuthOwner::~CAccountAuthOwner()
{
}

bool CAccountAuthOwner::addObject(BCLib::uint64 key, const PTBuf::CAccountAuth& ptBuf)
{
    if (m_hashMap.find(key) != m_hashMap.end()) return false;

    PTExt::CAccountAuth tmpBuf(ptBuf);
    m_hashMap.setValue(key, tmpBuf);
    return true;
}

bool CAccountAuthOwner::addObject(BCLib::uint64 key, const PTExt::CAccountAuth& ptBuf)
{
    if (m_hashMap.find(key) != m_hashMap.end()) return false;

    m_hashMap.setValue(key, ptBuf);
    return true;
}

PTExt::CAccountAuth* CAccountAuthOwner::getObject(BCLib::uint64 entityID)
{
    if (entityID == 0) return NULL;

    THashMap::iterator it = m_hashMap.find(entityID);
    if (it != m_hashMap.end())
    {
        return &it->second;
    }

    return NULL;
}

bool CAccountAuthOwner::delObject(BCLib::uint64 entityID)
{
    if (entityID == 0) return false;

    THashMap::iterator it = m_hashMap.find(entityID);
    if (it != m_hashMap.end())
    {
        m_hashMap.erase(it);
        return true;
    }

    return true;
}

void CAccountAuthOwner::dumpInfo(BCLib::uint64 entityID)
{
    if (entityID == 0) return;

    THashMap::iterator it = m_hashMap.find(entityID);
    if (it != m_hashMap.end())
    {
        it->second.dumpInfo();
    }
}


CAccountAuthList::CAccountAuthList()
{
}

CAccountAuthList::CAccountAuthList(const PTBuf::CAccountAuthList& ptList)
{
    m_List = ptList;
}

CAccountAuthList::~CAccountAuthList()
{
}

void CAccountAuthList::dumpInfo()
{
    for(int i = 0; i < m_List.objects_size(); i++)
    {
        CAccountAuth tmpBuf(m_List.objects(i));
        tmpBuf.dumpInfo();
    }
}

PTBuf::CAccountAuthList& CAccountAuthList::getList()
{
    return m_List;
}


BCLIB_SINGLETON_DEFINE(CAccountAuthListCtrl)

CAccountAuthListCtrl::CAccountAuthListCtrl()
{
}

CAccountAuthListCtrl::~CAccountAuthListCtrl()
{
}


BCLIB_SINGLETON_DEFINE(CAccountAuthListOwner)

CAccountAuthListOwner::CAccountAuthListOwner()
{
}

CAccountAuthListOwner::~CAccountAuthListOwner()
{
}

bool CAccountAuthListOwner::addObject(BCLib::uint64 entityID, const PTBuf::CAccountAuthList& ptList)
{
    if (m_hashMap.find(entityID) != m_hashMap.end()) return false;

    PTExt::CAccountAuthList tmpList(ptList);
    m_hashMap.setValue(entityID, tmpList);
    return true;
}

bool CAccountAuthListOwner::addObject(BCLib::uint64 entityID, const PTExt::CAccountAuthList& ptList)
{
    if (m_hashMap.find(entityID) != m_hashMap.end()) return false;

    m_hashMap.setValue(entityID, ptList);
    return true;
}

PTExt::CAccountAuthList* CAccountAuthListOwner::getObject(BCLib::uint64 entityID)
{
    if (entityID == 0) return NULL;

    THashMap::iterator it = m_hashMap.find(entityID);
    if (it != m_hashMap.end())
    {
        return &it->second;
    }

    return NULL;
}

bool CAccountAuthListOwner::delObject(BCLib::uint64 entityID)
{
    if (entityID == 0) return false;

    THashMap::iterator it = m_hashMap.find(entityID);
    if (it != m_hashMap.end())
    {
        m_hashMap.erase(it);
        return true;
    }

    return true;
}

void CAccountAuthListOwner::dumpInfo(BCLib::uint64 entityID)
{
    if (entityID == 0) return;

    THashMap::iterator it = m_hashMap.find(entityID);
    if (it != m_hashMap.end())
    {
        it->second.dumpInfo();
    }
}


} // namespace PTExt
