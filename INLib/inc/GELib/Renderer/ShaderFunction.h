//////////////////////////////////////////////////////////////////////
//  created:    2010/06/06
//  filename:   GELib/Renderer/ShaderFunction.h
//  author:     League of Perfect
/// @brief
///
//////////////////////////////////////////////////////////////////////
#ifndef __GELIB_RENDERER_SHADERFUNCTION_H__
#define __GELIB_RENDERER_SHADERFUNCTION_H__

namespace GELib
{


enum EShaderFunction
{
    SHADER_FUNCTION_NONE = 0,

    // mesh, material
    SHADER_FUNCTION_DEPTH,
    SHADER_FUNCTION_SHADOW_DEPTH,
    SHADER_FUNCTION_POINT_LIGHT,
    SHADER_FUNCTION_SPOT_LIGHT,
    SHADER_FUNCTION_DIRECTIONAL_LIGHT,
    SHADER_FUNCTION_AMBIENT_EMISSIVE,
    SHADER_FUNCTION_AMBIENT_DIRECTIONAL_LIGHT,
    SHADER_FUNCTION_VERTEX_LIGHT,
    SHADER_FUNCTION_VERTEX_LIGHT_LOW,
    SHADER_FUNCTION_VERTEX_SKY,
    SHADER_FUNCTION_VERTEX_SKY_LOW,
    SHADER_FUNCTION_DISTORTION,
    SHADER_FUNCTION_DISTORTION_ACCUMULATE,
// modified by bob -- start
    SHADER_FUNCTION_WATER,
    SHADER_FUNCTION_SEAWAVE,
    SHADER_FUNCTION_OCTAVEMAKER,
    SHADER_FUNCTION_NOISEMAKER,
// modified by bob -- end
    SHADER_FUNCTION_VOLUME_DEPTH,
    SHADER_FUNCTION_VOLUME_COLOR,
    SHADER_FUNCTION_FLAT_COLOR,
    SHADER_FUNCTION_FLAT_COLOR_ALPHA_TEST,
    SHADER_FUNCTION_GLOW,
    SHADER_FUNCTION_VELOCITY,
    SHADER_FUNCTION_LIGHT_MATERIAL,
    SHADER_FUNCTION_PROJECTOR,
    SHADER_FUNCTION_GBUFFER,
    SHADER_FUNCTION_DEFERRED_POINT_LIGHT,
    SHADER_FUNCTION_DEFERRED_SPOT_LIGHT,
    SHADER_FUNCTION_DEFERRED_DIRECTIONAL_LIGHT,
    SHADER_FUNCTION_AMBIENT_DEFERRED_LIGHT,

    // lightmap
    SHADER_FUNCTION_LIGHTMAP,
    SHADER_FUNCTION_LIGHTMAP_AMBIENT,
    SHADER_FUNCTION_LIGHTMAP_SHADOW_PROJECTION,
    SHADER_FUNCTION_DEPTHMAP,

	// debug, statistic
    SHADER_FUNCTION_TEXTURE_RESOLUTION,

    // renderer utility
    SHADER_FUNCTION_PRIMITIVE,
    SHADER_FUNCTION_SHADOW_PROJECTION,
    SHADER_FUNCTION_PSSM_PROJECTION,
    SHADER_FUNCTION_PSSM_PROJECTION_HIGHT_QUALITY,
    SHADER_FUNCTION_PSSM_VARIANCE_PROJECTION,
    SHADER_FUNCTION_VARIANCE_SHADOW_PROJECTION,
    SHADER_FUNCTION_BLUR_SHADOW_PROJECTION,
    SHADER_FUNCTION_BLUR_VARIANCE_SHADOW_DEPTH,
    SHADER_FUNCTION_COPY_VARIANCE_SHADOW_DEPTH,
    SHADER_FUNCTION_VOLUME_INTERSECTION,

    // image process
    SHADER_FUNCTION_FILL_COLOR,
    SHADER_FUNCTION_FILL_TEXTURE,
    SHADER_FUNCTION_FILL_TEXTURE_WITH_ALPHA,
    SHADER_FUNCTION_FILL_TEXTURE_WITH_MULTIPILIER_AND_ADDER,
    SHADER_FUNCTION_GAMMA_TEXTURE,
    SHADER_FUNCTION_DOWN_SAMPLE_4X4,
    SHADER_FUNCTION_DOWN_SAMPLE_3X3,
    SHADER_FUNCTION_DOWN_SAMPLE_2X2,
    SHADER_FUNCTION_DOWN_SAMPLE_MAX_4X4,
    SHADER_FUNCTION_DOWN_SAMPLE_MAX_2X2,
    SHADER_FUNCTION_DOWN_SAMPLE_MIN_4X4,
    SHADER_FUNCTION_DOWN_SAMPLE_MIN_2X2,
    SHADER_FUNCTION_DOWN_SAMPLE_4X4_BILINEAR,
    SHADER_FUNCTION_NEAREST_DEPTH_UP_SAMPLE,
    SHADER_FUNCTION_GAUSSIAN_FILTER_3X3,
    SHADER_FUNCTION_GAUSSIAN_FILTER_5X5,
    SHADER_FUNCTION_GAUSSIAN_FILTER_15X15,
    SHADER_FUNCTION_BRIGHT_PASS,
    SHADER_FUNCTION_GAUSSIAN_FILTER_BILINEAR,
    SHADER_FUNCTION_GAUSSIAN_FILTER_BILINEAR1,
    SHADER_FUNCTION_GAUSSIAN_FILTER_BILINEAR2,
    SHADER_FUNCTION_GAUSSIAN_FILTER_BILINEAR3,
    SHADER_FUNCTION_GAUSSIAN_FILTER_BILINEAR4,
    SHADER_FUNCTION_GAUSSIAN_FILTER_BILINEAR5,
    SHADER_FUNCTION_GAUSSIAN_FILTER_BILINEAR6,
    SHADER_FUNCTION_GAUSSIAN_FILTER_BILINEAR7,
    SHADER_FUNCTION_GAUSSIAN_FILTER_BILINEAR8,
    SHADER_FUNCTION_GAUSSIAN_FILTER_BILINEAR9,
    SHADER_FUNCTION_GAUSSIAN_FILTER_BILINEAR10,
    SHADER_FUNCTION_GAUSSIAN_FILTER_BILINEAR11,
    SHADER_FUNCTION_GAUSSIAN_FILTER_BILINEAR12,
    SHADER_FUNCTION_GAUSSIAN_FILTER_BILINEAR13,
    SHADER_FUNCTION_GAUSSIAN_FILTER_BILINEAR14,
    SHADER_FUNCTION_GAUSSIAN_FILTER_BILINEAR15,
    SHADER_FUNCTION_DOF_FILTER_BILINEAR,
    SHADER_FUNCTION_DOF_FILTER_BILINEAR1,
    SHADER_FUNCTION_DOF_FILTER_BILINEAR2,
    SHADER_FUNCTION_DOF_FILTER_BILINEAR3,
    SHADER_FUNCTION_DOF_FILTER_BILINEAR4,
    SHADER_FUNCTION_DOF_FILTER_BILINEAR5,

    // lightmap image process
    SHADER_FUNCTION_BLUR_LIGHTMAP,
    SHADER_FUNCTION_EDGE_PADDING,
    SHADER_FUNCTION_EXTRACT_MONO_SHADOW,
    SHADER_FUNCTION_EXTRACT_COLOR_SHADOW,
    SHADER_FUNCTION_ENCODE_RGBM,
    SHADER_FUNCTION_COMPUTE_BASIS_INTENSITY,

    // screen effect
    SHADER_FUNCTION_FOG,
    SHADER_FUNCTION_CAMERA_VELOCITY,
    SHADER_FUNCTION_MOTION_BLUR,
    SHADER_FUNCTION_MOTION_BLUR_HIGH_QUALITY,
    SHADER_FUNCTION_DISTORTION_APPLY,
    SHADER_FUNCTION_SSAO,
    SHADER_FUNCTION_BUILD_LIGHT_SHAFT,
    SHADER_FUNCTION_BLUR_LIGHT_SHAFT,
    SHADER_FUNCTION_FXAA,
    SHADER_FUNCTION_FXAA_HIGH_QUALITY,

    // post process
    SHADER_FUNCTION_POST_PROCESS,
    SHADER_FUNCTION_POST_PROCESS_DOF,
    SHADER_FUNCTION_POST_PROCESS_COLORGRADING,
    SHADER_FUNCTION_POST_PROCESS_TONE,
    SHADER_FUNCTION_POST_PROCESS_LUM,
    SHADER_FUNCTION_POST_PROCESS_DOF_COLORGRADING,
    SHADER_FUNCTION_POST_PROCESS_DOF_TONE,
    SHADER_FUNCTION_POST_PROCESS_DOF_LUM,
    SHADER_FUNCTION_POST_PROCESS_COLORGRADING_TONE,
    SHADER_FUNCTION_POST_PROCESS_COLORGRADING_LUM,
    SHADER_FUNCTION_POST_PROCESS_DOF_COLORGRADING_TONE,
    SHADER_FUNCTION_POST_PROCESS_DOF_COLORGRADING_LUM,
    SHADER_FUNCTION_POST_PROCESS_DOF_COLORGRADING_TONE_LUM,
    SHADER_FUNCTION_POST_PROCESS_TONE_LUM,
    SHADER_FUNCTION_POST_PROCESS_DOF_TONE_LUM,
    SHADER_FUNCTION_POST_PROCESS_COLORGRADING_TONE_LUM,

	// SHADER_FUNCTION_PLOTTER3D
    SHADER_FUNCTION_PLOTTER3D,

	// SHADER_FUNCTION_PLOTTER2D
    SHADER_FUNCTION_PLOTTER2D,
    SHADER_FUNCTION_PLOTTER2D_COLOR,
    SHADER_FUNCTION_PLOTTER2D_COLORMASK,
    SHADER_FUNCTION_PLOTTER2D_T1,
    SHADER_FUNCTION_PLOTTER2D_T1MASK,
    SHADER_FUNCTION_PLOTTER2D_T1ALPHA,
    SHADER_FUNCTION_PLOTTER2D_T1ALPHAMASK,
    SHADER_FUNCTION_PLOTTER2D_T1CHANNEL,
    SHADER_FUNCTION_PLOTTER2D_T1CHANNELMASK,
    SHADER_FUNCTION_PLOTTER2D_T1ALPHAOUTLINE,
    SHADER_FUNCTION_PLOTTER2D_T1ALPHAOUTLINEMASK,
    SHADER_FUNCTION_PLOTTER2D_T1ALPHASHADOW,
    SHADER_FUNCTION_PLOTTER2D_T1ALPHASHADOWMASK,
};

class CShader;
CShader* CreateShaderFunction(EShaderFunction f);


}//GELib

#endif//__GELIB_RENDERER_SHADERFUNCTION_H__
